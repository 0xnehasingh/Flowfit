(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[185],{8252:function(e,t,n){Promise.resolve().then(n.t.bind(n,6866,23)),Promise.resolve().then(n.bind(n,1847)),Promise.resolve().then(n.bind(n,6028))},1847:function(e,t,n){"use strict";n.d(t,{Sq:function(){return a},UR:function(){return g},default:function(){return w},em:function(){return o}});var r,c,o,a,s=n(7821),l=n(8078),i=n(8434),d=n(2122),u=n(6028);i.vc({"accessNode.api":"https://rest-testnet.onflow.org","discovery.wallet":"https://fcl-discovery.onflow.org/testnet/authn","app.detail.title":"FlowFit - Gamified Fitness","app.detail.icon":"https://flowfit.io/logo.png","app.detail.description":"The first gasless fitness protocol on Flow blockchain","flow.network":"testnet"}),(r=o||(o={})).DISCONNECTED="disconnected",r.CONNECTING="connecting",r.CONNECTED="connected",r.ERROR="error",r.RECONNECTING="reconnecting",(c=a||(a={})).BLOCTO="blocto",c.DAPPER="dapper",c.LILICO="lilico",c.FINOA="finoa",c.LEDGER="ledger";let f=(0,l.createContext)(void 0),g=()=>{let e=(0,l.useContext)(f);if(!e)throw Error("useFlow must be used within a FlowProvider");return e};function w(e){let{children:t}=e,[n,r]=(0,l.useState)({loggedIn:!1}),[c,o]=(0,l.useState)("disconnected"),[a,g]=(0,l.useState)(null),[w,p]=(0,l.useState)(!0),[h,m]=(0,l.useState)(!1),[y,v]=(0,l.useState)(!1);(0,l.useEffect)(()=>{let e=i.ar.subscribe(e=>{console.log("User state changed:",e),r(e),e.loggedIn?(o("connected"),g(null),u.default.success("Wallet connected successfully!")):o("disconnected"),p(!1),m(!1)});return()=>e()},[]),(0,l.useEffect)(()=>{n.loggedIn&&n.services?v(n.services.some(e=>{var t;return"authn"===e.type&&(null===(t=e.provider)||void 0===t?void 0:t.name)!=="wallet"})):v(!1)},[n]);let E=async e=>{try{m(!0),o("connecting"),g(null),u.default.loading("Connecting to wallet...",{id:"wallet-connect"}),e&&console.log("Connecting to ".concat(e," wallet")),await i.YR(),u.default.dismiss("wallet-connect")}catch(e){console.error("Login error:",e),o("error"),g(e.message||"Failed to connect wallet"),m(!1),u.default.dismiss("wallet-connect"),u.default.error("Failed to connect wallet. Please try again.")}},b=async()=>{try{await i._b(),o("disconnected"),g(null),v(!1),u.default.success("Wallet disconnected")}catch(e){console.error("Logout error:",e),u.default.error("Error disconnecting wallet")}},C=async()=>{"error"===c&&(o("reconnecting"),await E())},S=async function(e){var t,r,c;let o=arguments.length>1&&void 0!==arguments[1]?arguments[1]:[],a=arguments.length>2?arguments[2]:void 0;if(!n.loggedIn)throw Error("Please connect your wallet first");try{null==a||null===(t=a.onStart)||void 0===t||t.call(a),u.default.loading("Sending transaction...",{id:"tx-send"});let n=await i.JG({cadence:e,args:()=>o,proposer:i.w1,payer:i.w1,authorizations:[i.w1],limit:9999});u.default.dismiss("tx-send"),u.default.loading("Transaction submitted, waiting for confirmation...",{id:"tx-confirm"});let c=await i.tx(n).onceSealed();return u.default.dismiss("tx-confirm"),u.default.success("Transaction confirmed!"),null==a||null===(r=a.onComplete)||void 0===r||r.call(a,c),n}catch(e){throw u.default.dismiss("tx-send"),u.default.dismiss("tx-confirm"),u.default.error("Transaction failed: ".concat(e.message)),null==a||null===(c=a.onError)||void 0===c||c.call(a,e),e}},x=async e=>{try{let t=await i.tx(e).onceSealed();return{id:e,status:"sealed",events:t.events}}catch(t){return{id:e,status:"error",error:t.message}}},F=async function(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:[];try{return await i.IO({cadence:e,args:()=>t})}catch(e){throw console.error("Script execution error:",e),u.default.error("Script execution failed: ".concat(e.message)),e}},N=async()=>{if(!n.loggedIn){u.default.error("Please connect your wallet first");return}try{p(!0),u.default.loading("Setting up your FlowFit account...",{id:"account-setup"}),await new Promise(e=>setTimeout(e,2e3)),u.default.dismiss("account-setup"),u.default.success("FlowFit account created successfully!")}catch(e){console.error("Account creation error:",e),u.default.dismiss("account-setup"),u.default.error("Failed to create account")}finally{p(!1)}},k=async e=>{try{p(!0),u.default.loading("Linking ".concat(e," account..."),{id:"link-account"}),await new Promise(e=>setTimeout(e,1500)),v(!0),u.default.dismiss("link-account"),u.default.success("".concat(e," account linked successfully!"))}catch(t){console.error("Account linking error:",t),u.default.dismiss("link-account"),u.default.error("Failed to link ".concat(e," account"))}finally{p(!1)}},I=async()=>{if(!n.addr)return null;try{return await i.IO({cadence:'\n          pub fun main(address: Address): AnyStruct {\n            let account = getAccount(address)\n            return {\n              "address": address.toString(),\n              "balance": account.balance,\n              "availableBalance": account.availableBalance,\n              "storageUsed": account.storageUsed,\n              "storageCapacity": account.storageCapacity\n            }\n          }\n        ',args:()=>[i.R9(n.addr,d.Address)]})}catch(e){return console.error("Error fetching account info:",e),null}},O=async e=>{if(!n.addr)return"0";try{return"1,250.50"}catch(e){return console.error("Error fetching balance:",e),"0"}};return(0,s.jsx)(f.Provider,{value:{user:n,connectionState:c,connectionError:a,logIn:E,logOut:b,reconnect:C,loading:w,isConnecting:h,sendTransaction:S,executeScript:F,getTransactionStatus:x,createAccount:N,linkAccount:k,isAccountLinked:y,getAccountInfo:I,getBalance:O,copyAddress:()=>{n.addr&&(navigator.clipboard.writeText(n.addr),u.default.success("Address copied to clipboard!"))},getExplorerUrl:e=>"https://testnet.flowscan.org/transaction/".concat(e),formatAddress:e=>e?"".concat(e.slice(0,6),"...").concat(e.slice(-4)):""},children:t})}},6866:function(){}},function(e){e.O(0,[186,715,115,364,744],function(){return e(e.s=8252)}),_N_E=e.O()}]);
"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@onflow";
exports.ids = ["vendor-chunks/@onflow"];
exports.modules = {

/***/ "(ssr)/../node_modules/@onflow/config/dist/config.module.js":
/*!************************************************************!*\
  !*** ../node_modules/@onflow/config/dist/config.module.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   clearConfig: () => (/* binding */ clearConfig),\n/* harmony export */   config: () => (/* binding */ config)\n/* harmony export */ });\n/* harmony import */ var _onflow_util_actor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @onflow/util-actor */ \"(ssr)/../node_modules/@onflow/util-actor/dist/actor.module.js\");\n/* harmony import */ var _onflow_util_logger__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @onflow/util-logger */ \"(ssr)/../node_modules/@onflow/util-logger/dist/util-logger.module.js\");\n/* harmony import */ var _onflow_util_invariant__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @onflow/util-invariant */ \"(ssr)/../node_modules/@onflow/util-invariant/dist/util-invariant.module.js\");\n\n\n\n\nconst pipe = function () {\n  for (var _len = arguments.length, funcs = new Array(_len), _key = 0; _key < _len; _key++) {\n    funcs[_key] = arguments[_key];\n  }\n  return v => {\n    return funcs.reduce((res, func) => {\n      return func(res);\n    }, v);\n  };\n};\n\n/***\n * Merge multiple functions returning objects into one object.\n * @param funcs - Functions to merge\n * @return Merged object\n */\nconst mergePipe = function () {\n  for (var _len2 = arguments.length, funcs = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n    funcs[_key2] = arguments[_key2];\n  }\n  return v => {\n    return funcs.reduce((res, func) => {\n      return {\n        ...res,\n        ...func(v)\n      };\n    }, {});\n  };\n};\n\n/**\n * @description Object check\n * @param value - Value to check\n * @returns Is object status\n */\nconst isObject = value => value && typeof value === \"object\" && !Array.isArray(value);\n\n/**\n * @description Deep merge multiple objects.\n * @param target - Target object\n * @param sources - Source objects\n * @returns Merged object\n */\nconst mergeDeep = function (target) {\n  for (var _len3 = arguments.length, sources = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {\n    sources[_key3 - 1] = arguments[_key3];\n  }\n  if (!sources.length) return target;\n  const source = sources.shift();\n  if (isObject(target) && isObject(source)) {\n    for (const key in source) {\n      if (isObject(source[key])) {\n        if (!target[key]) Object.assign(target, {\n          [key]: {}\n        });\n        mergeDeep(target[key], source[key]);\n      } else {\n        Object.assign(target, {\n          [key]: source[key]\n        });\n      }\n    }\n  }\n  return mergeDeep(target, ...sources);\n};\n\n/**\n * @description Deep merge multiple Flow JSON.\n * @param value - Flow JSON or array of Flow JSONs\n * @returns Merged Flow JSON\n */\nconst mergeFlowJSONs = value => Array.isArray(value) ? mergeDeep({}, ...value) : value;\n\n/**\n * @description Filter out contracts section of flow.json.\n * @param obj - Flow JSON\n * @returns Contracts section of Flow JSON\n */\nconst filterContracts = obj => obj.contracts ? obj.contracts : {};\n\n/**\n * @description Filter out dependencies section of flow.json.\n * @param obj - Flow JSON\n * @returns Dependencies section of Flow JSON\n */\nconst filterDependencies = obj => obj.dependencies ? obj.dependencies : {};\n\n/**\n * @description Gathers contract addresses by network\n * @param network - Network to gather addresses for\n * @returns Contract names by addresses mapping e.g { \"HelloWorld\": \"0x123\" }\n */\nconst mapContractAliasesToNetworkAddress = network => contracts => {\n  return Object.entries(contracts).reduce((c, _ref) => {\n    let [key, value] = _ref;\n    const networkContractAlias = value?.aliases?.[network];\n    if (networkContractAlias) {\n      c[key] = networkContractAlias;\n    }\n    return c;\n  }, {});\n};\n\n/**\n * @description Gathers dependency addresses by network\n * @param network - Network to gather addresses for\n * @returns Dependency names by addresses mapping e.g { \"HelloWorld\": \"0x123\" }\n */\nconst mapDependencyAliasesToNetworkAddress = network => dependencies => {\n  return Object.entries(dependencies).reduce((c, _ref2) => {\n    let [key, value] = _ref2;\n    const networkDependencyAlias = value?.aliases?.[network];\n    if (networkDependencyAlias) {\n      c[key] = networkDependencyAlias;\n    }\n    return c;\n  }, {});\n};\nconst mapDeploymentsToNetworkAddress = network => _ref3 => {\n  let {\n    deployments = {},\n    accounts = {}\n  } = _ref3;\n  const networkDeployment = deployments?.[network];\n  if (!networkDeployment) return {};\n  return Object.entries(networkDeployment).reduce((c, _ref4) => {\n    let [key, value] = _ref4;\n    // Resolve account address\n    const accountAddress = accounts[key]?.address;\n    if (!accountAddress) return c;\n\n    // Create an object assigning the address to the contract name.\n    return value.reduce((c, contract) => {\n      return {\n        ...c,\n        [contract]: accountAddress\n      };\n    }, {});\n  }, {});\n};\n\n/**\n * @description Take in flow.json files and return contract to address mapping by network\n * @param jsons - Flow JSON or array of Flow JSONs\n * @param network - Network to gather addresses for\n * @returns Contract names by addresses mapping e.g { \"HelloWorld\": \"0x123\" }\n */\nconst getContracts = (jsons, network) => {\n  return pipe(mergeFlowJSONs, mergePipe(mapDeploymentsToNetworkAddress(network), pipe(filterContracts, mapContractAliasesToNetworkAddress(network)), pipe(filterDependencies, mapDependencyAliasesToNetworkAddress(network))))(jsons);\n};\n\n/**\n * @description Checks if string is hexidecimal\n * @param str - String to check\n * @returns Is hexidecimal status\n */\nconst isHexidecimal = str => {\n  // Check that it is a string\n  if (typeof str !== \"string\") return false;\n  return /^[0-9A-Fa-f]+$/.test(str);\n};\n\n/**\n * @description Checks flow.json file for private keys\n * @param flowJSON - Flow JSON\n * @returns Has private keys status\n */\nconst hasPrivateKeys = flowJSON => {\n  return Object.entries(flowJSON?.accounts ?? []).reduce((hasPrivateKey, _ref5) => {\n    let [, value] = _ref5;\n    if (hasPrivateKey) return true;\n    return value && Object.prototype.hasOwnProperty.call(value, \"key\") && isHexidecimal(value?.key);\n  }, false);\n};\n\n/**\n * @description Take in flow.json or array of flow.json files and checks for private keys\n * @param value - Flow JSON or array of Flow JSONs\n * @returns Has private keys status\n */\nconst anyHasPrivateKeys = value => {\n  if (Array.isArray(value)) return value.some(hasPrivateKeys);\n  return hasPrivateKeys(value);\n};\n\n/**\n * @description Format network to always be 'emulator', 'testnet', 'previewnet' or 'mainnet'\n * @param network - Network to format\n * @returns Formatted network name (either 'emulator', 'testnet', 'previewnet' or 'mainnet')\n */\nconst cleanNetwork = network => {\n  const cleanedNetwork = network?.toLowerCase() === \"local\" ? \"emulator\" : network?.toLowerCase();\n  if (cleanedNetwork === \"emulator\" || cleanedNetwork === \"testnet\" || cleanedNetwork === \"mainnet\" || cleanedNetwork === \"previewnet\") return cleanedNetwork;\n  throw new Error(`Invalid network \"${network}\". Must be one of \"emulator\", \"local\", \"testnet\", or \"mainnet\"`);\n};\n\n// Inject config into logger to break circular dependency\n_onflow_util_logger__WEBPACK_IMPORTED_MODULE_1__.setConfig(config);\nconst NAME = \"config\";\nconst PUT = \"PUT_CONFIG\";\nconst GET = \"GET_CONFIG\";\nconst GET_ALL = \"GET_ALL_CONFIG\";\nconst UPDATE = \"UPDATE_CONFIG\";\nconst DELETE = \"DELETE_CONFIG\";\nconst CLEAR = \"CLEAR_CONFIG\";\nconst WHERE = \"WHERE_CONFIG\";\nconst UPDATED = \"CONFIG/UPDATED\";\nconst identity = v => v;\nconst HANDLERS = {\n  [PUT]: (ctx, _letter, _ref) => {\n    let {\n      key,\n      value\n    } = _ref;\n    if (key == null) throw new Error(\"Missing 'key' for config/put.\");\n    ctx.put(key, value);\n    ctx.broadcast(UPDATED, {\n      ...ctx.all()\n    });\n  },\n  [GET]: (ctx, letter, _ref2) => {\n    let {\n      key,\n      fallback\n    } = _ref2;\n    if (key == null) throw new Error(\"Missing 'key' for config/get\");\n    letter.reply(ctx.get(key, fallback));\n  },\n  [GET_ALL]: (ctx, letter) => {\n    letter.reply({\n      ...ctx.all()\n    });\n  },\n  [UPDATE]: (ctx, letter, _ref3) => {\n    let {\n      key,\n      fn\n    } = _ref3;\n    if (key == null) throw new Error(\"Missing 'key' for config/update\");\n    ctx.update(key, fn || identity);\n    ctx.broadcast(UPDATED, {\n      ...ctx.all()\n    });\n  },\n  [DELETE]: (ctx, letter, _ref4) => {\n    let {\n      key\n    } = _ref4;\n    if (key == null) throw new Error(\"Missing 'key' for config/delete\");\n    ctx.delete(key);\n    ctx.broadcast(UPDATED, {\n      ...ctx.all()\n    });\n  },\n  [CLEAR]: ctx => {\n    const keys = Object.keys(ctx.all());\n    for (const key of keys) ctx.delete(key);\n    ctx.broadcast(UPDATED, {\n      ...ctx.all()\n    });\n  },\n  [WHERE]: (ctx, letter, _ref5) => {\n    let {\n      pattern\n    } = _ref5;\n    if (pattern == null) throw new Error(\"Missing 'pattern' for config/where\");\n    letter.reply(ctx.where(pattern));\n  },\n  [_onflow_util_actor__WEBPACK_IMPORTED_MODULE_0__.SUBSCRIBE]: (ctx, letter) => {\n    ctx.subscribe(letter.from);\n    ctx.send(letter.from, UPDATED, {\n      ...ctx.all()\n    });\n  },\n  [_onflow_util_actor__WEBPACK_IMPORTED_MODULE_0__.UNSUBSCRIBE]: (ctx, letter) => {\n    ctx.unsubscribe(letter.from);\n  }\n};\n(0,_onflow_util_actor__WEBPACK_IMPORTED_MODULE_0__.spawn)(HANDLERS, NAME);\n\n/**\n * @description Adds a key-value pair to the config\n * @param key - The key to add\n * @param value - The value to add\n * @returns The config object\n */\nfunction put(key, value) {\n  (0,_onflow_util_actor__WEBPACK_IMPORTED_MODULE_0__.send)(NAME, PUT, {\n    key,\n    value\n  });\n  return config();\n}\n\n/**\n * @description Gets a key-value pair with a fallback from the config\n * @param key - The key to add\n * @param fallback - The fallback value to return if key is not found\n * @returns The value found at key or fallback\n */\nfunction get(key, fallback) {\n  return (0,_onflow_util_actor__WEBPACK_IMPORTED_MODULE_0__.send)(NAME, GET, {\n    key,\n    fallback\n  }, {\n    expectReply: true,\n    timeout: 10\n  });\n}\n\n/**\n * @description Returns the first non null config value or the fallback\n * @param wants - The keys to search for\n * @param fallback - The fallback value to return if key is not found\n * @returns The value found at key or fallback\n */\nasync function first() {\n  let wants = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  let fallback = arguments.length > 1 ? arguments[1] : undefined;\n  if (!wants.length) return fallback;\n  const [head, ...rest] = wants;\n  const ret = await get(head);\n  if (ret == null) return first(rest, fallback);\n  return ret;\n}\n\n/**\n * @description Returns the current config\n * @returns The config object\n */\nfunction all() {\n  return (0,_onflow_util_actor__WEBPACK_IMPORTED_MODULE_0__.send)(NAME, GET_ALL, null, {\n    expectReply: true,\n    timeout: 10\n  });\n}\n\n/**\n * @description Updates a key-value pair in the config\n * @param key - The key to update\n * @param fn - The function to update the value with\n * @returns The config object\n */\nfunction update(key) {\n  let fn = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : identity;\n  (0,_onflow_util_actor__WEBPACK_IMPORTED_MODULE_0__.send)(NAME, UPDATE, {\n    key,\n    fn\n  });\n  return config();\n}\n\n/**\n * @description Deletes a key-value pair from the config\n * @param key - The key to delete\n * @returns The config object\n */\nfunction _delete(key) {\n  (0,_onflow_util_actor__WEBPACK_IMPORTED_MODULE_0__.send)(NAME, DELETE, {\n    key\n  });\n  return config();\n}\n\n/**\n * @description Returns a subset of the config based on a pattern\n * @param pattern - The pattern to match keys against\n * @returns The subset of the config\n */\nfunction where(pattern) {\n  return (0,_onflow_util_actor__WEBPACK_IMPORTED_MODULE_0__.send)(NAME, WHERE, {\n    pattern\n  }, {\n    expectReply: true,\n    timeout: 10\n  });\n}\n\n/**\n * @description Subscribes to config updates\n * @param callback - The callback to call when config is updated\n * @returns The unsubscribe function\n */\nfunction subscribe(callback) {\n  return (0,_onflow_util_actor__WEBPACK_IMPORTED_MODULE_0__.subscriber)(NAME, () => (0,_onflow_util_actor__WEBPACK_IMPORTED_MODULE_0__.spawn)(HANDLERS, NAME), callback);\n}\n\n/**\n * @description Clears the config\n */\nasync function clearConfig() {\n  await (0,_onflow_util_actor__WEBPACK_IMPORTED_MODULE_0__.send)(NAME, CLEAR);\n}\n\n/**\n * @description Resets the config to a previous state\n * @param oldConfig - The previous config state\n * @returns The config object\n */\nasync function resetConfig(oldConfig) {\n  return clearConfig().then(() => config(oldConfig));\n}\n\n/**\n * @description Takes in flow.json or array of flow.json files and creates contract placeholders\n * @param data - The data to load\n * @param data.flowJSON - The flow.json or array of flow.json files\n * @param options - override flag\n * @param options.ignoreConflicts - ignore conflicts and override config\n */\nasync function load(data) {\n  let {\n    ignoreConflicts = false\n  } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  const network = await get(\"flow.network\");\n  const cleanedNetwork = cleanNetwork(network);\n  const {\n    flowJSON\n  } = data;\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_2__.invariant)(Boolean(flowJSON), \"config.load -- 'flowJSON' must be defined\");\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_2__.invariant)(!!cleanedNetwork, `Flow Network Required -- In order for FCL to load your contracts please define \"flow.network\" to \"emulator\", \"local\", \"testnet\", or \"mainnet\" in your config. See more here: https://developers.flow.com/tools/fcl-js/reference/configure-fcl`);\n  if (anyHasPrivateKeys(flowJSON)) {\n    const isEmulator = cleanedNetwork === \"emulator\";\n    _onflow_util_logger__WEBPACK_IMPORTED_MODULE_1__.log({\n      title: \"Private Keys Detected\",\n      message: `Private keys should be stored in a separate flow.json file for security. See more here: https://developers.flow.com/tools/flow-cli/security`,\n      level: isEmulator ? _onflow_util_logger__WEBPACK_IMPORTED_MODULE_1__.LEVELS.warn : _onflow_util_logger__WEBPACK_IMPORTED_MODULE_1__.LEVELS.error\n    });\n    (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_2__.invariant)(isEmulator, `Private keys should be stored in a separate flow.json file for security. See more here: https://developers.flow.com/tools/flow-cli/security`);\n  }\n  for (const [key, value] of Object.entries(getContracts(flowJSON, cleanedNetwork))) {\n    const contractConfigKey = `0x${key}`;\n    const existingContractConfigKey = await get(contractConfigKey);\n    if (existingContractConfigKey && existingContractConfigKey !== value && !ignoreConflicts) {\n      _onflow_util_logger__WEBPACK_IMPORTED_MODULE_1__.log({\n        title: \"Contract Placeholder Conflict Detected\",\n        message: `A generated contract placeholder from config.load conflicts with a placeholder you've set manually in config have the same name.`,\n        level: _onflow_util_logger__WEBPACK_IMPORTED_MODULE_1__.LEVELS.warn\n      });\n    } else {\n      put(contractConfigKey, value);\n    }\n    const systemContractConfigKey = `system.contracts.${key}`;\n    const systemExistingContractConfigKeyValue = await get(systemContractConfigKey);\n    if (systemExistingContractConfigKeyValue && systemExistingContractConfigKeyValue !== value && !ignoreConflicts) {\n      _onflow_util_logger__WEBPACK_IMPORTED_MODULE_1__.log({\n        title: \"Contract Placeholder Conflict Detected\",\n        message: `A generated contract placeholder from config.load conflicts with a placeholder you've set manually in config have the same name.`,\n        level: _onflow_util_logger__WEBPACK_IMPORTED_MODULE_1__.LEVELS.warn\n      });\n    } else {\n      put(systemContractConfigKey, value);\n    }\n  }\n}\n\n/**\n * @description Sets the config\n * @param values - The values to set\n * @returns The config object\n */\nfunction config(values) {\n  if (values != null && typeof values === \"object\") {\n    Object.keys(values).map(d => put(d, values[d]));\n  }\n  return {\n    put,\n    get,\n    all,\n    first,\n    update,\n    delete: _delete,\n    where,\n    subscribe,\n    overload,\n    load\n  };\n}\nconfig.put = put;\nconfig.get = get;\nconfig.all = all;\nconfig.first = first;\nconfig.update = update;\nconfig.delete = _delete;\nconfig.where = where;\nconfig.subscribe = subscribe;\nconfig.overload = overload;\nconfig.load = load;\n\n/**\n * @description Temporarily overloads the config with the given values and calls the callback\n * @param values - The values to overload the config with\n * @param callback - The callback to call with the overloaded config\n * @returns The result of the callback\n */\nasync function overload(values, callback) {\n  const oldConfig = await all();\n  try {\n    config(values);\n    const result = await callback(await all());\n    return result;\n  } finally {\n    await resetConfig(oldConfig);\n  }\n}\n\n\n//# sourceMappingURL=config.module.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/@onflow/config/dist/config.module.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/@onflow/fcl-core/dist/fcl-core.module.js":
/*!****************************************************************!*\
  !*** ../node_modules/@onflow/fcl-core/dist/fcl-core.module.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AppUtils: () => (/* binding */ index$1),\n/* harmony export */   CORE_STRATEGIES: () => (/* binding */ CORE_STRATEGIES),\n/* harmony export */   FCL_REDIRECT_URL_PARAM_NAME: () => (/* binding */ FCL_REDIRECT_URL_PARAM_NAME),\n/* harmony export */   FCL_RESPONSE_PARAM_NAME: () => (/* binding */ FCL_RESPONSE_PARAM_NAME),\n/* harmony export */   InteractionTemplateUtils: () => (/* binding */ index),\n/* harmony export */   TestUtils: () => (/* reexport safe */ _onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.TestUtils),\n/* harmony export */   TransactionError: () => (/* binding */ TransactionError),\n/* harmony export */   URL: () => (/* binding */ URL),\n/* harmony export */   VERSION: () => (/* binding */ VERSION),\n/* harmony export */   WalletUtils: () => (/* binding */ index$2),\n/* harmony export */   account: () => (/* reexport safe */ _onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.account),\n/* harmony export */   arg: () => (/* reexport safe */ _onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.arg),\n/* harmony export */   args: () => (/* reexport safe */ _onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.args),\n/* harmony export */   atBlockHeight: () => (/* reexport safe */ _onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.atBlockHeight),\n/* harmony export */   atBlockId: () => (/* reexport safe */ _onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.atBlockId),\n/* harmony export */   authorization: () => (/* reexport safe */ _onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.authorization),\n/* harmony export */   authorizations: () => (/* reexport safe */ _onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.authorizations),\n/* harmony export */   block: () => (/* reexport safe */ _onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.block),\n/* harmony export */   build: () => (/* reexport safe */ _onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.build),\n/* harmony export */   buildMessageHandler: () => (/* binding */ buildMessageHandler),\n/* harmony export */   cadence: () => (/* reexport safe */ _onflow_util_template__WEBPACK_IMPORTED_MODULE_13__.template),\n/* harmony export */   cdc: () => (/* reexport safe */ _onflow_util_template__WEBPACK_IMPORTED_MODULE_13__.template),\n/* harmony export */   config: () => (/* reexport safe */ _onflow_config__WEBPACK_IMPORTED_MODULE_4__.config),\n/* harmony export */   createSignableVoucher: () => (/* reexport safe */ _onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.createSignableVoucher),\n/* harmony export */   decode: () => (/* reexport safe */ _onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.decode),\n/* harmony export */   discovery: () => (/* binding */ discovery),\n/* harmony export */   display: () => (/* reexport safe */ _onflow_util_address__WEBPACK_IMPORTED_MODULE_6__.display),\n/* harmony export */   events: () => (/* binding */ events),\n/* harmony export */   execStrategy: () => (/* binding */ execStrategy),\n/* harmony export */   flowEmulator: () => (/* reexport safe */ _onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.flowEmulator),\n/* harmony export */   flowMainnet: () => (/* reexport safe */ _onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.flowMainnet),\n/* harmony export */   flowTestnet: () => (/* reexport safe */ _onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.flowTestnet),\n/* harmony export */   getAccount: () => (/* reexport safe */ _onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.getAccount),\n/* harmony export */   getBlock: () => (/* reexport safe */ _onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.getBlock),\n/* harmony export */   getBlockHeader: () => (/* reexport safe */ _onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.getBlockHeader),\n/* harmony export */   getChainId: () => (/* binding */ getChainId),\n/* harmony export */   getCollection: () => (/* reexport safe */ _onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.getCollection),\n/* harmony export */   getCurrentUser: () => (/* binding */ getCurrentUser),\n/* harmony export */   getEvents: () => (/* reexport safe */ _onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.getEvents),\n/* harmony export */   getEventsAtBlockHeightRange: () => (/* reexport safe */ _onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.getEventsAtBlockHeightRange),\n/* harmony export */   getEventsAtBlockIds: () => (/* reexport safe */ _onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.getEventsAtBlockIds),\n/* harmony export */   getExecHttpPost: () => (/* binding */ getExecHttpPost),\n/* harmony export */   getMutate: () => (/* binding */ getMutate),\n/* harmony export */   getNetworkParameters: () => (/* reexport safe */ _onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.getNetworkParameters),\n/* harmony export */   getNodeVersionInfo: () => (/* reexport safe */ _onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.getNodeVersionInfo),\n/* harmony export */   getTransaction: () => (/* reexport safe */ _onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.getTransaction),\n/* harmony export */   getTransactionStatus: () => (/* reexport safe */ _onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.getTransactionStatus),\n/* harmony export */   initServiceRegistry: () => (/* binding */ initServiceRegistry),\n/* harmony export */   invariant: () => (/* reexport safe */ _onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.invariant),\n/* harmony export */   isBad: () => (/* reexport safe */ _onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.isBad),\n/* harmony export */   isOk: () => (/* reexport safe */ _onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.isOk),\n/* harmony export */   isReactNative: () => (/* binding */ isReactNative),\n/* harmony export */   limit: () => (/* reexport safe */ _onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.limit),\n/* harmony export */   nodeVersionInfo: () => (/* reexport safe */ _onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.nodeVersionInfo),\n/* harmony export */   normalizePollingResponse: () => (/* binding */ normalizePollingResponse),\n/* harmony export */   param: () => (/* reexport safe */ _onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.param),\n/* harmony export */   params: () => (/* reexport safe */ _onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.params),\n/* harmony export */   payer: () => (/* reexport safe */ _onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.payer),\n/* harmony export */   ping: () => (/* reexport safe */ _onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.ping),\n/* harmony export */   pipe: () => (/* reexport safe */ _onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.pipe),\n/* harmony export */   pluginRegistry: () => (/* binding */ pluginRegistry),\n/* harmony export */   proposer: () => (/* reexport safe */ _onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.proposer),\n/* harmony export */   query: () => (/* binding */ query),\n/* harmony export */   queryRaw: () => (/* binding */ queryRaw),\n/* harmony export */   ref: () => (/* reexport safe */ _onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.ref),\n/* harmony export */   sansPrefix: () => (/* reexport safe */ _onflow_util_address__WEBPACK_IMPORTED_MODULE_6__.sansPrefix),\n/* harmony export */   script: () => (/* reexport safe */ _onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.script),\n/* harmony export */   send: () => (/* reexport safe */ _onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.send),\n/* harmony export */   serialize: () => (/* binding */ serialize),\n/* harmony export */   serviceEndpoint: () => (/* binding */ serviceEndpoint),\n/* harmony export */   setIsReactNative: () => (/* binding */ setIsReactNative),\n/* harmony export */   subscribe: () => (/* reexport safe */ _onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.subscribe),\n/* harmony export */   subscribeEvents: () => (/* reexport safe */ _onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.subscribeEvents),\n/* harmony export */   subscribeRaw: () => (/* reexport safe */ _onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.subscribeRaw),\n/* harmony export */   t: () => (/* reexport module object */ _onflow_types__WEBPACK_IMPORTED_MODULE_1__),\n/* harmony export */   transaction: () => (/* reexport safe */ _onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.transaction),\n/* harmony export */   tx: () => (/* binding */ transaction),\n/* harmony export */   validator: () => (/* reexport safe */ _onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.validator),\n/* harmony export */   verifyUserSignatures: () => (/* binding */ verifyUserSignatures),\n/* harmony export */   voucherIntercept: () => (/* reexport safe */ _onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.voucherIntercept),\n/* harmony export */   voucherToTxId: () => (/* reexport safe */ _onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.voucherToTxId),\n/* harmony export */   why: () => (/* reexport safe */ _onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.why),\n/* harmony export */   withPrefix: () => (/* reexport safe */ _onflow_util_address__WEBPACK_IMPORTED_MODULE_6__.withPrefix)\n/* harmony export */ });\n/* harmony import */ var _onflow_sdk__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @onflow/sdk */ \"(ssr)/../node_modules/@onflow/sdk/dist/sdk.module.js\");\n/* harmony import */ var _onflow_types__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @onflow/types */ \"(ssr)/../node_modules/@onflow/types/dist/types.module.js\");\n/* harmony import */ var _onflow_util_invariant__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @onflow/util-invariant */ \"(ssr)/../node_modules/@onflow/util-invariant/dist/util-invariant.module.js\");\n/* harmony import */ var cross_fetch__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! cross-fetch */ \"(ssr)/../node_modules/cross-fetch/dist/node-ponyfill.js\");\n/* harmony import */ var cross_fetch__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(cross_fetch__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var _onflow_config__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @onflow/config */ \"(ssr)/../node_modules/@onflow/config/dist/config.module.js\");\n/* harmony import */ var _onflow_util_logger__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @onflow/util-logger */ \"(ssr)/../node_modules/@onflow/util-logger/dist/util-logger.module.js\");\n/* harmony import */ var _onflow_util_address__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @onflow/util-address */ \"(ssr)/../node_modules/@onflow/util-address/dist/util-address.module.js\");\n/* harmony import */ var _onflow_rlp__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @onflow/rlp */ \"(ssr)/../node_modules/@onflow/rlp/dist/rlp.module.js\");\n/* harmony import */ var _onflow_typedefs__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @onflow/typedefs */ \"(ssr)/../node_modules/@onflow/typedefs/dist/typedefs.module.js\");\n/* harmony import */ var _onflow_util_actor__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @onflow/util-actor */ \"(ssr)/../node_modules/@onflow/util-actor/dist/actor.module.js\");\n/* harmony import */ var _onflow_transport_http__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @onflow/transport-http */ \"(ssr)/../node_modules/@onflow/transport-http/dist/index.module.js\");\n/* harmony import */ var _improbable_eng_grpc_web__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @improbable-eng/grpc-web */ \"(ssr)/../node_modules/@improbable-eng/grpc-web/dist/grpc-web-client.js\");\n/* harmony import */ var _improbable_eng_grpc_web__WEBPACK_IMPORTED_MODULE_11___default = /*#__PURE__*/__webpack_require__.n(_improbable_eng_grpc_web__WEBPACK_IMPORTED_MODULE_11__);\n/* harmony import */ var sha3__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! sha3 */ \"(ssr)/../node_modules/sha3/index.js\");\n/* harmony import */ var _onflow_util_template__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @onflow/util-template */ \"(ssr)/../node_modules/@onflow/util-template/dist/template.module.js\");\n/* harmony import */ var _onflow_util_semver__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! @onflow/util-semver */ \"(ssr)/../node_modules/@onflow/util-semver/dist/index.module.js\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nconst VERSION = \"1.20.0\";\n\nconst is = type => d => typeof d === type;\nconst isRequired = d => d != null;\nconst isObject = is(\"object\");\nconst isString = is(\"string\");\nconst isFunc = is(\"function\");\nconst isNumber = is(\"number\");\n\nfunction normalizeArgs(ax) {\n  if (isFunc(ax)) return ax(_onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.arg, _onflow_types__WEBPACK_IMPORTED_MODULE_1__);\n  return [];\n}\n\nasync function pre(type, opts) {\n  // prettier-ignore\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_2__.invariant)(isRequired(opts), `${type}(opts) -- opts is required`);\n  // prettier-ignore\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_2__.invariant)(isObject(opts), `${type}(opts) -- opts must be an object`);\n  // prettier-ignore\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_2__.invariant)(!(opts.cadence && opts.template), `${type}({ template, cadence }) -- cannot pass both cadence and template`);\n  // prettier-ignore\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_2__.invariant)(isRequired(opts.cadence || opts?.template), `${type}({ cadence }) -- cadence is required`);\n  // // prettier-ignore\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_2__.invariant)(isString(opts.cadence) || opts?.template, `${type}({ cadence }) -- cadence must be a string`);\n  // prettier-ignore\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_2__.invariant)(await _onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.config().get(\"accessNode.api\"), `${type}(opts) -- Required value for \"accessNode.api\" not defined in config. See: ${\"https://github.com/onflow/flow-js-sdk/blob/master/packages/fcl/src/exec/query.md#configuration\"}`);\n}\nasync function preMutate(opts) {\n  return pre(\"mutate\", opts);\n}\nasync function preQuery(opts) {\n  return pre(\"query\", opts);\n}\n\nasync function httpDocumentResolver(_ref) {\n  let {\n    url\n  } = _ref;\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_2__.invariant)(typeof url !== \"undefined\", \"retrieve({ url }) -- url must be defined\");\n  let res;\n  try {\n    res = await cross_fetch__WEBPACK_IMPORTED_MODULE_3___default()(url);\n  } catch (e) {\n    throw new Error(\"httpDocumentResolver Error: Failed to retrieve document.\");\n  }\n  let document = res.ok ? await res.json() : null;\n  return document;\n}\nconst DOCUMENT_RESOLVERS = new Map([[\"http\", httpDocumentResolver], [\"https\", httpDocumentResolver]]);\nasync function retrieve(_ref2) {\n  let {\n    url\n  } = _ref2;\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_2__.invariant)(typeof url !== \"undefined\", \"retrieve({ url }) -- url must be defined\");\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_2__.invariant)(typeof url === \"string\", \"retrieve({ url }) -- url must be a string\");\n  const documentResolversFromConfig = await (0,_onflow_config__WEBPACK_IMPORTED_MODULE_4__.config)().where(/^document\\.resolver\\./);\n  Object.keys(documentResolversFromConfig).map(key => {\n    const resolverFromConfig = documentResolversFromConfig[key];\n    const resolverProtocol = key.replace(/^document\\.resolver\\./, \"\");\n    DOCUMENT_RESOLVERS.set(resolverProtocol, resolverFromConfig);\n  });\n  const urlParts = /^(.*):\\/\\/([A-Za-z0-9\\-\\.]+)(:[0-9]+)?(.*)$/.exec(url);\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_2__.invariant)(urlParts, \"Failed to parse URL\");\n  const protocol = urlParts[1];\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_2__.invariant)(urlParts, \"Failed to parse URL protocol\");\n  const resolver = DOCUMENT_RESOLVERS.get(protocol);\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_2__.invariant)(resolver, `No resolver found for protcol=${protocol}`);\n  let document = await resolver({\n    url\n  });\n  return document;\n}\n\n/**\n * @description Fills import addresses in Cadence for network\n *\n * @param {object} params\n * @param {string} params.network - Network to derive Cadence for\n * @param {object} params.template - Interaction Template to derive Cadence from\n * @returns {Promise<string>} - Promise that resolves with the derived Cadence code\n */\nasync function deriveCadenceByNetwork100(_ref) {\n  let {\n    network,\n    template\n  } = _ref;\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_2__.invariant)(template.f_version === \"1.0.0\", \"deriveCadenceByNetwork100({ template }) -- template must be version 1.0.0\");\n  const networkDependencies = Object.keys(template?.data?.dependencies).map(dependencyPlaceholder => {\n    const dependencyNetworkContracts = Object.values(template?.data?.dependencies?.[dependencyPlaceholder]);\n    (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_2__.invariant)(dependencyNetworkContracts !== undefined, `deriveCadenceByNetwork100 -- Could not find contracts for dependency placeholder: ${dependencyPlaceholder}`);\n    (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_2__.invariant)(dependencyNetworkContracts.length > 0, `deriveCadenceByNetwork100 -- Could not find contracts for dependency placeholder: ${dependencyPlaceholder}`);\n    const dependencyContract = dependencyNetworkContracts[0];\n    const dependencyContractForNetwork = dependencyContract?.[network];\n    (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_2__.invariant)(dependencyContractForNetwork, `deriveCadenceByNetwork100 -- Could not find ${network} network information for dependency: ${dependencyPlaceholder}`);\n    return [dependencyPlaceholder, dependencyContractForNetwork?.address];\n  });\n  return networkDependencies.reduce((cadence, _ref2) => {\n    let [placeholder, address] = _ref2;\n    const regex = new RegExp(\"(\\\\b\" + placeholder + \"\\\\b)\", \"g\");\n    return cadence.replace(regex, address);\n  }, template.data.cadence);\n}\n\n/**\n * @description - Replaces string imports with the actual contract address\n *\n * @param {object} param\n * @param {string} param.cadence\n * @param {object} param.networkDependencies\n * @returns {string} - Cadence\n */\nfunction replaceStringImports(_ref) {\n  let {\n    cadence,\n    networkDependencies\n  } = _ref;\n  return Object.keys(networkDependencies).reduce((c, contractName) => {\n    const address = networkDependencies[contractName];\n    const regex = new RegExp(`import \"\\\\b${contractName}\\\\b\"`, \"g\");\n    return c.replace(regex, `import ${contractName} from ${address}`);\n  }, cadence);\n}\n\n/**\n * @description Fills import addresses in Cadence for network\n *\n * @param {object} params\n * @param {string} params.network - Network to derive Cadence for\n * @param {object} params.template - Interaction Template to derive Cadence from\n * @returns {Promise<string>} - Promise that resolves with the derived Cadence code\n */\nasync function deriveCadenceByNetwork110(_ref) {\n  let {\n    network,\n    template\n  } = _ref;\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_2__.invariant)(template.f_version === \"1.1.0\", \"deriveCadenceByNetwork110({ template }) -- template must be version 1.0.0\");\n\n  // get network dependencies from template dependencies, use new string import format\n  const networkDependencies = {};\n  template?.data?.dependencies.forEach(dependency => {\n    dependency.contracts.forEach(contract => {\n      const contractName = contract.contract;\n      contract.networks.forEach(net => {\n        if (net.network === network) {\n          networkDependencies[contractName] = net.address;\n        }\n      });\n      (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_2__.invariant)(networkDependencies[contractName] !== undefined, `deriveCadenceByNetwork110 -- Could not find contracts Network Address: ${network} ${contractName}`);\n    });\n  });\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_2__.invariant)(Object.keys(networkDependencies).length === template?.data?.dependencies.length, `deriveCadenceByNetwork110 -- Could not find contracts for import dependencies: ${networkDependencies}`);\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_2__.invariant)(Object.keys(networkDependencies).length === Object.values(networkDependencies).length, `deriveCadenceByNetwork110 -- Could not find all addresses for network ${network} dependencies:  ${networkDependencies}`);\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_2__.invariant)(template?.data?.cadence?.body, `no cadence found -- Could not replace import dependencies: ${networkDependencies}`);\n  return replaceStringImports({\n    cadence: template?.data?.cadence?.body,\n    networkDependencies\n  });\n}\n\n/**\n * @description Fills import addresses in Cadence for network\n *\n * @param {object} params\n * @param {string} params.network - Network to derive Cadence for\n * @param {object} params.template - Interaction Template to derive Cadence from\n * @returns {Promise<string>} - Promise that resolves with the derived Cadence code\n */\nasync function deriveCadenceByNetwork(_ref) {\n  let {\n    network,\n    template\n  } = _ref;\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_2__.invariant)(network != undefined, \"deriveCadenceByNetwork({ network }) -- network must be defined\");\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_2__.invariant)(typeof network === \"string\", \"deriveCadenceByNetwork({ network }) -- network must be a string\");\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_2__.invariant)(template != undefined, \"deriveCadenceByNetwork({ template }) -- template must be defined\");\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_2__.invariant)(typeof template === \"object\", \"deriveCadenceByNetwork({ template }) -- template must be an object\");\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_2__.invariant)(template.f_type === \"InteractionTemplate\", \"deriveCadenceByNetwork({ template }) -- template must be an InteractionTemplate\");\n  switch (template.f_version) {\n    case \"1.1.0\":\n      return await deriveCadenceByNetwork110({\n        network,\n        template\n      });\n    case \"1.0.0\":\n      return await deriveCadenceByNetwork100({\n        network,\n        template\n      });\n    default:\n      throw new Error(\"deriveCadenceByNetwork Error: Unsupported template version\");\n  }\n}\n\nasync function fetchChainId() {\n  let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const response = await _onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.send([_onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.getNetworkParameters()], opts).then(_onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.decode);\n  return response.chainId;\n}\n\n// Cache of chainId promises for each access node value\n// key: access node, value: chainId promise\nlet chainIdCache = {};\nlet hasWarnedEnv = false;\n\n/**\n * @description\n * Gets the chain ID if its set, otherwise gets the chain ID from the access node\n *\n * @param {object} opts - Optional parameters\n * @returns {Promise<string>} The chain ID of the access node\n * @throws {Error} If the chain ID is not found\n *\n * @example\n * // returns \"testnet\"\n * getChainId()\n */\nasync function getChainId() {\n  let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  let flowNetworkCfg = await _onflow_config__WEBPACK_IMPORTED_MODULE_4__.config.get(\"flow.network\");\n  let envCfg = await _onflow_config__WEBPACK_IMPORTED_MODULE_4__.config.get(\"env\");\n  if (envCfg && !hasWarnedEnv) {\n    _onflow_util_logger__WEBPACK_IMPORTED_MODULE_5__.log.deprecate({\n      pkg: \"FCL\",\n      subject: 'Using the \"env\" configuration key for specifying the flow network',\n      message: \"Configuring to specify flow network is no longer required\",\n      transition: \"https://github.com/onflow/flow-js-sdk/blob/master/packages/fcl/TRANSITIONS.md#0001-deprecate-env-config-key\"\n    });\n    hasWarnedEnv = true;\n  }\n  const accessNode = opts.node || (await _onflow_config__WEBPACK_IMPORTED_MODULE_4__.config.get(\"accessNode.api\"));\n  if (!accessNode) {\n    // Fall back to deprecated flow.network and env config keys\n    // This probably should have been done before trying to fetch the chainId from the access node\n    // However, this was the behaviour with the initial implementation of getChainId()\n    if (flowNetworkCfg) {\n      return flowNetworkCfg;\n    } else if (envCfg) {\n      return envCfg;\n    }\n    throw new Error(`Either the \"accessNode.api\" config key or opts.node must be set`);\n  }\n\n  // Try using cached chainId first if it exists and access node is the same\n  if (chainIdCache[accessNode]) {\n    try {\n      return await chainIdCache[accessNode];\n    } catch {}\n  }\n\n  // If no cached chainId, value is stale, or last attempt failed, try getting chainId from access node\n  // Check if another getChainId() call has already started a new promise, if not, start a new one\n  // There may have been concurrent calls to getChainId() while the first call was waiting for the response\n  if (!chainIdCache[accessNode]) {\n    chainIdCache[accessNode] = fetchChainId(opts).catch(error => {\n      // If there was an error, reset the promise so that the next call will try again\n      chainIdCache[accessNode] = null;\n      throw error;\n    });\n  }\n\n  // Use newly created promise\n  try {\n    return await chainIdCache[accessNode];\n  } catch (e) {\n    // Fall back to deprecated flow.network and env config keys\n    // This probably should have been done before trying to fetch the chainId from the access node\n    // However, this was the behaviour with the initial implementation of getChainId()\n    if (flowNetworkCfg) {\n      return flowNetworkCfg;\n    } else if (envCfg) {\n      return envCfg;\n    }\n    throw new Error(`Error getting chainId from access node - are you using the correct access node endpoint.  If running locally, is your emulator up-to-date? ${e.message}`);\n  }\n}\n\n/**\n * @description\n * Watches the config for changes to access node and updates the chain id accordingly\n *\n * @returns {Function} A function that unsubscribes the listener\n *\n */\nfunction watchForChainIdChanges() {\n  return _onflow_config__WEBPACK_IMPORTED_MODULE_4__.config.subscribe(() => {\n    // Call getChainId to update the chainId cache if access node has changed\n    getChainId({\n      enableRequestLogging: false\n    }).catch(() => {});\n  });\n}\n\nasync function prepTemplateOpts(opts) {\n  if (isString(opts?.template)) {\n    opts.template = await retrieve({\n      url: opts?.template\n    });\n  }\n  const cadence = opts.cadence || (await deriveCadenceByNetwork({\n    template: opts.template,\n    network: await getChainId(opts)\n  }));\n  opts.cadence = cadence;\n  return opts;\n}\n\n/**\n * @description Allows you to submit scripts to query the blockchain and get raw response data.\n *\n * @param opts Query Options and configuration\n * @param opts.cadence Cadence Script used to query Flow\n * @param opts.args Arguments passed to cadence script\n * @param opts.template Interaction Template for a script\n * @param opts.isSealed Block Finality\n * @param opts.limit Compute Limit for Query\n * @returns A promise that resolves to the raw query result\n *\n * @example\n *    const cadence = `\n *      cadence: `\n *        access(all) fun main(a: Int, b: Int, c: Address): Int {\n *          log(c)\n *          return a + b\n *        }\n *    `.trim()\n *\n *    const args = (arg, t) => [\n *      arg(5, t.Int),\n *      arg(7, t.Int),\n *      arg(\"0xb2db43ad6bc345fec9\", t.Address),\n *    ]\n *\n *    await queryRaw({ cadence, args })\n */\nasync function queryRaw() {\n  let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  await preQuery(opts);\n  opts = await prepTemplateOpts(opts);\n  return _onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.send([_onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.script(opts.cadence), _onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.args(normalizeArgs(opts.args || [])), _onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.atLatestBlock(opts.isSealed ?? false), opts.limit && typeof opts.limit === \"number\" && _onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.limit(opts.limit)]);\n}\n\n/**\n * @description Allows you to submit scripts to query the blockchain.\n *\n * @param opts Query Options and configuration\n * @param opts.cadence Cadence Script used to query Flow\n * @param opts.args Arguments passed to cadence script\n * @param opts.template Interaction Template for a script\n * @param opts.isSealed Block Finality\n * @param opts.limit Compute Limit for Query\n * @returns A promise that resolves to the query result\n *\n * @example\n *    const cadence = `\n *      cadence: `\n *        access(all) fun main(a: Int, b: Int, c: Address): Int {\n *          log(c)\n *          return a + b\n *        }\n *    `.trim()\n *\n *    const args = (arg, t) => [\n *      arg(5, t.Int),\n *      arg(7, t.Int),\n *      arg(\"0xb2db43ad6bc345fec9\", t.Address),\n *    ]\n *\n *    await query({ cadence, args })\n */\nasync function query() {\n  let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  return queryRaw(opts).then(_onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.decode);\n}\n\nconst FCL_REDIRECT_URL_PARAM_NAME = \"fcl_redirect_url\";\nconst FCL_RESPONSE_PARAM_NAME = \"fclResponseJson\";\nconst CORE_STRATEGIES = {\n  \"HTTP/RPC\": \"HTTP/RPC\",\n  \"HTTP/POST\": \"HTTP/POST\",\n  \"IFRAME/RPC\": \"IFRAME/RPC\",\n  \"POP/RPC\": \"POP/RPC\",\n  \"TAB/RPC\": \"TAB/RPC\",\n  \"EXT/RPC\": \"EXT/RPC\",\n  \"DEEPLINK/RPC\": \"DEEPLINK/RPC\"\n};\n\n/**\n * @description\n * Listens for messages from FCL\n *\n * @param {string} messageType - Message type\n * @param {Function} cb - Callback function\n * @returns {Function} - Function to remove event listener\n */\nconst onMessageFromFCL = function (messageType) {\n  let cb = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : () => {};\n  const buildData = data => {\n    if (data.deprecated) console.warn(\"DEPRECATION NOTICE\", data.deprecated.message);\n    delete data?.body?.interaction;\n    return data;\n  };\n  const internal = e => {\n    const {\n      data,\n      origin\n    } = e;\n    if (typeof data !== \"object\") return;\n    if (typeof data == null) return;\n    if (data.type !== messageType) return;\n    cb(buildData(data), {\n      origin\n    });\n  };\n  window.addEventListener(\"message\", internal);\n  return () => window.removeEventListener(\"message\", internal);\n};\n\nlet _isReactNative = false;\nfunction isReactNative() {\n  return _isReactNative;\n}\nfunction setIsReactNative(value) {\n  _isReactNative = value;\n}\n\n// This is a workaround for an ongoing issue with URL in React Native\n// It does not parse the URL correctly and appends trailing slashes\n// See: https://github.com/facebook/react-native/issues/24428\n// See: https://github.com/facebook/react-native/issues/24428\n\nconst _URL = globalThis.URL;\nclass URL extends _URL {\n  constructor(url, base) {\n    for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n      args[_key - 2] = arguments[_key];\n    }\n    super(url, base, ...args);\n\n    // Extra check if in React Native\n    if (!isReactNative()) {\n      return;\n    }\n\n    // Fix trailing slash issue\n    if (this._url && !url.endsWith(\"/\") && this._url.endsWith(\"/\")) {\n      this._url = this._url.slice(0, -1);\n    }\n  }\n}\n\n/**\n * @description\n * Sends message to FCL window\n *\n * @param {string} type - Message type\n * @param {object} msg - Message object\n * @returns {void}\n *\n * @example\n * sendMsgToFCL(\"FCL:VIEW:RESPONSE\", {\n *    f_type: \"PollingResponse\",\n *    f_vsn: \"1.0.0\",\n *    status: \"APPROVED\",\n *    reason: null,\n *    data: data,\n *  })\n */\nconst sendMsgToFCL = function (type) {\n  let msg = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  const data = {\n    ...msg,\n    type\n  };\n  const urlParams = new URLSearchParams(window.location.search);\n  const redirectUrl = urlParams.get(FCL_REDIRECT_URL_PARAM_NAME);\n  if (redirectUrl) {\n    const url = new URL(redirectUrl);\n    url.searchParams.append(FCL_RESPONSE_PARAM_NAME, JSON.stringify(data));\n    window.location.href = url.href;\n  } else if (window.location !== window.parent.location) {\n    window.parent.postMessage({\n      ...msg,\n      type\n    }, \"*\");\n  } else if (window.opener) {\n    window.opener.postMessage({\n      ...msg,\n      type\n    }, \"*\");\n  } else {\n    throw new Error(\"Unable to communicate with parent FCL instance\");\n  }\n};\n\n/**\n * @description\n * Listens for \"FCL:VIEW:READY:RESPONSE\" and sends \"FCL:VIEW:READY\"\n *\n * @param {Function} cb - Callback function\n * @param {object} msg - Message object\n * @returns {void}\n */\nconst ready = function (cb) {\n  onMessageFromFCL(\"FCL:VIEW:READY:RESPONSE\", cb);\n  sendMsgToFCL(\"FCL:VIEW:READY\");\n};\n\n/**\n * @description\n * Sends \"FCL:VIEW:CLOSE\"\n *\n * @returns {void}\n */\nconst close = () => {\n  sendMsgToFCL(\"FCL:VIEW:CLOSE\");\n};\n\n/**\n * @description\n * Sends \"FCL:VIEW:RESPONSE\" with status \"APPROVED\"\n *\n * @param {object} data - Data object\n * @returns {void}\n */\nconst approve = data => {\n  sendMsgToFCL(\"FCL:VIEW:RESPONSE\", {\n    f_type: \"PollingResponse\",\n    f_vsn: \"1.0.0\",\n    status: \"APPROVED\",\n    reason: null,\n    data: data\n  });\n};\n\n/**\n * @description\n * Sends \"FCL:VIEW:RESPONSE\" with status \"DECLINED\"\n *\n * @param {string} reason - Reason for declining\n * @returns {void}\n */\nconst decline = reason => {\n  sendMsgToFCL(\"FCL:VIEW:RESPONSE\", {\n    f_type: \"PollingResponse\",\n    f_vsn: \"1.0.0\",\n    status: \"DECLINED\",\n    reason: reason,\n    data: null\n  });\n};\n\n/**\n * @description\n * Sends \"FCL:VIEW:RESPONSE\" with status \"REDIRECT\"\n *\n * @param {object} data - Data object\n * @returns {void}\n */\nconst redirect = data => {\n  sendMsgToFCL(\"FCL:VIEW:RESPONSE\", {\n    f_type: \"PollingResponse\",\n    f_vsn: \"1.0.0\",\n    status: \"REDIRECT\",\n    reason: null,\n    data: data\n  });\n};\n\nconst SERVICE_PRAGMA = {\n  f_type: \"Service\",\n  f_vsn: \"1.0.0\"\n};\nconst IDENTITY_PRAGMA = {\n  f_type: \"Identity\",\n  f_vsn: \"1.0.0\"\n};\nconst USER_PRAGMA = {\n  f_type: \"USER\",\n  f_vsn: \"1.0.0\"\n};\nconst POLLING_RESPONSE_PRAGMA = {\n  f_type: \"PollingResponse\",\n  f_vsn: \"1.0.0\"\n};\nconst COMPOSITE_SIGNATURE_PRAGMA = {\n  f_type: \"CompositeSignature\",\n  f_vsn: \"1.0.0\"\n};\n\n/**\n * @description\n * Constructs a new CompositeSignature instance.\n *\n * @param {string} addr - Flow Address\n * @param {number} keyId - Key ID\n * @param {string} signature - Signature as a hex string\n */\nfunction CompositeSignature(addr, keyId, signature) {\n  this.f_type = COMPOSITE_SIGNATURE_PRAGMA.f_type;\n  this.f_vsn = COMPOSITE_SIGNATURE_PRAGMA.f_vsn;\n  this.addr = (0,_onflow_util_address__WEBPACK_IMPORTED_MODULE_6__.withPrefix)(addr);\n  this.keyId = Number(keyId);\n  this.signature = signature;\n}\n\nconst rightPaddedHexBuffer = (value, pad) => _onflow_rlp__WEBPACK_IMPORTED_MODULE_7__.Buffer.from(value.padEnd(pad * 2, \"0\"), \"hex\");\nconst leftPaddedHexBuffer = (value, pad) => _onflow_rlp__WEBPACK_IMPORTED_MODULE_7__.Buffer.from(value.padStart(pad * 2, \"0\"), \"hex\");\nconst addressBuffer = addr => leftPaddedHexBuffer(addr, 8);\nconst nonceBuffer = nonce => _onflow_rlp__WEBPACK_IMPORTED_MODULE_7__.Buffer.from(nonce, \"hex\");\nconst encodeAccountProof = function (_ref) {\n  let {\n    address,\n    nonce,\n    appIdentifier\n  } = _ref;\n  let includeDomainTag = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_2__.invariant)(address, \"Encode Message For Provable Authn Error: address must be defined\");\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_2__.invariant)(nonce, \"Encode Message For Provable Authn Error: nonce must be defined\");\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_2__.invariant)(appIdentifier, \"Encode Message For Provable Authn Error: appIdentifier must be defined\");\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_2__.invariant)(nonce.length >= 64, \"Encode Message For Provable Authn Error: nonce must be minimum of 32 bytes\");\n  const ACCOUNT_PROOF_DOMAIN_TAG = rightPaddedHexBuffer(_onflow_rlp__WEBPACK_IMPORTED_MODULE_7__.Buffer.from(\"FCL-ACCOUNT-PROOF-V0.0\").toString(\"hex\"), 32);\n  if (includeDomainTag) {\n    return _onflow_rlp__WEBPACK_IMPORTED_MODULE_7__.Buffer.concat([ACCOUNT_PROOF_DOMAIN_TAG, (0,_onflow_rlp__WEBPACK_IMPORTED_MODULE_7__.encode)([appIdentifier, addressBuffer((0,_onflow_util_address__WEBPACK_IMPORTED_MODULE_6__.sansPrefix)(address)), nonceBuffer(nonce)])]).toString(\"hex\");\n  }\n  return (0,_onflow_rlp__WEBPACK_IMPORTED_MODULE_7__.encode)([appIdentifier, addressBuffer((0,_onflow_util_address__WEBPACK_IMPORTED_MODULE_6__.sansPrefix)(address)), nonceBuffer(nonce)]).toString(\"hex\");\n};\n\nfunction injectExtService(service) {\n  if (service.type === \"authn\" && service.endpoint != null) {\n    if (!Array.isArray(window.fcl_extensions)) {\n      window.fcl_extensions = [];\n    }\n    window.fcl_extensions.push(service);\n  } else {\n    console.warn(\"Authn service is required\");\n  }\n}\n\nvar index$2 = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  CompositeSignature: CompositeSignature,\n  approve: approve,\n  close: close,\n  decline: decline,\n  encodeAccountProof: encodeAccountProof,\n  encodeMessageFromSignable: _onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.encodeMessageFromSignable,\n  injectExtService: injectExtService,\n  onMessageFromFCL: onMessageFromFCL,\n  ready: ready,\n  redirect: redirect,\n  sendMsgToFCL: sendMsgToFCL\n});\n\nconst ACCOUNT_PROOF = \"ACCOUNT_PROOF\";\nconst USER_SIGNATURE = \"USER_SIGNATURE\";\nconst validateArgs = args => {\n  if (args.appIdentifier) {\n    const {\n      appIdentifier,\n      address,\n      nonce,\n      signatures\n    } = args;\n    (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_2__.invariant)(isString(appIdentifier), \"verifyAccountProof({ appIdentifier }) -- appIdentifier must be a string\");\n    (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_2__.invariant)(isString(address) && (0,_onflow_util_address__WEBPACK_IMPORTED_MODULE_6__.sansPrefix)(address).length === 16, \"verifyAccountProof({ address }) -- address must be a valid address\");\n    (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_2__.invariant)(/^[0-9a-f]+$/i.test(nonce), \"nonce must be a hex string\");\n    (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_2__.invariant)(Array.isArray(signatures) && signatures.every((sig, i, arr) => sig.f_type === \"CompositeSignature\"), \"Must include an Array of CompositeSignatures to verify\");\n    (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_2__.invariant)(signatures.map(cs => cs.addr).every((addr, i, arr) => addr === arr[0]), \"User signatures to be verified must be from a single account address\");\n    return true;\n  } else {\n    const {\n      message,\n      address,\n      compSigs\n    } = args;\n    (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_2__.invariant)(/^[0-9a-f]+$/i.test(message), \"Signed message must be a hex string\");\n    (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_2__.invariant)(isString(address) && (0,_onflow_util_address__WEBPACK_IMPORTED_MODULE_6__.sansPrefix)(address).length === 16, \"verifyUserSignatures({ address }) -- address must be a valid address\");\n    (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_2__.invariant)(Array.isArray(compSigs) && compSigs.every((sig, i, arr) => sig.f_type === \"CompositeSignature\"), \"Must include an Array of CompositeSignatures to verify\");\n    (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_2__.invariant)(compSigs.map(cs => cs.addr).every((addr, i, arr) => addr === arr[0]), \"User signatures to be verified must be from a single account address\");\n    return true;\n  }\n};\n\n// TODO: pass in option for contract but we're connected to testnet\n// log address + network -> in sync?\nconst getVerifySignaturesScript = async (sig, opts) => {\n  const verifyFunction = sig === \"ACCOUNT_PROOF\" ? \"verifyAccountProofSignatures\" : \"verifyUserSignatures\";\n  let network = await getChainId(opts);\n  const contractAddresses = {\n    testnet: \"0x74daa6f9c7ef24b1\",\n    mainnet: \"0xb4b82a1c9d21d284\",\n    previewnet: \"0x40b5b8b2ce81ea4a\"\n  };\n  const fclCryptoContract = opts.fclCryptoContract || contractAddresses[network];\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_2__.invariant)(fclCryptoContract, `${verifyFunction}({ fclCryptoContract }) -- FCLCrypto contract address is unknown for network: ${network}. Please manually specify the FCLCrypto contract address.`);\n  return `\n      import FCLCrypto from ${fclCryptoContract}\n\n      access(all) fun main(\n          address: Address, \n          message: String, \n          keyIndices: [Int], \n          signatures: [String]\n      ): Bool {\n        return FCLCrypto.${verifyFunction}(address: address, message: message, keyIndices: keyIndices, signatures: signatures)\n      }\n    `;\n};\n\n/**\n * @description\n * Verify a valid account proof signature or signatures for an account on Flow.\n *\n * @param {string} appIdentifier - A message string in hexadecimal format\n * @param {object} accountProofData - An object consisting of address, nonce, and signatures\n * @param {string} accountProofData.address - A Flow account address\n * @param {string} accountProofData.nonce - A random string in hexadecimal format (minimum 32 bytes in total, i.e 64 hex characters)\n * @param {object[]} accountProofData.signatures - An array of composite signatures to verify\n * @param {object} [opts={}] - Options object\n * @param {string} opts.fclCryptoContract - An optional override Flow account address where the FCLCrypto contract is deployed\n * @returns {Promise<boolean>} - Returns true if the signature is valid, false otherwise\n *\n * @example\n *\n *  const accountProofData = {\n *   address: \"0x123\",\n *   nonce: \"F0123\"\n *   signatures: [{f_type: \"CompositeSignature\", f_vsn: \"1.0.0\", addr: \"0x123\", keyId: 0, signature: \"abc123\"}],\n *  }\n *\n *  const isValid = await fcl.AppUtils.verifyAccountProof(\n *    \"AwesomeAppId\",\n *    accountProofData,\n *    {fclCryptoContract}\n *  )\n */\nasync function verifyAccountProof(appIdentifier, _ref) {\n  let {\n    address,\n    nonce,\n    signatures\n  } = _ref;\n  let opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  validateArgs({\n    appIdentifier,\n    address,\n    nonce,\n    signatures\n  });\n  const message = encodeAccountProof({\n    address,\n    nonce,\n    appIdentifier\n  }, false);\n  let signaturesArr = [];\n  let keyIndices = [];\n  for (const el of signatures) {\n    signaturesArr.push(el.signature);\n    keyIndices.push(el.keyId.toString());\n  }\n  return query({\n    cadence: await getVerifySignaturesScript(ACCOUNT_PROOF, opts),\n    args: (arg, t) => [arg((0,_onflow_util_address__WEBPACK_IMPORTED_MODULE_6__.withPrefix)(address), t.Address), arg(message, t.String), arg(keyIndices, t.Array(t.Int)), arg(signaturesArr, t.Array(t.String))]\n  });\n}\n\n/**\n * @description\n * Verify a valid signature/s for an account on Flow.\n *\n * @param {string} message - A message string in hexadecimal format\n * @param {Array} compSigs - An array of Composite Signatures\n * @param {string} compSigs[].addr - The account address\n * @param {number} compSigs[].keyId - The account keyId\n * @param {string} compSigs[].signature - The signature to verify\n * @param {object} [opts={}] - Options object\n * @param {string} opts.fclCryptoContract - An optional override of Flow account address where the FCLCrypto contract is deployed\n * @returns {Promise<boolean>} - Returns true if the signature is valid, false otherwise\n *\n * @example\n *\n *  const isValid = await fcl.AppUtils.verifyUserSignatures(\n *    Buffer.from('FOO').toString(\"hex\"),\n *    [{f_type: \"CompositeSignature\", f_vsn: \"1.0.0\", addr: \"0x123\", keyId: 0, signature: \"abc123\"}],\n *    {fclCryptoContract}\n *  )\n */\nasync function verifyUserSignatures$1(message, compSigs) {\n  let opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  const address = (0,_onflow_util_address__WEBPACK_IMPORTED_MODULE_6__.withPrefix)(compSigs[0].addr);\n  validateArgs({\n    message,\n    address,\n    compSigs\n  });\n  let signaturesArr = [];\n  let keyIndices = [];\n  for (const el of compSigs) {\n    signaturesArr.push(el.signature);\n    keyIndices.push(el.keyId.toString());\n  }\n  return query({\n    cadence: await getVerifySignaturesScript(USER_SIGNATURE, opts),\n    args: (arg, t) => [arg(address, t.Address), arg(message, t.String), arg(keyIndices, t.Array(t.Int)), arg(signaturesArr, t.Array(t.String))]\n  });\n}\n\nvar index$1 = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  verifyAccountProof: verifyAccountProof,\n  verifyUserSignatures: verifyUserSignatures$1\n});\n\n/**\n * Verify a valid signature/s for an account on Flow.\n *\n * @deprecated since version '1.0.0-alpha.0', use AppUtils.verifyUserSignatures instead\n *\n */\nconst verifyUserSignatures = _onflow_util_logger__WEBPACK_IMPORTED_MODULE_5__.log.deprecate({\n  pkg: \"FCL\",\n  subject: \"fcl.verifyUserSignatures()\",\n  message: \"Please use fcl.AppUtils.verifyUserSignatures()\",\n  callback: function verifyUserSignatures(message, compSigs) {\n    return verifyUserSignatures$1(message, compSigs);\n  }\n});\n\nconst serialize = async function () {\n  let args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  let opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  const resolveFunction = await _onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.config.first([\"sdk.resolve\"], opts.resolve || _onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.resolve);\n  if (Array.isArray(args)) args = await (0,_onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.pipe)((0,_onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.interaction)(), args);\n  return JSON.stringify((0,_onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.createSignableVoucher)(await resolveFunction(args)), null, 2);\n};\n\nconst ERROR_CODE_REGEX = /\\[Error Code: (\\d+)\\]/;\nclass TransactionError extends Error {\n  constructor(message, code) {\n    super(message);\n    this.code = code;\n    this.type = _onflow_typedefs__WEBPACK_IMPORTED_MODULE_8__.FvmErrorCode[code];\n  }\n  static fromErrorMessage(errorMessage) {\n    const match = errorMessage.match(ERROR_CODE_REGEX);\n    const code = match ? parseInt(match[1], 10) : undefined;\n    return new TransactionError(errorMessage, code || _onflow_typedefs__WEBPACK_IMPORTED_MODULE_8__.FvmErrorCode.UNKNOWN_ERROR);\n  }\n}\n\nasync function configLens(regex) {\n  return Object.fromEntries(Object.entries(await (0,_onflow_config__WEBPACK_IMPORTED_MODULE_4__.config)().where(regex)).map(_ref => {\n    let [key, value] = _ref;\n    return [key.replace(regex, \"\"), value];\n  }));\n}\n\nconst isExpired = tx => tx.status === 5;\nconst isSealed = tx => tx.status >= 4;\nconst isExecuted = tx => tx.status >= 3;\nconst isFinalized = tx => tx.status >= 2;\nconst isPending = tx => tx.status >= 1;\nconst isUnknown = tx => tx.status >= 0;\nconst deepEqual = (a, b) => {\n  if (a === b) return true;\n  if (typeof a !== \"object\" || typeof b !== \"object\") return false;\n  if (Object.keys(a).length !== Object.keys(b).length) return false;\n  for (const key in a) if (!deepEqual(a[key], b[key])) return false;\n  return true;\n};\nconst isDiff = (a, b) => {\n  return !deepEqual(a, b);\n};\nconst scoped = transactionId => {\n  if (typeof transactionId === \"object\") transactionId = transactionId.transactionId;\n  if (transactionId == null) throw new Error(\"transactionId required\");\n  return transactionId;\n};\n\nconst TXID_REGEXP = /^[0-9a-fA-F]{64}$/;\n\nconst POLL = \"POLL\";\nconst TIMEOUT = \"TIMEOUT\";\n\n/**\n * @typedef {import(\"@onflow/typedefs\").Transaction} Transaction\n */\n\n/**\n * @typedef {import(\"@onflow/typedefs\").TransactionStatus} TransactionStatus\n */\n\nconst fetchTxStatus = async transactionId => {\n  return (0,_onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.send)([(0,_onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.getTransactionStatus)(transactionId)]).then(_onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.decode);\n};\nconst makeHandlers$1 = function () {\n  let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  return {\n    [_onflow_util_actor__WEBPACK_IMPORTED_MODULE_9__.INIT]: async ctx => {\n      setTimeout(() => ctx.sendSelf(TIMEOUT), opts.txNotFoundTimeout);\n      ctx.sendSelf(POLL);\n    },\n    [_onflow_util_actor__WEBPACK_IMPORTED_MODULE_9__.SUBSCRIBE]: (ctx, letter) => {\n      ctx.subscribe(letter.from);\n      ctx.send(letter.from, _onflow_util_actor__WEBPACK_IMPORTED_MODULE_9__.UPDATED, ctx.all());\n    },\n    [_onflow_util_actor__WEBPACK_IMPORTED_MODULE_9__.UNSUBSCRIBE]: (ctx, letter) => {\n      ctx.unsubscribe(letter.from);\n    },\n    [_onflow_util_actor__WEBPACK_IMPORTED_MODULE_9__.SNAPSHOT]: async (ctx, letter) => {\n      letter.reply(ctx.all());\n    },\n    [TIMEOUT]: async ctx => {\n      // If status is still unknown, send a timeout error\n      if (Object.keys(ctx.all()).length === 0) {\n        ctx.fatalError(new Error(`TX status polling failed: no transaction was found within timeout interval (${opts.txNotFoundTimeout}ms)`));\n      }\n    },\n    [POLL]: async ctx => {\n      // Helper to queue another poll\n      const poll = () => setTimeout(() => ctx.sendSelf(POLL), opts.pollRate);\n      let tx;\n      const prevTx = ctx.all();\n      try {\n        tx = await fetchTxStatus(ctx.self());\n      } catch (e) {\n        const isHttpNotFound = e instanceof _onflow_transport_http__WEBPACK_IMPORTED_MODULE_10__.HTTPRequestError && e.statusCode === 404;\n        const isGrpcNotFound = e.code === _improbable_eng_grpc_web__WEBPACK_IMPORTED_MODULE_11__.grpc.Code.NotFound;\n\n        // If TX is not found, suppress error and poll again\n        if (isHttpNotFound || isGrpcNotFound) {\n          return poll();\n        }\n        return ctx.fatalError(e);\n      }\n      if (!isSealed(tx)) poll();\n      if (isDiff(prevTx, tx)) ctx.broadcast(_onflow_util_actor__WEBPACK_IMPORTED_MODULE_9__.UPDATED, tx);\n      ctx.merge(tx);\n    }\n  };\n};\nconst spawnTransaction = function () {\n  let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  return transactionId => {\n    return (0,_onflow_util_actor__WEBPACK_IMPORTED_MODULE_9__.spawn)(makeHandlers$1(opts), scoped(transactionId));\n  };\n};\n\n/**\n * Provides methods for interacting with a transaction\n *\n * @param {string} transactionId - The transaction ID\n * @param {object} [opts] - Optional parameters\n * @param {number} [opts.pollRate=1000] - Polling rate in milliseconds\n * @param {number} [opts.txNotFoundTimeout=12500] - Timeout in milliseconds for ignoring transaction not found errors (do not modify unless you know what you are doing)\n * @returns {{\n *    snapshot: function(): Promise<TransactionStatus>,\n *    subscribe: function(SubscriptionCallback): function(): void,\n *    onceFinalized: function(): Promise<TransactionStatus>,\n *    onceExecuted: function(): Promise<TransactionStatus>,\n *    onceSealed: function(): Promise<TransactionStatus>\n * }}\n * @throws {Error} If transactionId is not a 64 byte hash string\n */\nfunction transaction$1(transactionId) {\n  let opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n    txNotFoundTimeout: 12500,\n    pollRate: 1000\n  };\n  // Validate transactionId as 64 byte hash\n  if (!TXID_REGEXP.test(scoped(transactionId))) throw new Error(\"Invalid transactionId\");\n  function snapshot() {\n    return (0,_onflow_util_actor__WEBPACK_IMPORTED_MODULE_9__.snapshoter)(transactionId, spawnTransaction(opts));\n  }\n  function subscribe(callback) {\n    return (0,_onflow_util_actor__WEBPACK_IMPORTED_MODULE_9__.subscriber)(scoped(transactionId), spawnTransaction(opts), callback);\n  }\n  function once(predicate) {\n    return function innerOnce() {\n      let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      const suppress = opts.suppress || false;\n      return new Promise((resolve, reject) => {\n        const unsub = subscribe((txStatus, error) => {\n          if ((error || txStatus.statusCode) && !suppress) {\n            if (error != null) {\n              reject(error);\n              unsub();\n            } else if (txStatus.statusCode === 1) {\n              const transactionError = TransactionError.fromErrorMessage(txStatus.errorMessage);\n              reject(transactionError);\n              unsub();\n            }\n            return;\n          }\n          if (predicate(txStatus)) {\n            resolve(txStatus);\n            unsub();\n          }\n        });\n      });\n    };\n  }\n  return {\n    snapshot,\n    subscribe,\n    onceFinalized: once(isFinalized),\n    onceExecuted: once(isExecuted),\n    onceSealed: once(isSealed)\n  };\n}\ntransaction$1.isUnknown = isUnknown;\ntransaction$1.isPending = isPending;\ntransaction$1.isFinalized = isFinalized;\ntransaction$1.isExecuted = isExecuted;\ntransaction$1.isSealed = isSealed;\ntransaction$1.isExpired = isExpired;\n\nconst FLOW_EMULATOR$1 = \"local\";\n\n// Map of transaction observables\n// Used for shared global singleton to prevent duplicate subscriptions\nconst registry = new Map();\n\n/**\n * Provides methods for interacting with a transaction\n *\n * @param transactionId - The transaction ID\n * @param opts - Optional parameters\n * @param opts.pollRate - Polling rate in milliseconds\n * @param opts.txNotFoundTimeout - Timeout in milliseconds for ignoring transaction not found errors (do not modify unless you know what you are doing)\n * @throws {Error} If transactionId is not a 64 byte hash string\n */\nfunction transaction(transactionId) {\n  let opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n    txNotFoundTimeout: 12500,\n    pollRate: 1000\n  };\n  // Validate transactionId as 64 byte hash\n  if (!TXID_REGEXP.test(scoped(transactionId))) throw new Error(\"Invalid transactionId\");\n  function getObservable() {\n    let observable = registry.get(transactionId);\n    if (!observable) {\n      observable = createObservable(transactionId, opts);\n      registry.set(transactionId, observable);\n    }\n    return observable;\n  }\n  function snapshot() {\n    return Promise.resolve(getObservable().value);\n  }\n  function subscribe(onData, onError) {\n    const observable = getObservable();\n    const {\n      unsubscribe\n    } = observable.subscribe(onData, onError);\n    return () => unsubscribe();\n  }\n  function once(predicate) {\n    return function innerOnce() {\n      let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n        suppress: false\n      };\n      const suppress = opts.suppress || false;\n      return new Promise((resolve, reject) => {\n        const unsub = subscribe(txStatus => {\n          if (txStatus.statusCode === 1) {\n            const transactionError = TransactionError.fromErrorMessage(txStatus.errorMessage);\n            reject(transactionError);\n            unsub();\n          } else if (predicate(txStatus)) {\n            resolve(txStatus);\n            unsub();\n          }\n        }, err => {\n          if (!suppress) {\n            reject(err);\n            unsub();\n          }\n        });\n      });\n    };\n  }\n  return {\n    snapshot,\n    subscribe,\n    onceFinalized: once(isFinalized),\n    onceExecuted: once(isExecuted),\n    onceSealed: once(isSealed)\n  };\n}\ntransaction.isUnknown = _onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.isUnknown;\ntransaction.isPending = isPending;\ntransaction.isFinalized = isFinalized;\ntransaction.isExecuted = isExecuted;\ntransaction.isSealed = isSealed;\ntransaction.isExpired = isExpired;\n\n/**\n * Creates an observable for a transaction\n */\nfunction createObservable(txId, opts) {\n  const observers = new Set();\n  let value = {\n    blockId: \"\",\n    status: _onflow_typedefs__WEBPACK_IMPORTED_MODULE_8__.TransactionExecutionStatus.UNKNOWN,\n    statusCode: 0,\n    errorMessage: \"\",\n    events: [],\n    statusString: \"\"\n  };\n\n  // Initialize the subscription\n  init().catch(error);\n  async function init() {\n    const flowNetwork = await getChainId();\n\n    // As of Flow CLI v2.2.8, WebSocket subscriptions are not supported on the Flow emulator\n    // This conditional will be removed when WebSocket subscriptions are supported in this environment\n    if (flowNetwork === FLOW_EMULATOR$1) {\n      console.warn(\"Events are not supported on the Flow emulator, falling back to legacy polling.\");\n      fallbackLegacyPolling();\n    } else {\n      subscribeTransactionStatuses();\n    }\n  }\n\n  // Subscribe to transaction status updates\n  function subscribeTransactionStatuses() {\n    // Subscribe to transaction status updates\n    const subscription = (0,_onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.subscribe)({\n      topic: _onflow_typedefs__WEBPACK_IMPORTED_MODULE_8__.SubscriptionTopic.TRANSACTION_STATUSES,\n      args: {\n        transactionId: txId\n      },\n      onData: txStatus => {\n        if (isDiff(value, txStatus)) {\n          value = txStatus;\n          next(txStatus);\n        }\n\n        // Clean up the subscription if the transaction is sealed\n        // Wait for next tick to ensure unsubscribe is defined\n        if (isSealed(txStatus)) {\n          new Promise(resolve => setTimeout(resolve, 0)).then(() => {\n            if (isSealed(txStatus)) {\n              subscription.unsubscribe();\n            }\n          });\n        }\n      },\n      onError: err => {\n        if (err instanceof _onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.SubscriptionsNotSupportedError) {\n          console.warn(\"Failed to subscribe to transaction status updates using real-time streaming (are you using the deprecated GRPC transport?), falling back to polling.\");\n          fallbackLegacyPolling();\n        } else {\n          error(err);\n        }\n      }\n    });\n  }\n  function fallbackLegacyPolling() {\n    // Poll for transaction status updates\n    const unsubscribe = transaction$1(txId, opts).subscribe((txStatus, err) => {\n      if (err) {\n        error(err);\n      } else if (txStatus && isDiff(value, txStatus)) {\n        value = txStatus;\n        next(txStatus);\n\n        // Clean up the subscription if the transaction is sealed\n        // Wait for next tick to ensure unsubscribe is defined\n        if (isSealed(txStatus)) {\n          new Promise(resolve => setTimeout(resolve, 0)).then(() => {\n            unsubscribe();\n          });\n        }\n      }\n    });\n  }\n  function next(txStatus) {\n    for (const observer of observers) {\n      try {\n        observer.onData(txStatus);\n      } catch (error) {\n        console.error(\"Error in transaction observer\", error);\n      }\n    }\n  }\n  function error(err) {\n    for (const observer of observers) {\n      try {\n        observer.onError(err);\n      } catch (error) {\n        console.error(\"Error in transaction observer\", error);\n      }\n    }\n  }\n  return {\n    subscribe(onData, onError) {\n      const observer = {\n        onData,\n        onError: onError || (() => {})\n      };\n      observers.add(observer);\n      onData(value);\n      return {\n        unsubscribe: () => observers.delete(observer)\n      };\n    },\n    get value() {\n      return value;\n    }\n  };\n}\n\nconst RATE = 10000;\nconst UPDATED$1 = \"UPDATED\";\nconst TICK = \"TICK\";\nconst HIGH_WATER_MARK = \"hwm\";\nconst scheduleTick = async ctx => {\n  return setTimeout(() => ctx.sendSelf(TICK), await (0,_onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.config)().get(\"fcl.eventPollRate\", RATE));\n};\nconst HANDLERS$1 = {\n  [TICK]: async ctx => {\n    if (!ctx.hasSubs()) return;\n    let hwm = ctx.get(HIGH_WATER_MARK);\n    if (hwm == null) {\n      ctx.put(HIGH_WATER_MARK, await (0,_onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.block)());\n      ctx.put(TICK, await scheduleTick(ctx));\n    } else {\n      let next = await (0,_onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.block)();\n      ctx.put(HIGH_WATER_MARK, next);\n      if (hwm.height < next.height) {\n        const data = await (0,_onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.send)([(0,_onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.getEventsAtBlockHeightRange)(ctx.self(), hwm.height + 1, next.height)]).then(_onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.decode);\n        for (let d of data) ctx.broadcast(UPDATED$1, d);\n      }\n      ctx.put(TICK, await scheduleTick(ctx));\n    }\n  },\n  [_onflow_util_actor__WEBPACK_IMPORTED_MODULE_9__.SUBSCRIBE]: async (ctx, letter) => {\n    if (!ctx.hasSubs()) {\n      ctx.put(TICK, await scheduleTick(ctx));\n    }\n    ctx.subscribe(letter.from);\n  },\n  [_onflow_util_actor__WEBPACK_IMPORTED_MODULE_9__.UNSUBSCRIBE]: (ctx, letter) => {\n    ctx.unsubscribe(letter.from);\n    if (!ctx.hasSubs()) {\n      clearTimeout(ctx.get(TICK));\n      ctx.delete(TICK);\n      ctx.delete(HIGH_WATER_MARK);\n    }\n  }\n};\nconst spawnEvents = key => (0,_onflow_util_actor__WEBPACK_IMPORTED_MODULE_9__.spawn)(HANDLERS$1, key);\n\n/**\n * @typedef {import(\"@onflow/typedefs\").Event} Event\n */\n\n/**\n * @typedef {object} SubscribeObject\n * @property {Function} subscribe - The subscribe function.\n */\n\n/**\n * @callback SubscriptionCallback\n * @returns {Event}\n */\n\n/**\n * @description - Subscribe to events\n * @param {string} key - A valid event name\n * @returns {SubscribeObject}\n *\n * @example\n * import * as fcl from \"@onflow/fcl\"\n * fcl.events(eventName).subscribe((event) => console.log(event))\n */\nfunction events$1(key) {\n  return {\n    /**\n     * @description - Subscribe to events\n     * @param {Function} callback - The callback function\n     * @returns {SubscriptionCallback}\n     */\n    subscribe: callback => (0,_onflow_util_actor__WEBPACK_IMPORTED_MODULE_9__.subscriber)(key, spawnEvents, callback)\n  };\n}\n\nconst FLOW_EMULATOR = \"local\";\n\n/**\n * @description - Subscribe to events\n * @param filterOrType - The filter or type of events to subscribe to\n *\n * @example\n * import * as fcl from \"@onflow/fcl\"\n * const unsubscribe = fcl.events(eventName).subscribe((event) => console.log(event))\n * unsubscribe()\n */\nfunction events(filterOrType) {\n  let filter;\n  if (typeof filterOrType === \"string\") {\n    filter = {\n      eventTypes: [filterOrType]\n    };\n  } else {\n    filter = filterOrType || {};\n  }\n  return {\n    subscribe: function (onData) {\n      let onError = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : error => {\n        console.error(\"Unhandled error in event subscription:\", error);\n      };\n      let unsubscribeFn = () => {};\n      let unsubscribeFnLegacy = () => {};\n\n      // Subscribe to the event stream\n      function subscribeEventStream() {\n        const {\n          unsubscribe\n        } = (0,_onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.subscribe)({\n          topic: _onflow_typedefs__WEBPACK_IMPORTED_MODULE_8__.SubscriptionTopic.EVENTS,\n          args: filter,\n          onData: event => {\n            // Emit the event\n            onData(event);\n          },\n          onError: error => {\n            // If subscriptions are not supported, fallback to legacy polling, otherwise return the error\n            if (error instanceof _onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.SubscriptionsNotSupportedError) {\n              console.warn(\"Failed to subscribe to events using real-time streaming (are you using the deprecated GRPC transport?), falling back to legacy polling.\");\n              fallbackLegacyPolling();\n            } else {\n              onError(error);\n            }\n          }\n        });\n        unsubscribeFn = unsubscribe;\n      }\n\n      // Fallback to legacy polling if real-time streaming is not supported\n      function fallbackLegacyPolling() {\n        if (typeof filterOrType !== \"string\") {\n          throw new Error(\"Legacy fcl.events fallback only supports string filters (single event type)\");\n        }\n        unsubscribeFnLegacy = events$1(filterOrType).subscribe((event, error) => {\n          if (error) {\n            onError(error);\n          } else {\n            onData(event);\n          }\n        });\n      }\n      async function subscribeToEvents() {\n        const network = await getChainId();\n\n        // As of Flow CLI v2.2.8, WebSocket subscriptions are not supported on the Flow emulator\n        // This conditional will be removed when WebSocket subscriptions are supported in this environment\n        if (network === FLOW_EMULATOR) {\n          console.warn(\"Events are not supported on the Flow emulator, falling back to legacy polling.\");\n          fallbackLegacyPolling();\n        } else {\n          subscribeEventStream();\n        }\n      }\n\n      // Subscribe to events\n      const initPromise = subscribeToEvents().catch(error => {\n        onError(error);\n      });\n\n      // Return an unsubscribe function\n      return () => {\n        initPromise.finally(() => {\n          unsubscribeFn();\n          unsubscribeFnLegacy();\n        });\n      };\n    }\n  };\n}\n\nconst stub = () => {\n  throw new Error(`Platform specific Core Strategies are not initialized`);\n};\nconst stubCoreStrategies = {\n  [CORE_STRATEGIES[\"EXT/RPC\"]]: stub,\n  [CORE_STRATEGIES[\"HTTP/POST\"]]: stub,\n  [CORE_STRATEGIES[\"IFRAME/RPC\"]]: stub,\n  [CORE_STRATEGIES[\"POP/RPC\"]]: stub,\n  [CORE_STRATEGIES[\"TAB/RPC\"]]: stub,\n  [CORE_STRATEGIES[\"EXT/RPC\"]]: stub\n};\nconst supportedPlugins = [\"ServicePlugin\"];\nconst supportedServicePlugins = [\"discovery-service\"];\nconst validateDiscoveryPlugin = servicePlugin => {\n  const {\n    services = [],\n    serviceStrategy\n  } = servicePlugin;\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_2__.invariant)(Array.isArray(services), \"Services must be an array\");\n  for (const ds of services) {\n    (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_2__.invariant)(isRequired(ds.f_type) && ds.f_type === \"Service\", \"Service is required\");\n    (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_2__.invariant)(isRequired(ds.type) && ds.type === \"authn\", `Service must be type authn. Received ${ds.type}`);\n    (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_2__.invariant)(ds.method in CORE_STRATEGIES || serviceStrategy.method === ds.method, `Service method ${ds.method} is not supported`);\n  }\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_2__.invariant)(isRequired(serviceStrategy), \"Service strategy is required\");\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_2__.invariant)(isRequired(serviceStrategy.method) && isString(serviceStrategy.method), \"Service strategy method is required\");\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_2__.invariant)(isRequired(serviceStrategy.exec) && isFunc(serviceStrategy.exec), \"Service strategy exec function is required\");\n  return {\n    discoveryServices: services,\n    serviceStrategy\n  };\n};\nconst ServiceRegistry = _ref => {\n  let {\n    coreStrategies\n  } = _ref;\n  let services = new Set();\n  let strategies = new Map(Object.entries(coreStrategies));\n  const add = servicePlugin => {\n    (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_2__.invariant)(supportedServicePlugins.includes(servicePlugin.type), `Service Plugin type ${servicePlugin.type} is not supported`);\n    if (servicePlugin.type === \"discovery-service\") {\n      const {\n        discoveryServices,\n        serviceStrategy\n      } = validateDiscoveryPlugin(servicePlugin);\n      setServices(discoveryServices);\n      if (!strategies.has(serviceStrategy.method)) {\n        strategies.set(serviceStrategy.method, serviceStrategy.exec);\n      } else {\n        (0,_onflow_util_logger__WEBPACK_IMPORTED_MODULE_5__.log)({\n          title: `Add Service Plugin`,\n          message: `Service strategy for ${serviceStrategy.method} already exists`,\n          level: _onflow_util_logger__WEBPACK_IMPORTED_MODULE_5__.LEVELS.warn\n        });\n      }\n    }\n  };\n  const setServices = discoveryServices => services = new Set([...discoveryServices]);\n  const getServices = () => [...services];\n  const getStrategy = method => strategies.get(method);\n  const getStrategies = () => [...strategies.keys()];\n  return Object.freeze({\n    add,\n    getServices,\n    getStrategy,\n    getStrategies\n  });\n};\nconst validatePlugins = plugins => {\n  let pluginsArray;\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_2__.invariant)(!!plugins, \"No plugins supplied\");\n  if (!Array.isArray(plugins)) {\n    pluginsArray = [plugins];\n  } else {\n    pluginsArray = [...plugins];\n  }\n  for (const p of pluginsArray) {\n    (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_2__.invariant)(isRequired(p.name), \"Plugin name is required\");\n    (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_2__.invariant)(isRequired(p.f_type), \"Plugin f_type is required\");\n    (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_2__.invariant)(supportedPlugins.includes(p.f_type), `Plugin type ${p.f_type} is not supported`);\n  }\n  return pluginsArray;\n};\nconst PluginRegistry = () => {\n  const pluginsMap = new Map();\n  const getPlugins = () => pluginsMap;\n  const add = plugins => {\n    const pluginsArray = validatePlugins(plugins);\n    for (const p of pluginsArray) {\n      pluginsMap.set(p.name, p);\n      if (p.f_type === \"ServicePlugin\") {\n        serviceRegistry.add(p);\n      }\n    }\n  };\n  return Object.freeze({\n    add,\n    getPlugins\n  });\n};\nlet serviceRegistry;\nconst getIsServiceRegistryInitialized = () => typeof serviceRegistry !== \"undefined\";\nconst initServiceRegistry = _ref2 => {\n  let {\n    coreStrategies\n  } = _ref2;\n  if (getIsServiceRegistryInitialized()) {\n    return serviceRegistry;\n  }\n  const _serviceRegistry = ServiceRegistry({\n    coreStrategies\n  });\n  serviceRegistry = _serviceRegistry;\n  return _serviceRegistry;\n};\nconst getServiceRegistry = () => {\n  if (!getIsServiceRegistryInitialized()) {\n    console.warn(\"Registry is not initalized, it will be initialized with stub core strategies\");\n    return initServiceRegistry({\n      coreStrategies: stubCoreStrategies\n    });\n  }\n  return serviceRegistry;\n};\nconst pluginRegistry = PluginRegistry();\n\nconst makeDiscoveryServices = async () => {\n  const extensionServices = window?.fcl_extensions || [];\n  return [...extensionServices, ...getServiceRegistry().getServices()];\n};\nasync function getDiscoveryService(service) {\n  const discoveryAuthnInclude = await _onflow_config__WEBPACK_IMPORTED_MODULE_4__.config.get(\"discovery.authn.include\", []);\n  const discoveryAuthnExclude = await _onflow_config__WEBPACK_IMPORTED_MODULE_4__.config.get(\"discovery.authn.exclude\", []);\n  const discoveryFeaturesSuggested = await _onflow_config__WEBPACK_IMPORTED_MODULE_4__.config.get(\"discovery.features.suggested\", []);\n  const discoveryWalletMethod = await _onflow_config__WEBPACK_IMPORTED_MODULE_4__.config.first([\"discovery.wallet.method\", \"discovery.wallet.method.default\"]);\n  const method = service?.method ? service.method : discoveryWalletMethod;\n  const endpoint = service?.endpoint ?? (await _onflow_config__WEBPACK_IMPORTED_MODULE_4__.config.first([\"discovery.wallet\", \"challenge.handshake\"]));\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_2__.invariant)(endpoint, `\n    If no service is passed to \"authenticate,\" then \"discovery.wallet\" must be defined in fcl config.\n    See: \"https://docs.onflow.org/fcl/reference/api/#setting-configuration-values\"\n    `);\n  return {\n    ...service,\n    type: \"authn\",\n    endpoint,\n    method,\n    discoveryAuthnInclude,\n    discoveryAuthnExclude,\n    discoveryFeaturesSuggested\n  };\n}\n\nasync function getServices(_ref) {\n  let {\n    types\n  } = _ref;\n  const endpoint = await _onflow_config__WEBPACK_IMPORTED_MODULE_4__.config.get(\"discovery.authn.endpoint\");\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_2__.invariant)(Boolean(endpoint), `\"discovery.authn.endpoint\" in config must be defined.`);\n  const include = await _onflow_config__WEBPACK_IMPORTED_MODULE_4__.config.get(\"discovery.authn.include\", []);\n  const exclude = await _onflow_config__WEBPACK_IMPORTED_MODULE_4__.config.get(\"discovery.authn.exclude\", []);\n  const url = new URL(endpoint);\n  return fetch(url, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      type: types,\n      fclVersion: VERSION,\n      include,\n      exclude,\n      features: {\n        suggested: await _onflow_config__WEBPACK_IMPORTED_MODULE_4__.config.get(\"discovery.features.suggested\", [])\n      },\n      clientServices: await makeDiscoveryServices(),\n      supportedStrategies: getServiceRegistry().getStrategies(),\n      userAgent: window?.navigator?.userAgent,\n      network: await getChainId()\n    })\n  }).then(d => d.json());\n}\n\nconst SERVICE_ACTOR_KEYS = {\n  AUTHN: \"authn\",\n  RESULTS: \"results\",\n  SNAPSHOT: \"SNAPSHOT\",\n  UPDATED: \"UPDATED\",\n  UPDATE_RESULTS: \"UPDATE_RESULTS\"\n};\nconst warn = (fact, msg) => {\n  if (fact) {\n    console.warn(`\n      %cFCL Warning\n      ============================\n      ${msg}\n      For more info, please see the docs: https://docs.onflow.org/fcl/\n      ============================\n      `, \"font-weight:bold;font-family:monospace;\");\n  }\n};\nconst fetchServicesFromDiscovery = async () => {\n  try {\n    const services = await getServices({\n      types: [SERVICE_ACTOR_KEYS.AUTHN]\n    });\n    (0,_onflow_util_actor__WEBPACK_IMPORTED_MODULE_9__.send)(SERVICE_ACTOR_KEYS.AUTHN, SERVICE_ACTOR_KEYS.UPDATE_RESULTS, {\n      results: services\n    });\n  } catch (error) {\n    (0,_onflow_util_logger__WEBPACK_IMPORTED_MODULE_5__.log)({\n      title: `${error.name} Error fetching Discovery API services.`,\n      message: error.message,\n      level: _onflow_util_logger__WEBPACK_IMPORTED_MODULE_5__.LEVELS.error\n    });\n  }\n};\nconst HANDLERS = {\n  [_onflow_util_actor__WEBPACK_IMPORTED_MODULE_9__.INIT]: async ctx => {\n    warn(typeof window === \"undefined\", '\"fcl.discovery\" is only available in the browser.');\n    // If you call this before the window is loaded extensions will not be set yet\n    if (document.readyState === \"complete\") {\n      fetchServicesFromDiscovery();\n    } else {\n      window.addEventListener(\"load\", () => {\n        fetchServicesFromDiscovery();\n      });\n    }\n  },\n  [SERVICE_ACTOR_KEYS.UPDATE_RESULTS]: (ctx, _letter, data) => {\n    ctx.merge(data);\n    ctx.broadcast(SERVICE_ACTOR_KEYS.UPDATED, {\n      ...ctx.all()\n    });\n  },\n  [_onflow_util_actor__WEBPACK_IMPORTED_MODULE_9__.SUBSCRIBE]: (ctx, letter) => {\n    ctx.subscribe(letter.from);\n    ctx.send(letter.from, SERVICE_ACTOR_KEYS.UPDATED, {\n      ...ctx.all()\n    });\n  },\n  [_onflow_util_actor__WEBPACK_IMPORTED_MODULE_9__.UNSUBSCRIBE]: (ctx, letter) => ctx.unsubscribe(letter.from),\n  [SERVICE_ACTOR_KEYS.SNAPSHOT]: async (ctx, letter) => letter.reply({\n    ...ctx.all()\n  })\n};\nconst spawnProviders = () => (0,_onflow_util_actor__WEBPACK_IMPORTED_MODULE_9__.spawn)(HANDLERS, SERVICE_ACTOR_KEYS.AUTHN);\n\n/**\n * @typedef {import(\"@onflow/typedefs\").Service} Service\n */\n\n/**\n * @callback SubscriptionCallback\n * @returns {Service[]}\n */\n\n/**\n * @description\n * Discovery methods for interacting with Authn.\n *\n * @typedef {object} Authn\n * @property {Function} subscribe - Subscribe to Discovery authn services\n * @property {Function} snapshot - Get the current Discovery authn services spanshot\n * @property {Function} update - Trigger an update of authn services\n */\nconst authn = {\n  /**\n   * @description - Subscribe to Discovery authn services\n   * @param {Function} cb\n   * @returns {SubscriptionCallback}\n   */\n  subscribe: cb => (0,_onflow_util_actor__WEBPACK_IMPORTED_MODULE_9__.subscriber)(SERVICE_ACTOR_KEYS.AUTHN, spawnProviders, cb),\n  /**\n   * @description - Get the current Discovery authn services spanshot\n   * @returns {Service[]}\n   */\n  snapshot: () => (0,_onflow_util_actor__WEBPACK_IMPORTED_MODULE_9__.snapshoter)(SERVICE_ACTOR_KEYS.AUTHN, spawnProviders),\n  /**\n   * @description - Trigger an update of authn services\n   * @returns {void}\n   */\n  update: () => {\n    // Only fetch services if the window is loaded\n    // Otherwise, this will be called by the INIT handler\n    if (document.readyState === \"complete\") {\n      fetchServicesFromDiscovery();\n    }\n  }\n};\n\nconst discovery = {\n  authn\n};\n\nfunction genHash(utf8String) {\n  const sha = new sha3__WEBPACK_IMPORTED_MODULE_12__.SHA3(256);\n  sha.update(_onflow_rlp__WEBPACK_IMPORTED_MODULE_7__.Buffer.from(utf8String, \"utf8\"));\n  return sha.digest(\"hex\");\n}\n\n/**\n * @description Generates Interaction Template ID for a given Interaction Template\n *\n * @param {object} params\n * @param {object} params.template - Interaction Template\n * @returns {Promise<string>} - Interaction Template ID\n */\nasync function generateTemplateId$2(_ref) {\n  let {\n    template\n  } = _ref;\n  (0,_onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.invariant)(template != undefined, \"generateTemplateId({ template }) -- template must be defined\");\n  (0,_onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.invariant)(typeof template === \"object\", \"generateTemplateId({ template }) -- template must be an object\");\n  (0,_onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.invariant)(template.f_type === \"InteractionTemplate\", \"generateTemplateId({ template }) -- template object must be an InteractionTemplate\");\n  (0,_onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.invariant)(template.f_version === \"1.0.0\", \"generateTemplateId({ template }) -- template object must be an version 1.0.0\");\n  const templateData = template.data;\n  const messages = await Promise.all(Object.keys(templateData.messages).map(async messageKey => [genHash(messageKey), await Promise.all(Object.keys(templateData.messages?.[messageKey]?.i18n).map(async i18nkeylanguage => [genHash(i18nkeylanguage), genHash(templateData.messages?.[messageKey]?.i18n?.[i18nkeylanguage])]))]));\n  const dependencies = await Promise.all(Object.keys(templateData?.dependencies).map(async dependencyAddressPlaceholder => [genHash(dependencyAddressPlaceholder), await Promise.all(Object.keys(templateData?.dependencies?.[dependencyAddressPlaceholder]).map(async dependencyContract => [genHash(dependencyContract), await Promise.all(Object.keys(templateData?.dependencies?.[dependencyAddressPlaceholder]?.[dependencyContract]).map(async dependencyContractNetwork => [genHash(dependencyContractNetwork), [genHash(templateData?.dependencies?.[dependencyAddressPlaceholder]?.[dependencyContract]?.[dependencyContractNetwork].address), genHash(templateData?.dependencies?.[dependencyAddressPlaceholder]?.[dependencyContract]?.[dependencyContractNetwork].contract), genHash(templateData?.dependencies?.[dependencyAddressPlaceholder]?.[dependencyContract]?.[dependencyContractNetwork].fq_address), genHash(templateData?.dependencies?.[dependencyAddressPlaceholder]?.[dependencyContract]?.[dependencyContractNetwork].pin), genHash(String(templateData?.dependencies?.[dependencyAddressPlaceholder]?.[dependencyContract]?.[dependencyContractNetwork].pin_block_height))]]))]))]));\n  const _arguments = await Promise.all(Object.keys(templateData?.[\"arguments\"]).map(async argumentLabel => [genHash(argumentLabel), [genHash(String(templateData?.[\"arguments\"]?.[argumentLabel].index)), genHash(templateData?.[\"arguments\"]?.[argumentLabel].type), genHash(templateData?.[\"arguments\"]?.[argumentLabel].balance || \"\"), await Promise.all(Object.keys(templateData?.[\"arguments\"]?.[argumentLabel].messages).map(async argumentMessageKey => [genHash(argumentMessageKey), await Promise.all(Object.keys(templateData?.[\"arguments\"]?.[argumentLabel].messages?.[argumentMessageKey].i18n).map(async i18nkeylanguage => [genHash(i18nkeylanguage), genHash(templateData?.[\"arguments\"]?.[argumentLabel].messages?.[argumentMessageKey].i18n?.[i18nkeylanguage])]))]))]]));\n  const encodedHex = (0,_onflow_rlp__WEBPACK_IMPORTED_MODULE_7__.encode)([genHash(\"InteractionTemplate\"), genHash(\"1.0.0\"), genHash(templateData?.type), genHash(templateData?.interface), messages, genHash(templateData?.cadence), dependencies, _arguments]).toString(\"hex\");\n  return genHash(encodedHex);\n}\n\nfunction generateImport(_ref) {\n  let {\n    contractName,\n    address\n  } = _ref;\n  return {\n    contractName,\n    address,\n    contract: \"\"\n  };\n}\n\nfunction findImports(cadence) {\n  const imports = [];\n  const importsReg = /import ((\\w|,| )+)* from 0x\\w+/g;\n  const fileImports = cadence.match(importsReg) || [];\n  for (const fileImport of fileImports) {\n    const importLineReg = /import ((\\w+|, |)*) from (0x\\w+)/g;\n    const importLine = importLineReg.exec(fileImport);\n    const contractsReg = /((?:\\w+)+),?/g;\n    const contracts = importLine[1].match(contractsReg) || [];\n    for (const contract of contracts) {\n      imports.push(generateImport({\n        address: importLine[3],\n        contractName: contract.replace(/,/g, \"\")\n      }));\n    }\n  }\n  return imports;\n}\n\n/**\n * @description Produces a dependency pin for a contract at current state of chain\n * @param {object} params\n * @param {string} params.address - The address of the account containing the contract\n * @param {string} params.contractName - The name of the contract\n * @param {object} opts - Options to pass to the interaction\n * @returns {Promise<string>} - The dependency pin\n */\nasync function generateDependencyPin110(_ref) {\n  let {\n    address,\n    contractName\n  } = _ref;\n  let opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  (0,_onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.invariant)(address != undefined, \"generateDependencyPin({ address }) -- address must be defined\");\n  (0,_onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.invariant)(contractName != undefined, \"generateDependencyPin({ contractName }) -- contractName must be defined\");\n  (0,_onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.invariant)(typeof address === \"string\", \"generateDependencyPin({ address }) -- address must be a string\");\n  (0,_onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.invariant)(typeof contractName === \"string\", \"generateDependencyPin({ contractName }) -- contractName must be a string\");\n  const horizon = [generateImport({\n    contractName,\n    address\n  })];\n  for (const horizonImport of horizon) {\n    const account = await (0,_onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.send)([(0,_onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.getAccount)(await (0,_onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.config)().get(horizonImport.address, horizonImport.address))], opts).then(_onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.decode);\n    horizonImport.contract = account.contracts?.[horizonImport.contractName];\n    if (!horizonImport.contract) {\n      console.error(\"Did not find expected contract\", horizonImport, account);\n      throw new Error(\"Did not find expected contract\");\n    }\n    const contractImports = findImports(horizonImport.contract);\n    horizon.push(...contractImports);\n  }\n  const contractPinSelfHashesPromises = horizon.map(iport => genHash(iport.contract));\n  // genHash returns a promise, so we need to await the results of all the promises\n  const contractPinSelfHashes = await Promise.all(contractPinSelfHashesPromises);\n  const contractPinHashes = contractPinSelfHashes.join(\"\");\n  return genHash(contractPinHashes);\n}\n\nasync function generateContractNetworks(contractName, networks) {\n  const values = [];\n  for (const net of networks) {\n    const networkHashes = [genHash(net.network)];\n    const {\n      address,\n      dependency_pin_block_height\n    } = net;\n    if (net.dependency_pin) {\n      const hash = await generateDependencyPin110({\n        address,\n        contractName,\n        blockHeight: dependency_pin_block_height\n      });\n      networkHashes.push(genHash(hash));\n    }\n    values.push(networkHashes);\n  }\n  return values;\n}\nasync function generateContractDependencies(dependencies) {\n  const values = [];\n  for (let i = 0; i < dependencies.length; i++) {\n    const dependency = dependencies[i];\n    const contracts = [];\n    for (let j = 0; j < dependency?.contracts.length; j++) {\n      const c = dependency?.contracts[j];\n      const contractName = c?.contract;\n      contracts.push(genHash(contractName));\n      const contractHashes = await generateContractNetworks(contractName, c?.networks);\n      contracts.push(contractHashes);\n    }\n    values.push(contracts);\n  }\n  return values;\n}\n\n/**\n * @description Generates Interaction Template ID for a given Interaction Template\n *\n * @param {object} params\n * @param {object} params.template - Interaction Template\n * @returns {Promise<string>} - Interaction Template ID\n */\nasync function generateTemplateId$1(_ref) {\n  let {\n    template\n  } = _ref;\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_2__.invariant)(template, \"generateTemplateId({ template }) -- template must be defined\");\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_2__.invariant)(typeof template === \"object\", \"generateTemplateId({ template }) -- template must be an object\");\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_2__.invariant)(template.f_type === \"InteractionTemplate\", \"generateTemplateId({ template }) -- template object must be an InteractionTemplate\");\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_2__.invariant)(template.f_version === \"1.1.0\", \"generateTemplateId({ template }) -- template object must be an version 1.1.0\");\n  const templateData = template.data;\n  const messages = await Promise.all(templateData.messages.map(async templateMessage => [genHash(templateMessage.key), await Promise.all(templateMessage.i18n.map(async templateMessagei18n => [genHash(templateMessagei18n.tag), genHash(templateMessagei18n.translation)]))]));\n  const params = await Promise.all(templateData?.[\"parameters\"].sort((a, b) => a.index - b.index).map(async arg => [genHash(arg.label), [genHash(String(arg.index)), genHash(arg.type), await Promise.all(arg.messages.map(async argumentMessage => [genHash(argumentMessage.key), await Promise.all(argumentMessage.i18n.map(async argumentMessagei18n => [genHash(argumentMessagei18n.tag), genHash(argumentMessagei18n.translation)]))]))]]));\n  const dependencies = [await generateContractDependencies(templateData?.dependencies)];\n  const encodedHex = (0,_onflow_rlp__WEBPACK_IMPORTED_MODULE_7__.encode)([genHash(template?.f_type), genHash(template?.f_version), genHash(templateData?.type), genHash(templateData?.interface), messages, genHash(templateData?.cadence?.body), [dependencies], params]).toString(\"hex\");\n  return genHash(encodedHex);\n}\n\n/**\n * @description Generates Interaction Template ID for a given Interaction Template\n *\n * @param {object} params\n * @param {object} params.template - Interaction Template\n * @returns {Promise<string>} - Interaction Template ID\n */\nasync function generateTemplateId(_ref) {\n  let {\n    template\n  } = _ref;\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_2__.invariant)(template, \"generateTemplateId({ template }) -- template must be defined\");\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_2__.invariant)(typeof template === \"object\", \"generateTemplateId({ template }) -- template must be an object\");\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_2__.invariant)(template.f_type === \"InteractionTemplate\", \"generateTemplateId({ template }) -- template object must be an InteractionTemplate\");\n  switch (template.f_version) {\n    case \"1.1.0\":\n      return await generateTemplateId$1({\n        template\n      });\n    case \"1.0.0\":\n      return await generateTemplateId$2({\n        template\n      });\n    default:\n      throw new Error(\"generateTemplateId Error: Unsupported template version\");\n  }\n}\n\n/**\n * @description Verifies the given Interaction Template Id has been correctly generated\n *\n * @param {object} params\n * @param {object} params.template - Interaction Template\n * @returns {Promise<boolean>} - true or false, Interaction Template ID\n */\n\nasync function verifyGeneratedTemplateId(_ref2) {\n  let {\n    template\n  } = _ref2;\n  return template.id === (await generateTemplateId({\n    template\n  }));\n}\n\n/**\n * @description Returns whether a set of auditors have audited a given Interaction Template\n *\n * @param {object} params\n * @param {object} params.template - Interaction Template\n * @param {Array<string>} params.auditors - Array of auditors\n * @param {object} opts\n * @param {string} opts.flowInteractionAuditContract - Flow Interaction Template Audit contract address\n * @returns {Promise<object>} - Object of auditor addresses and audit status\n */\nasync function getInteractionTemplateAudits(_ref) {\n  let {\n    template,\n    auditors\n  } = _ref;\n  let opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  (0,_onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.invariant)(template != undefined, \"getInteractionTemplateAudits({ template }) -- template must be defined\");\n  (0,_onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.invariant)(template.f_type === \"InteractionTemplate\", \"getInteractionTemplateAudits({ template }) -- template must be an InteractionTemplate\");\n\n  // Recompute ID to be sure it matches\n  let recomputedTemplateID = await generateTemplateId({\n    template\n  });\n  if (recomputedTemplateID !== template.id) {\n    (0,_onflow_util_logger__WEBPACK_IMPORTED_MODULE_5__.log)({\n      title: \"getInteractionTemplateAudits Debug Error\",\n      message: `Could not recompute and match template ID\n                computed: ${recomputedTemplateID}\n                template: ${template.id}\n            `,\n      level: _onflow_util_logger__WEBPACK_IMPORTED_MODULE_5__.LEVELS.debug\n    });\n    throw new Error(\"getInteractionTemplateAudits Error: Could not recompute and match template ID\");\n  }\n  switch (template.f_version) {\n    case \"1.1.0\":\n    case \"1.0.0\":\n      const _auditors = auditors || (await (0,_onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.config)().get(\"flow.auditors\"));\n      (0,_onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.invariant)(_auditors, \"getInteractionTemplateAudits Error: Required configuration for 'fcl.auditors' is not set\");\n      (0,_onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.invariant)(Array.isArray(_auditors), \"getInteractionTemplateAudits Error: Required configuration for 'fcl.auditors' is not an array\");\n      let FlowInteractionAuditContract = opts.flowInteractionAuditContract;\n      if (!FlowInteractionAuditContract) {\n        const fclNetwork = await getChainId(opts);\n        (0,_onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.invariant)(fclNetwork === \"mainnet\" || fclNetwork === \"testnet\", \"getInteractionTemplateAudits Error: Unable to determine address for FlowInteractionTemplateAudit contract. Set configuration for 'fcl.network' to 'mainnet' or 'testnet'\");\n        if (fclNetwork === \"mainnet\") {\n          FlowInteractionAuditContract = \"0xfd100e39d50a13e6\";\n        } else {\n          FlowInteractionAuditContract = \"0xf78bfc12d0a786dc\";\n        }\n      }\n      const audits = await query({\n        cadence: `\n        import FlowInteractionTemplateAudit from ${FlowInteractionAuditContract}\n        access(all) fun main(templateId: String, auditors: [Address]): {Address:Bool} {\n          return FlowInteractionTemplateAudit.getHasTemplateBeenAuditedByAuditors(templateId: templateId, auditors: auditors)\n        }\n        `,\n        args: (arg, t) => [arg(recomputedTemplateID, t.String), arg(_auditors, t.Array(t.Address))]\n      });\n      return audits;\n    default:\n      throw new Error(\"getInteractionTemplateAudits Error: Unsupported template version\");\n  }\n}\n\n/**\n * @description Produces a dependency pin for a contract at current state of chain\n * @param {object} params\n * @param {string} params.address - The address of the account containing the contract\n * @param {string} params.contractName - The name of the contract\n * @param {object} opts - Options to pass to the interaction\n * @returns {Promise<string>} - The dependency pin\n */\nasync function generateDependencyPin100(_ref) {\n  let {\n    address,\n    contractName\n  } = _ref;\n  let opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  (0,_onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.invariant)(address != undefined, \"generateDependencyPin({ address }) -- address must be defined\");\n  (0,_onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.invariant)(contractName != undefined, \"generateDependencyPin({ contractName }) -- contractName must be defined\");\n  (0,_onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.invariant)(typeof address === \"string\", \"generateDependencyPin({ address }) -- address must be a string\");\n  (0,_onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.invariant)(typeof contractName === \"string\", \"generateDependencyPin({ contractName }) -- contractName must be a string\");\n  const horizon = [generateImport({\n    contractName,\n    address\n  })];\n  for (const horizonImport of horizon) {\n    const account = await (0,_onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.send)([(0,_onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.getAccount)(await (0,_onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.config)().get(horizonImport.address, horizonImport.address))], opts).then(_onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.decode);\n    horizonImport.contract = account.contracts?.[horizonImport.contractName];\n    if (!horizonImport.contract) {\n      console.error(\"Did not find expected contract\", horizonImport, account);\n      throw new Error(\"Did not find expected contract\");\n    }\n    const contractImports = findImports(horizonImport.contract);\n    horizon.push(...contractImports);\n  }\n  const contractHashes = horizon.map(iport => genHash(iport.contract));\n  const contractHashesJoined = contractHashes.join(\"\");\n  return genHash(contractHashesJoined);\n}\n\n/**\n * @description Produces a dependency pin for a contract at current state of chain\n * @param {object} params\n * @param {string} params.version - The version of the interaction template\n * @param {string} params.address - The address of the account containing the contract\n * @param {string} params.contractName - The name of the contract\n * @param {object} opts - Options to pass to the interaction\n * @returns {Promise<string>} - The dependency pin\n */\nasync function generateDependencyPin(_ref) {\n  let {\n    version,\n    address,\n    contractName\n  } = _ref;\n  (0,_onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.invariant)(address != undefined, \"generateDependencyPin({ address }) -- address must be defined\");\n  (0,_onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.invariant)(contractName != undefined, \"generateDependencyPin({ contractName }) -- contractName must be defined\");\n  (0,_onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.invariant)(typeof address === \"string\", \"generateDependencyPin({ address }) -- address must be a string\");\n  (0,_onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.invariant)(typeof contractName === \"string\", \"generateDependencyPin({ contractName }) -- contractName must be a string\");\n  switch (version) {\n    case \"1.1.0\":\n      return await generateDependencyPin110({\n        address,\n        contractName\n      });\n    case \"1.0.0\":\n      return await generateDependencyPin100({\n        address,\n        contractName\n      });\n    default:\n      throw new Error(\"deriveCadenceByNetwork Error: Unsupported template version\");\n  }\n}\n\n/**\n * @description Produces a dependency pin for a contract at latest sealed block\n * @param {object} params\n * @param {string} params.version - The version of the interaction template\n * @param {string} params.address - The address of the account containing the contract\n * @param {string} params.contractName - The name of the contract\n * @param {object} opts - Options to pass to the interaction\n * @returns {Promise<string>} - The dependency pin\n */\nasync function generateDependencyPinAtLatestSealedBlock(_ref2) {\n  let {\n    version,\n    address,\n    contractName\n  } = _ref2;\n  let opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  const latestSealedBlock = await (0,_onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.block)({\n    sealed: true\n  }, opts);\n  const latestSealedBlockHeight = latestSealedBlock?.height;\n  return generateDependencyPin({\n    version,\n    address,\n    contractName,\n    blockHeight: latestSealedBlockHeight\n  });\n}\n\n/**\n * @description Checks if an Interaction Template's pins match those generated at a block height\n *\n * @param {object} params\n * @param {object} params.template - Interaction Template to check pins for\n * @param {number} params.blockHeight - Block height to check pins at\n * @param {string} params.network - Network to check pins on\n * @param {object} opts\n * @returns {Promise<boolean>} - Whether or not the pins match\n */\nasync function verifyDependencyPinsSame(_ref) {\n  let {\n    template,\n    blockHeight,\n    network\n  } = _ref;\n  (0,_onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.invariant)(template != undefined, \"generateDependencyPin({ template }) -- template must be defined\");\n  (0,_onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.invariant)(typeof template === \"object\", \"generateDependencyPin({ template }) -- template must be an object\");\n  (0,_onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.invariant)(template.f_type === \"InteractionTemplate\", \"generateDependencyPin({ template }) -- template must be an InteractionTemplate\");\n  (0,_onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.invariant)(network != undefined, \"generateDependencyPin({ network }) network must be defined\");\n  (0,_onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.invariant)(blockHeight != undefined, \"generateDependencyPin({ blockHeight }) blockHeight must be defined\");\n  (0,_onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.invariant)(typeof blockHeight === \"number\", \"generateDependencyPin({ blockHeight }) blockHeight must be a number\");\n  switch (template.f_version) {\n    case \"1.0.0\":\n      const templateDependenciesPlaceholderKeys = Object.keys(template.data.dependencies);\n      for (let templateDependencyPlaceholderKey of templateDependenciesPlaceholderKeys) {\n        const templateDependencyPlaceholder = template.data.dependencies[templateDependencyPlaceholderKey];\n        const templateDependencyPlaceholderContractNames = Object.keys(templateDependencyPlaceholder);\n        for (let templateDependencyPlaceholderContractName of templateDependencyPlaceholderContractNames) {\n          const templateDependencyPlaceholderContractNetworks = template.data.dependencies[templateDependencyPlaceholderKey][templateDependencyPlaceholderContractName];\n          const templateDependency = templateDependencyPlaceholderContractNetworks[network];\n          if (typeof templateDependency === \"undefined\") continue;\n          const pin = await generateDependencyPin({\n            address: templateDependency.address,\n            contractName: templateDependency.contract,\n            blockHeight\n          });\n          if (pin !== templateDependency.pin) {\n            (0,_onflow_util_logger__WEBPACK_IMPORTED_MODULE_5__.log)({\n              title: \"verifyDependencyPinsSame Debug Error\",\n              message: `Could not recompute and match dependency pin.\n                                address: ${templateDependency.address} | contract: ${templateDependency.contract}\n                                computed: ${pin}\n                                template: ${templateDependency.pin}\n                            `,\n              level: _onflow_util_logger__WEBPACK_IMPORTED_MODULE_5__.LEVELS.debug\n            });\n            return false;\n          }\n        }\n      }\n      return true;\n    case \"1.1.0\":\n      let isVerified = false;\n      // iterate over each dependency\n      for (let i = 0; i < template.data?.dependencies.length; i++) {\n        const dependency = template.data?.dependencies[i];\n        // iterate over each contract in dependency\n        for (let j = 0; j < dependency?.contracts.length; j++) {\n          const contract = dependency?.contracts[j];\n          // iterate over each network in contract\n          for (let k = 0; k < contract?.networks.length; k++) {\n            const net = contract?.networks[k];\n            // if network matches, generate pin and compare\n            if (net.network === network) {\n              const pin = await generateDependencyPin({\n                version: template.f_version,\n                address: net.address,\n                contractName: contract.contract,\n                blockHeight\n              });\n              if (pin !== net.dependency_pin.pin) {\n                (0,_onflow_util_logger__WEBPACK_IMPORTED_MODULE_5__.log)({\n                  title: \"verifyDependencyPinsSame Debug Error\",\n                  message: `Could not recompute and match dependency pin.\n                                    address: ${net.address} | contract: ${contract.contract}\n                                    computed: ${pin}\n                                    template: ${net.pin}\n                                `,\n                  level: _onflow_util_logger__WEBPACK_IMPORTED_MODULE_5__.LEVELS.debug\n                });\n                return false;\n              } else {\n                isVerified = true;\n              }\n            }\n          }\n        }\n      }\n      return isVerified;\n    default:\n      throw new Error(\"verifyDependencyPinsSame Error: Unsupported template version\");\n  }\n}\n\n/**\n * @description Checks if an Interaction Template's pins match those generated at the latest block height\n *\n * @param {object} params\n * @param {object} params.template - Interaction Template to check pins for\n * @param {string} params.network - Network to check pins on\n * @param {object} opts\n * @returns {Promise<boolean>} - Whether or not the pins match\n */\nasync function verifyDependencyPinsSameAtLatestSealedBlock(_ref2) {\n  let {\n    template,\n    network\n  } = _ref2;\n  const latestSealedBlock = await (0,_onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.block)({\n    sealed: true\n  });\n  const latestSealedBlockHeight = latestSealedBlock?.height;\n  return verifyDependencyPinsSame({\n    template,\n    network,\n    blockHeight: latestSealedBlockHeight\n  });\n}\n\n/**\n * @description Get Interaction Template argument message\n *\n * @param {object} params\n * @param {string} params.localization [localization=\"en-US\"] - Localization code\n * @param {string} params.messageKey - Message key\n * @param {object} params.template - Interaction Template\n * @returns {string} - Message\n */\nfunction getTemplateMessage(_ref) {\n  let {\n    localization = \"en-US\",\n    messageKey,\n    template\n  } = _ref;\n  (0,_onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.invariant)(messageKey, \"getTemplateMessage({ messageKey }) -- messageKey must be defined\");\n  (0,_onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.invariant)(typeof messageKey === \"string\", \"getTemplateMessage({ messageKey }) -- messageKey must be a string\");\n  (0,_onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.invariant)(localization, \"getTemplateMessage({ localization }) -- localization must be defined\");\n  (0,_onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.invariant)(typeof localization === \"string\", \"getTemplateMessage({ localization }) -- localization must be a string\");\n  (0,_onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.invariant)(template != undefined, \"getTemplateMessage({ template }) -- template must be defined\");\n  (0,_onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.invariant)(typeof template === \"object\", \"getTemplateMessage({ template }) -- template must be an object\");\n  (0,_onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.invariant)(typeof template.f_type === \"InteractionTemplate\", \"getTemplateMessage({ template }) -- template object must be an InteractionTemplate\");\n  switch (template.f_version) {\n    case \"1.1.0\":\n      const msg = template?.data?.messages?.find(a => a.key === messageKey);\n      if (!msg) return undefined;\n      const lzn = msg?.i18n?.find(a => a.tag === localization);\n      if (!lzn) return undefined;\n      return lzn.translation;\n    case \"1.0.0\":\n      return template?.data?.messages?.[messageKey]?.i18n?.[localization];\n    default:\n      throw new Error(\"getTemplateArgumentMessage Error: Unsupported template version\");\n  }\n}\n\n/**\n * @description Gets Interaction Template argument message by message key, argument label, and localization\n *\n * @param {object} opts\n * @param {string} opts.localization [localization=\"en-US\"] - Localization to get message for\n * @param {string} opts.argumentLabel - Argument label to get message for\n * @param {string} opts.messageKey - Message key to get message for\n * @param {object} opts.template - Interaction Template to get message from\n * @returns {string} - Message\n */\nfunction getTemplateArgumentMessage(_ref) {\n  let {\n    localization = \"en-US\",\n    argumentLabel,\n    messageKey,\n    template\n  } = _ref;\n  (0,_onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.invariant)(messageKey, \"getTemplateArgumentMessage({ messageKey }) -- messageKey must be defined\");\n  (0,_onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.invariant)(typeof messageKey === \"string\", \"getTemplateArgumentMessage({ messageKey }) -- messageKey must be a string\");\n  (0,_onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.invariant)(argumentLabel, \"getTemplateArgumentMessage({ argumentLabel }) -- argumentLabel must be defined\");\n  (0,_onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.invariant)(typeof messageKey === \"string\", \"getTemplateArgumentMessage({ argumentLabel }) -- argumentLabel must be a string\");\n  (0,_onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.invariant)(localization, \"getTemplateArgumentMessage({ localization }) -- localization must be defined\");\n  (0,_onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.invariant)(typeof localization === \"string\", \"getTemplateArgumentMessage({ localization }) -- localization must be a string\");\n  (0,_onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.invariant)(template != undefined, \"getTemplateArgumentMessage({ template }) -- template must be defined\");\n  (0,_onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.invariant)(typeof template === \"object\", \"getTemplateArgumentMessage({ template }) -- template must be an object\");\n  (0,_onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.invariant)(typeof template.f_type === \"InteractionTemplate\", \"getTemplateArgumentMessage({ template }) -- template object must be an InteractionTemplate\");\n  switch (template.f_version) {\n    case \"1.1.0\":\n      const param = template?.data?.parameters?.find(a => a.label === argumentLabel);\n      if (!param) return undefined;\n      const message = param?.messages?.find(a => a.key === messageKey);\n      if (!message) return undefined;\n      const lzn = message?.i18n?.find(a => a.tag === localization);\n      if (!lzn) return undefined;\n      return lzn.translation;\n    case \"1.0.0\":\n      return template?.data?.arguments?.[argumentLabel]?.messages?.[messageKey]?.i18n?.[localization];\n    default:\n      throw new Error(\"getTemplateArgumentMessage Error: Unsupported template version\");\n  }\n}\n\nvar index = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  deriveCadenceByNetwork: deriveCadenceByNetwork,\n  generateDependencyPin: generateDependencyPin,\n  generateDependencyPinAtLatestSealedBlock: generateDependencyPinAtLatestSealedBlock,\n  generateTemplateId: generateTemplateId,\n  getInteractionTemplateAudits: getInteractionTemplateAudits,\n  getTemplateArgumentMessage: getTemplateArgumentMessage,\n  getTemplateMessage: getTemplateMessage,\n  verifyDependencyPinsSame: verifyDependencyPinsSame,\n  verifyDependencyPinsSameAtLatestSealedBlock: verifyDependencyPinsSameAtLatestSealedBlock,\n  verifyGeneratedTemplateId: verifyGeneratedTemplateId\n});\n\nasync function fetchServices(servicesURL, code) {\n  if (servicesURL == null || code == null) return [];\n  const url = new URL(servicesURL);\n  url.searchParams.append(\"code\", code);\n  const resp = await fetch(url, {\n    method: \"GET\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  }).then(d => d.json());\n  if (Array.isArray(resp)) return resp;\n\n  // Backwards compatibility for First-Gen Wallet Providers\n  const services = [];\n\n  // Convert authorizations into authz services\n  if (Array.isArray(resp.authorizations)) {\n    for (let service of resp.authorizations) {\n      services.push({\n        type: \"authz\",\n        keyId: resp.keyId,\n        ...service\n      });\n    }\n  }\n\n  // Convert Provider info into an authn service\n  if (resp.provider != null) {\n    services.push({\n      type: \"authn\",\n      id: \"wallet-provider#authn\",\n      ...resp.provider\n    });\n  }\n  return services;\n}\n\nfunction mergeServices() {\n  let sx1 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  let sx2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  // TODO: Make this smarter\n  return [...sx1, ...sx2];\n}\n\n// {\n//   \"f_type\": \"Service\",\n//   \"f_vsn\": \"1.0.0\",\n//   \"type\": \"authn\",\n//   \"uid\": \"uniqueDedupeKey\",\n//   \"endpoint\": \"https://rawr\",\n//   \"id\": \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\", // wallets internal id for the user\n//   \"identity\": {\n//     \"address\": \"0x____\"\n//   },\n//   \"provider\": {\n//     \"address\": \"0x____\",\n//     \"name\": \"Best Wallet\",\n//     \"description\": \"The Best Wallet\"\n//     \"icon\": \"https://\",\n//   }\n// }\nfunction normalizeAuthn(service) {\n  if (service == null) return null;\n  if (!service[\"f_vsn\"]) {\n    return {\n      ...SERVICE_PRAGMA,\n      type: service.type,\n      uid: service.id,\n      endpoint: service.authn,\n      id: service.pid,\n      provider: {\n        address: (0,_onflow_util_address__WEBPACK_IMPORTED_MODULE_6__.withPrefix)(service.addr),\n        name: service.name,\n        icon: service.icon\n      }\n    };\n  }\n  switch (service[\"f_vsn\"]) {\n    case \"1.0.0\":\n      return service;\n    default:\n      return null;\n  }\n}\n\n// {\n//   \"f_type\": \"service\",\n//   \"f_vsn\": \"1.0.0\",\n//   \"type\": \"authz\",\n//   \"uid\": \"uniqueDedupeKey\",\n//   \"endpoint\": \"https://rawr\",\n//   \"method\": \"HTTP/POST\", // HTTP/POST | IFRAME/RPC | HTTP/RPC\n//   \"identity\": {\n//      \"address\": \"0x______\",\n//      \"keyId\": 0,\n//   },\n//   \"data\": {}, // included in body of authz request\n//   \"params\": {}, // included as query params on endpoint url\n// }\nfunction normalizeAuthz(service) {\n  if (service == null) return null;\n  if (!service[\"f_vsn\"]) {\n    return {\n      ...SERVICE_PRAGMA,\n      type: service.type,\n      uid: service.id,\n      endpoint: service.endpoint,\n      method: service.method,\n      identity: {\n        ...IDENTITY_PRAGMA,\n        address: (0,_onflow_util_address__WEBPACK_IMPORTED_MODULE_6__.withPrefix)(service.addr),\n        keyId: service.keyId\n      },\n      params: service.params,\n      data: service.data\n    };\n  }\n  switch (service[\"f_vsn\"]) {\n    case \"1.0.0\":\n      return service;\n    default:\n      return null;\n  }\n}\n\n// {\n//   \"f_type\": \"service\",\n//   \"f_vsn\": \"1.0.0\",\n//   \"type\": \"pre-authz\",\n//   \"uid\": \"uniqueDedupeKey\",\n//   \"endpoint\": \"https://rawr\",\n//   \"method\": \"HTTP/POST\", // HTTP/POST | IFRAME/RPC | HTTP/RPC\n//   \"identity\": {\n//      \"address\": \"0x______\",\n//      \"keyId\": 0,\n//   },\n//   \"data\": {}, // included in body of pre-authz request\n//   \"params\": {}, // included as query params on endpoint url\n// }\nfunction normalizePreAuthz(service) {\n  if (service == null) return null;\n  if (!service[\"f_vsn\"]) {\n    return {\n      ...SERVICE_PRAGMA,\n      type: service.type,\n      uid: service.id,\n      endpoint: service.endpoint,\n      method: service.method,\n      identity: {\n        ...IDENTITY_PRAGMA,\n        address: (0,_onflow_util_address__WEBPACK_IMPORTED_MODULE_6__.withPrefix)(service.addr),\n        keyId: service.keyId\n      },\n      params: service.params,\n      data: service.data\n    };\n  }\n  switch (service[\"f_vsn\"]) {\n    case \"1.0.0\":\n      return service;\n    default:\n      return null;\n  }\n}\n\n// {\n//    \"f_type\": \"Service\",\n//    \"f_vsn\": \"1.0.0\",\n//    \"type\": \"frame\",\n//    \"endpoint\": \"https://rawr\",\n//    \"data\": {},   // Sent to frame when ready\n//    \"params\": {}, // include in query params on frame\n// }\nfunction normalizeFrame(service) {\n  if (service == null) return null;\n  if (!service[\"f_vsn\"]) {\n    return {\n      old: service,\n      ...SERVICE_PRAGMA,\n      type: \"frame\",\n      endpoint: service.endpoint,\n      params: service.params || {},\n      data: service.data || {}\n    };\n  }\n  switch (service[\"f_vsn\"]) {\n    case \"1.0.0\":\n      return service;\n    default:\n      return null;\n  }\n}\n\n// {\n//    \"f_type\": \"Service\",\n//    \"f_vsn\": \"1.0.0\",\n//    \"type\": \"back-channel-rpc\",\n//    \"endpoint\": \"https://rawr\",\n//    \"method\": \"HTTP/GET\", // HTTP/GET | HTTP/POST\n//    \"data\": {},           // included in body of rpc\n//    \"params\": {},         // included as query params on endpoint url\n// }\nfunction normalizeBackChannelRpc(service) {\n  if (service == null) return null;\n  if (!service[\"f_vsn\"]) {\n    return {\n      ...SERVICE_PRAGMA,\n      type: \"back-channel-rpc\",\n      endpoint: service.endpoint,\n      method: service.method,\n      params: service.params || {},\n      data: service.data || {}\n    };\n  }\n  switch (service[\"f_vsn\"]) {\n    case \"1.0.0\":\n      return service;\n    default:\n      return null;\n  }\n}\n\n// {\n//   \"f_type\": \"Service\",\n//   \"f_vsn\": \"1.0.0\",\n//   \"type\": \"open-id\",\n//   \"uid\": \"uniqueDedupeKey\",\n//   \"method: \"data\",\n//   \"data\": {\n//      \"profile\": {\n//        \"name\": \"Bob\",\n//        \"family_name\": \"Builder\",\n//        \"given_name\": \"Robert\",\n//        \"middle_name\": \"the\",\n//        \"nickname\": \"Bob the Builder\",\n//        \"perferred_username\": \"bob\",\n//        \"profile\": \"https://www.bobthebuilder.com/\",\n//        \"picture\": \"https://avatars.onflow.org/avatar/bob\",\n//        \"gender\": \"...\",\n//        \"birthday\": \"2001-01-18\",\n//        \"zoneinfo\": \"America/Vancouver\",\n//        \"locale\": \"en-us\",\n//        \"updated_at\": \"1614970797388\"\n//      },\n//      \"email\": {\n//        \"email\": \"bob@bob.bob\",\n//        \"email_verified\": true\n//      },\n//      \"address\": {\n//        \"address\": \"One Apple Park Way, Cupertino, CA 95014, USA\"\n//      },\n//      \"phone\": {\n//        \"phone_number\": \"+1 (xxx) yyy-zzzz\",\n//        \"phone_number_verified\": true\n//      },\n//      \"social\": {\n//        \"twitter\": \"@_qvvg\",\n//        \"twitter_verified\": true\n//      },\n//   }\n// }\nfunction normalizeOpenId(service) {\n  if (service == null) return null;\n  switch (service[\"f_vsn\"]) {\n    case \"1.0.0\":\n      return service;\n    default:\n      return null;\n  }\n}\n\n// {\n//   \"f_type\": \"Service\",\n//   \"f_vsn\": \"1.0.0\",\n//   \"type\": \"user-signature\",\n//   \"uid\": \"uniqueDedupeKey\",\n//   \"endpoint\": \"https://rawr\",\n//   \"method\": \"IFRAME/RPC\", // HTTP/POST | IFRAME/RPC | HTTP/RPC\n//   \"id\": \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\", // wallets internal id for the user\n//   \"data\": {}, // included in body of user-signature request\n//   \"params\": {}, // included as query params on endpoint url\n// }\nfunction normalizeUserSignature(service) {\n  if (service == null) return null;\n  if (!service[\"f_vsn\"]) {\n    throw new Error(\"Invalid user-signature service\");\n  }\n  switch (service[\"f_vsn\"]) {\n    case \"1.0.0\":\n      return service;\n    default:\n      return null;\n  }\n}\n\n// {\n//    \"f_type\": \"Service\",\n//    \"f_vsn\": \"1.0.0\",\n//    type: \"local-view\",\n//    method: \"VIEW/IFRAME\",\n//    endpoint: \"https://woot.org/authz/local\",\n//    data: {},\n//    params: {},\n// }\nfunction normalizeLocalView(resp) {\n  if (resp == null) return null;\n  if (resp.method == null) {\n    resp = {\n      ...resp,\n      type: \"local-view\",\n      method: \"VIEW/IFRAME\"\n    };\n  }\n  if (!resp[\"f_vsn\"]) {\n    return {\n      ...SERVICE_PRAGMA,\n      type: resp.type || \"local-view\",\n      method: resp.method,\n      endpoint: resp.endpoint,\n      data: resp.data || {},\n      params: resp.params || {}\n    };\n  }\n  switch (resp[\"f_vsn\"]) {\n    case \"1.0.0\":\n      return resp;\n    default:\n      return null;\n  }\n}\n\n// {\n//   \"f_type\": \"Service\",                    // Its a service!\n//   \"f_vsn\": \"1.0.0\",                       // Follows the v1.0.0 spec for the service\n//   \"type\": \"account-proof\",                // the type of service it is\n//   \"method\": \"DATA\",                       // Its data!\n//   \"uid\": \"awesome-wallet#account-proof\",  // A unique identifier for the service\n//   \"data\": {\n//     \"f_type\": \"account-proof\",\n//     \"f_vsn\": \"1.0.0\",\n//     \"nonce\": \"0A1BC2FF\",                  // Nonce signed by the current account-proof (minimum 32 bytes in total, i.e 64 hex characters)\n//     \"address\": \"0xUSER\",                  // The user's address (8 bytes, i.e 16 hex characters)\n//     \"signature\": CompositeSignature,      // address (sans-prefix), keyId, signature (hex)\n// }\n\nfunction normalizeAccountProof(service) {\n  if (service == null) return null;\n  if (!service[\"f_vsn\"]) {\n    throw new Error(`FCL Normalizer Error: Invalid account-proof service`);\n  }\n  switch (service[\"f_vsn\"]) {\n    case \"1.0.0\":\n      return service;\n    default:\n      return null;\n  }\n}\n\n// {\n//   \"f_type\": \"Service\",\n//   \"f_vsn\": \"1.0.0\",\n//   \"type\": \"authn-refresh\",\n//   \"uid\": \"uniqueDedupeKey\",\n//   \"endpoint\": \"https://rawr\",\n//   \"method\": \"HTTP/POST\",  // \"HTTP/POST\", // HTTP/POST | IFRAME/RPC | HTTP/RPC\n//   \"id\": \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\", // wallets internal id for the user\n//   \"data\": {}, // included in body of request\n//   \"params\": {}, // included as query params on endpoint url\n// }\nfunction normalizeAuthnRefresh(service) {\n  if (service == null) return null;\n  if (!service[\"f_vsn\"]) {\n    throw new Error(\"Invalid authn-refresh service\");\n  }\n  switch (service[\"f_vsn\"]) {\n    case \"1.0.0\":\n      return service;\n    default:\n      return null;\n  }\n}\n\nfunction normalizeServices(services, data) {\n  return services.map(service => normalizeService(service, data)).filter(Boolean);\n}\nconst serviceNormalizers = {\n  \"back-channel-rpc\": normalizeBackChannelRpc,\n  \"pre-authz\": normalizePreAuthz,\n  authz: normalizeAuthz,\n  authn: normalizeAuthn,\n  frame: normalizeFrame,\n  \"open-id\": normalizeOpenId,\n  \"user-signature\": normalizeUserSignature,\n  \"local-view\": normalizeLocalView,\n  \"account-proof\": normalizeAccountProof,\n  \"authn-refresh\": normalizeAuthnRefresh\n};\nfunction normalizeService(service, data) {\n  try {\n    var normalized = serviceNormalizers[service.type](service, data);\n    return normalized;\n  } catch (error) {\n    console.error(`Unrecognized FCL Service Type [${service.type}]`, service, error);\n    return service;\n  }\n}\n\nfunction serviceOfType() {\n  let services = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  let type = arguments.length > 1 ? arguments[1] : undefined;\n  // Find the greatest version of the service type\n  return services.reduce((mostRecent, service) => service.type === type ? !mostRecent || _onflow_util_semver__WEBPACK_IMPORTED_MODULE_14__.compare(service.f_vsn, mostRecent.f_vsn) > 0 ? service : mostRecent : mostRecent, null);\n}\n\nfunction deriveCompositeId(authn) {\n  return _onflow_rlp__WEBPACK_IMPORTED_MODULE_7__.encode([authn.provider?.address || authn.provider?.name || \"UNSPECIFIED\", authn.id]).toString(\"hex\");\n}\nfunction normalizeData(data) {\n  data.addr = data.addr ? (0,_onflow_util_address__WEBPACK_IMPORTED_MODULE_6__.withPrefix)(data.addr) : null;\n  data.paddr = data.paddr ? (0,_onflow_util_address__WEBPACK_IMPORTED_MODULE_6__.withPrefix)(data.paddr) : null;\n  return data;\n}\nasync function buildUser(data) {\n  data = normalizeData(data);\n  var services = normalizeServices(mergeServices(data.services || [], await fetchServices(data.hks, data.code)));\n  const authn = serviceOfType(services, \"authn\");\n  return {\n    ...USER_PRAGMA,\n    addr: (0,_onflow_util_address__WEBPACK_IMPORTED_MODULE_6__.withPrefix)(data.addr),\n    cid: deriveCompositeId(authn),\n    loggedIn: true,\n    services: services,\n    expiresAt: data.expires\n  };\n}\n\nconst FCL_WC_SERVICE_METHOD = \"WC/RPC\";\nconst isServerSide = typeof window === \"undefined\";\n\n// Utility to notify the user if the Walletconnect service plugin has not been loaded\nfunction checkWalletConnectEnabled() {\n  if (isServerSide) return;\n  const serviceRegistry = getServiceRegistry();\n  const strategies = serviceRegistry.getStrategies();\n  if (!strategies.includes(FCL_WC_SERVICE_METHOD)) {\n    _onflow_util_logger__WEBPACK_IMPORTED_MODULE_5__.log({\n      title: \"FCL WalletConnect Service Plugin\",\n      level: _onflow_util_logger__WEBPACK_IMPORTED_MODULE_5__.LEVELS.error,\n      message: \"All dApps are expected to register for a WalletConnect projectId & add this to their FCL configuration.  If you do not do so, users will be unable to use certain wallets to interact with your dApp.  See https://developers.flow.com/tools/clients/fcl-js/configure-fcl for more information.\"\n    });\n  }\n}\n\nconst AbortController = globalThis.AbortController || __webpack_require__(/*! abort-controller */ \"(ssr)/../node_modules/abort-controller/dist/abort-controller.js\");\nconst execStrategy = async _ref => {\n  let {\n    service,\n    body,\n    config,\n    abortSignal,\n    customRpc,\n    user,\n    opts\n  } = _ref;\n  const strategy = getServiceRegistry().getStrategy(service.method);\n  return strategy({\n    service,\n    body,\n    config,\n    abortSignal,\n    customRpc,\n    opts,\n    user\n  });\n};\nasync function execService(_ref2) {\n  let {\n    service,\n    msg = {},\n    config = {},\n    opts = {},\n    platform,\n    abortSignal = new AbortController().signal,\n    execStrategy: _execStrategy,\n    user\n  } = _ref2;\n  // Notify the developer if WalletConnect is not enabled\n  checkWalletConnectEnabled();\n  msg.data = service.data;\n  const execConfig = {\n    services: await configLens(/^service\\./),\n    app: await configLens(/^app\\.detail\\./),\n    client: {\n      ...config.client,\n      platform,\n      fclVersion: VERSION,\n      fclLibrary: \"https://github.com/onflow/fcl-js\",\n      hostname: window?.location?.hostname ?? null,\n      network: await getChainId(opts)\n    }\n  };\n  try {\n    const res = await (_execStrategy || execStrategy)({\n      service,\n      body: msg,\n      config: execConfig,\n      opts,\n      user,\n      abortSignal\n    });\n    if (res.status === \"REDIRECT\") {\n      (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_2__.invariant)(service.type === res.data.type, \"Cannot shift recursive service type in execService\");\n      return await execService({\n        service: res.data,\n        msg,\n        config: execConfig,\n        opts,\n        abortSignal,\n        platform,\n        user\n      });\n    } else {\n      return res;\n    }\n  } catch (error) {\n    (0,_onflow_util_logger__WEBPACK_IMPORTED_MODULE_5__.log)({\n      title: `Error on execService ${service?.type}`,\n      message: error,\n      level: _onflow_util_logger__WEBPACK_IMPORTED_MODULE_5__.LEVELS.error\n    });\n    throw error;\n  }\n}\n\n// {\n//    \"f_type\": \"CompositeSignature\",\n//    \"f_vsn\": \"1.0.0\",\n//    \"addr\": \"_____\",         // sans-prefix\n//    \"signature\": \"adfe1234\", // hex\n//    \"keyId\": 3,\n// }\nfunction normalizeCompositeSignature(resp) {\n  if (resp == null) return null;\n  if (!resp[\"f_vsn\"]) {\n    return {\n      ...COMPOSITE_SIGNATURE_PRAGMA,\n      addr: (0,_onflow_util_address__WEBPACK_IMPORTED_MODULE_6__.sansPrefix)(resp.addr || resp.address),\n      signature: resp.signature || resp.sig,\n      keyId: resp.keyId\n    };\n  }\n  switch (resp[\"f_vsn\"]) {\n    case \"1.0.0\":\n      return resp;\n    default:\n      return null;\n  }\n}\n\n/**\n * @typedef {import(\"@onflow/typedefs\").CurrentUser} CurrentUser\n * @typedef {import(\"@onflow/typedefs\").CompositeSignature} CompositeSignature\n */\n\nconst isFn = d => typeof d === \"function\";\nconst NAME = \"CURRENT_USER\";\nconst UPDATED = \"CURRENT_USER/UPDATED\";\nconst SNAPSHOT = \"SNAPSHOT\";\nconst SET_CURRENT_USER = \"SET_CURRENT_USER\";\nconst DEL_CURRENT_USER = \"DEL_CURRENT_USER\";\nconst DATA = `{\n  \"f_type\": \"User\",\n  \"f_vsn\": \"1.0.0\",\n  \"addr\":null,\n  \"cid\":null,\n  \"loggedIn\":null,\n  \"expiresAt\":null,\n  \"services\":[]\n}`;\nconst getStoredUser = async storage => {\n  const fallback = JSON.parse(DATA);\n  const stored = await storage.get(NAME);\n  if (stored != null && fallback[\"f_vsn\"] !== stored[\"f_vsn\"]) {\n    storage.removeItem(NAME);\n    return fallback;\n  }\n  return stored || fallback;\n};\nconst makeHandlers = cfg => {\n  // Wrapper for backwards compatibility\n  const getStorageProvider = async () => {\n    if (cfg.getStorageProvider) return await cfg.getStorageProvider();\n    return await _onflow_config__WEBPACK_IMPORTED_MODULE_4__.config.first([\"fcl.storage\", \"fcl.storage.default\"]);\n  };\n  return {\n    [_onflow_util_actor__WEBPACK_IMPORTED_MODULE_9__.INIT]: async ctx => {\n      if (typeof window === \"undefined\") {\n        console.warn(`\n        %cFCL Warning\n        ============================\n        \"currentUser\" is only available in the browser.\n        For more info, please see the docs: https://docs.onflow.org/fcl/\n        ============================\n        `, \"font-weight:bold;font-family:monospace;\");\n      }\n      ctx.merge(JSON.parse(DATA));\n      const storage = await getStorageProvider();\n      if (storage.can) {\n        const user = await getStoredUser(storage);\n        if (notExpired(user)) ctx.merge(user);\n      }\n    },\n    [_onflow_util_actor__WEBPACK_IMPORTED_MODULE_9__.SUBSCRIBE]: (ctx, letter) => {\n      ctx.subscribe(letter.from);\n      ctx.send(letter.from, UPDATED, {\n        ...ctx.all()\n      });\n    },\n    [_onflow_util_actor__WEBPACK_IMPORTED_MODULE_9__.UNSUBSCRIBE]: (ctx, letter) => {\n      ctx.unsubscribe(letter.from);\n    },\n    [SNAPSHOT]: async (ctx, letter) => {\n      letter.reply({\n        ...ctx.all()\n      });\n    },\n    [SET_CURRENT_USER]: async (ctx, letter, data) => {\n      ctx.merge(data);\n      const storage = await getStorageProvider();\n      if (storage.can) storage.put(NAME, ctx.all());\n      ctx.broadcast(UPDATED, {\n        ...ctx.all()\n      });\n    },\n    [DEL_CURRENT_USER]: async (ctx, letter) => {\n      ctx.merge(JSON.parse(DATA));\n      const storage = await getStorageProvider();\n      if (storage.can) storage.put(NAME, ctx.all());\n      ctx.broadcast(UPDATED, {\n        ...ctx.all()\n      });\n    }\n  };\n};\nconst spawnCurrentUser = cfg => (0,_onflow_util_actor__WEBPACK_IMPORTED_MODULE_9__.spawn)(makeHandlers(cfg), NAME);\nfunction notExpired(user) {\n  return user.expiresAt == null || user.expiresAt === 0 || user.expiresAt > Date.now();\n}\nasync function getAccountProofData() {\n  let accountProofDataResolver = await _onflow_config__WEBPACK_IMPORTED_MODULE_4__.config.get(\"fcl.accountProof.resolver\");\n  if (accountProofDataResolver == null) return;\n  if (!isFn(accountProofDataResolver)) {\n    (0,_onflow_util_logger__WEBPACK_IMPORTED_MODULE_5__.log)({\n      title: \"Account Proof Data Resolver must be a function\",\n      message: `Check fcl.accountProof.resolver configuration.\n                Expected: fcl.accountProof.resolver: async () => { ... }\n                Received: fcl.accountProof.resolver: ${typeof accountProofDataResolver}\n                `,\n      level: _onflow_util_logger__WEBPACK_IMPORTED_MODULE_5__.LEVELS.warn\n    });\n    return;\n  }\n  const accountProofData = {\n    ...(await accountProofDataResolver())\n  };\n  const origin = window?.location?.origin;\n  if (accountProofData.appIdentifier) {\n    if (origin) {\n      _onflow_util_logger__WEBPACK_IMPORTED_MODULE_5__.log.deprecate({\n        pkg: \"FCL\",\n        subject: \"appIdentifier in fcl.accountProof.resolver\",\n        message: \"Manually set app identifiers in the account proof resolver function are now deprecated.  These are now automatically set to the application origin URL by FCL\",\n        transition: \"https://github.com/onflow/flow-js-sdk/blob/master/packages/fcl/TRANSITIONS.md#0002-deprecate-appIdentifier-field-in-account-proof-resolver\"\n      });\n      (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_2__.invariant)(typeof accountProofData.appIdentifier === \"string\", \"appIdentifier must be a string\");\n    }\n  } else {\n    (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_2__.invariant)(origin, \"The appIdentifier (origin) could not be inferred from the window.location.origin.  Please set the appIdentifier manually in the fcl.accountProof.resolver function.\");\n    accountProofData.appIdentifier = origin;\n  }\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_2__.invariant)(/^[0-9a-f]+$/i.test(accountProofData.nonce), \"Nonce must be a hex string\");\n  return accountProofData;\n}\nconst makeConfig = async _ref => {\n  let {\n    discoveryAuthnInclude,\n    discoveryAuthnExclude,\n    discoveryFeaturesSuggested\n  } = _ref;\n  return {\n    client: {\n      discoveryAuthnInclude,\n      discoveryAuthnExclude,\n      discoveryFeaturesSuggested,\n      clientServices: await makeDiscoveryServices(),\n      supportedStrategies: getServiceRegistry().getStrategies()\n    }\n  };\n};\n\n/**\n * @description - Factory function to get the authenticate method\n * @param {CurrentUserConfig} config - Current User Configuration\n */\nconst getAuthenticate = config =>\n/**\n * @description - Authenticate a user\n * @param {object} [opts] - Options\n * @param {object} [opts.service] - Optional service to use for authentication\n * @param {boolean} [opts.redir] - Optional redirect flag\n * @param {boolean} [opts.forceReauth] - Optional force re-authentication flag\n * @returns\n */\nasync function () {\n  let {\n    service,\n    redir = false,\n    forceReauth = false\n  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  if (service && !service?.provider?.is_installed && service?.provider?.requires_install) {\n    window.location.href = service?.provider?.install_link;\n    return;\n  }\n  return new Promise(async (resolve, reject) => {\n    spawnCurrentUser(config);\n    const opts = {\n      redir\n    };\n    const user = await getSnapshot(config)();\n    const refreshService = serviceOfType(user.services, \"authn-refresh\");\n    let accountProofData;\n    if (user.loggedIn && !forceReauth) {\n      if (refreshService) {\n        try {\n          const response = await execService({\n            service: refreshService,\n            msg: accountProofData,\n            opts,\n            platform: config.platform,\n            user\n          });\n          (0,_onflow_util_actor__WEBPACK_IMPORTED_MODULE_9__.send)(NAME, SET_CURRENT_USER, await buildUser(response));\n        } catch (error) {\n          (0,_onflow_util_logger__WEBPACK_IMPORTED_MODULE_5__.log)({\n            title: `${error.name} Could not refresh wallet authentication.`,\n            message: error.message,\n            level: _onflow_util_logger__WEBPACK_IMPORTED_MODULE_5__.LEVELS.error\n          });\n        } finally {\n          return resolve(await getSnapshot(config)());\n        }\n      } else {\n        return resolve(user);\n      }\n    }\n    try {\n      accountProofData = await getAccountProofData();\n    } catch (error) {\n      (0,_onflow_util_logger__WEBPACK_IMPORTED_MODULE_5__.log)({\n        title: `${error.name} On Authentication: Could not resolve account proof data.`,\n        message: error.message,\n        level: _onflow_util_logger__WEBPACK_IMPORTED_MODULE_5__.LEVELS.error\n      });\n      return reject(error);\n    }\n    try {\n      const discoveryService = await getDiscoveryService(service);\n      const response = await execService({\n        service: discoveryService,\n        msg: accountProofData,\n        config: await makeConfig(discoveryService),\n        opts,\n        platform: config.platform,\n        execStrategy: config.discovery?.execStrategy,\n        user\n      });\n      (0,_onflow_util_actor__WEBPACK_IMPORTED_MODULE_9__.send)(NAME, SET_CURRENT_USER, await buildUser(response));\n    } catch (error) {\n      (0,_onflow_util_logger__WEBPACK_IMPORTED_MODULE_5__.log)({\n        title: `${error} On Authentication`,\n        message: error,\n        level: _onflow_util_logger__WEBPACK_IMPORTED_MODULE_5__.LEVELS.error\n      });\n    } finally {\n      resolve(await getSnapshot(config)());\n    }\n  });\n};\n\n/**\n * @description - Factory function to get the unauthenticate method\n * @param {CurrentUserConfig} config - Current User Configuration\n */\nfunction getUnauthenticate(config) {\n  /**\n   * @description - Unauthenticate a user\n   */\n  return function unauthenticate() {\n    spawnCurrentUser(config);\n    (0,_onflow_util_actor__WEBPACK_IMPORTED_MODULE_9__.send)(NAME, DEL_CURRENT_USER);\n  };\n}\nconst normalizePreAuthzResponse = authz => ({\n  f_type: \"PreAuthzResponse\",\n  f_vsn: \"1.0.0\",\n  proposer: (authz || {}).proposer,\n  payer: (authz || {}).payer || [],\n  authorization: (authz || {}).authorization || []\n});\n\n/**\n * @description - Factory function to get the resolvePreAuthz method\n * @param {CurrentUserConfig} config - Current User Configuration\n */\nconst getResolvePreAuthz = config => (authz, _ref2) => {\n  let {\n    user\n  } = _ref2;\n  const resp = normalizePreAuthzResponse(authz);\n  const axs = [];\n  if (resp.proposer != null) axs.push([\"PROPOSER\", resp.proposer]);\n  for (let az of resp.payer || []) axs.push([\"PAYER\", az]);\n  for (let az of resp.authorization || []) axs.push([\"AUTHORIZER\", az]);\n  var result = axs.map(_ref3 => {\n    let [role, az] = _ref3;\n    return {\n      tempId: [az.identity.address, az.identity.keyId].join(\"|\"),\n      addr: az.identity.address,\n      keyId: az.identity.keyId,\n      signingFunction(signable) {\n        return execService({\n          service: az,\n          msg: signable,\n          platform: config.platform,\n          user\n        });\n      },\n      role: {\n        proposer: role === \"PROPOSER\",\n        payer: role === \"PAYER\",\n        authorizer: role === \"AUTHORIZER\"\n      }\n    };\n  });\n  return result;\n};\n\n/**\n * @description - Factory function to get the authorization method\n *\n * @param {CurrentUserConfig} config - Current User Configuration\n */\nconst getAuthorization = config =>\n/**\n * @description - Produces the needed authorization details for the current user to submit transactions to Flow\n * It defines a signing function that connects to a user's wallet provider to produce signatures to submit transactions.\n *\n * @param {object} account - Account object\n * @returns {Promise<object>} - Account object with signing function\n * */\nasync account => {\n  spawnCurrentUser(config);\n  return {\n    ...account,\n    tempId: \"CURRENT_USER\",\n    async resolve(account, preSignable) {\n      const user = await getAuthenticate(config)({\n        redir: true\n      });\n      const authz = serviceOfType(user.services, \"authz\");\n      const preAuthz = serviceOfType(user.services, \"pre-authz\");\n      if (preAuthz) return getResolvePreAuthz(config)(await execService({\n        service: preAuthz,\n        msg: preSignable,\n        platform: config.platform,\n        user\n      }), {\n        user\n      });\n      if (authz) {\n        return {\n          ...account,\n          tempId: \"CURRENT_USER\",\n          resolve: null,\n          addr: (0,_onflow_util_address__WEBPACK_IMPORTED_MODULE_6__.sansPrefix)(authz.identity.address),\n          keyId: authz.identity.keyId,\n          sequenceNum: null,\n          signature: null,\n          async signingFunction(signable) {\n            return normalizeCompositeSignature(await execService({\n              service: authz,\n              msg: signable,\n              opts: {\n                includeOlderJsonRpcCall: true\n              },\n              platform: config.platform,\n              user\n            }));\n          }\n        };\n      }\n      throw new Error(\"No Authz or PreAuthz Service configured for CURRENT_USER\");\n    }\n  };\n};\n\n/**\n * @description - Factory function to get the subscribe method\n * @param {CurrentUserConfig} config - Current User Configuration\n */\nfunction getSubscribe(config) {\n  /**\n   * @description\n   * The callback passed to subscribe will be called when the user authenticates and un-authenticates, making it easy to update the UI accordingly.\n   *\n   * @param {Function} callback - Callback function\n   * @returns {Function} - Unsubscribe function\n   */\n  return function subscribe(callback) {\n    spawnCurrentUser(config);\n    const EXIT = \"@EXIT\";\n    const self = (0,_onflow_util_actor__WEBPACK_IMPORTED_MODULE_9__.spawn)(async ctx => {\n      ctx.send(NAME, _onflow_util_actor__WEBPACK_IMPORTED_MODULE_9__.SUBSCRIBE);\n      while (1) {\n        const letter = await ctx.receive();\n        if (letter.tag === EXIT) {\n          ctx.send(NAME, _onflow_util_actor__WEBPACK_IMPORTED_MODULE_9__.UNSUBSCRIBE);\n          return;\n        }\n        callback(letter.data);\n      }\n    });\n    return () => (0,_onflow_util_actor__WEBPACK_IMPORTED_MODULE_9__.send)(self, EXIT);\n  };\n}\n\n/**\n * @description - Factory function to get the snapshot method\n * @param {CurrentUserConfig} config - Current User Configuration\n */\nfunction getSnapshot(config) {\n  /**\n   * @description - Gets the current user\n   * @returns {Promise<CurrentUser>} - User object\n   */\n  return function snapshot() {\n    spawnCurrentUser(config);\n    return (0,_onflow_util_actor__WEBPACK_IMPORTED_MODULE_9__.send)(NAME, SNAPSHOT, null, {\n      expectReply: true,\n      timeout: 0\n    });\n  };\n}\n\n/**\n * Resolves the current user as an argument\n * @param {CurrentUserConfig} config - Current User Configuration\n *\n */\nconst getResolveArgument = config => async () => {\n  const {\n    addr\n  } = await getAuthenticate(config)();\n  return (0,_onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.arg)((0,_onflow_util_address__WEBPACK_IMPORTED_MODULE_6__.withPrefix)(addr), _onflow_types__WEBPACK_IMPORTED_MODULE_1__.Address);\n};\nconst makeSignable = msg => {\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_2__.invariant)(/^[0-9a-f]+$/i.test(msg), \"Message must be a hex string\");\n  return {\n    message: msg\n  };\n};\n\n/**\n * @description - Factory function to get the signUserMessage method\n * @param {CurrentUserConfig} config - Current User Configuration\n */\nconst getSignUserMessage = config =>\n/**\n * @description - A method to use allowing the user to personally sign data via FCL Compatible Wallets/Services.\n * @param {string} msg - Message to sign\n * @returns {Promise<CompositeSignature[]>} - Array of CompositeSignatures\n */\nasync msg => {\n  spawnCurrentUser(config);\n  const user = await getAuthenticate(config)({\n    redir: true\n  });\n  const signingService = serviceOfType(user.services, \"user-signature\");\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_2__.invariant)(signingService, \"Current user must have authorized a signing service.\");\n  try {\n    const response = await execService({\n      service: signingService,\n      msg: makeSignable(msg),\n      platform: config.platform,\n      user\n    });\n    if (Array.isArray(response)) {\n      return response.map(compSigs => normalizeCompositeSignature(compSigs));\n    } else {\n      return [normalizeCompositeSignature(response)];\n    }\n  } catch (error) {\n    return error;\n  }\n};\n\n/**\n * @typedef {object} CurrentUserConfig - Current User Configuration\n * @property {string} platform - Platform\n * @property {object} [discovery] - FCL Discovery Configuration\n * @property {() => Promise<import(\"../utils/storage\").StorageProvider>} [getStorageProvider] - Storage Provider Getter\n */\n\n/**\n * @description\n * Creates the Current User object\n *\n * @param {CurrentUserConfig} config - Current User Configuration\n *  */\nconst getCurrentUser = config => {\n  const currentUser = {\n    authenticate: getAuthenticate(config),\n    unauthenticate: getUnauthenticate(config),\n    authorization: getAuthorization(config),\n    signUserMessage: getSignUserMessage(config),\n    subscribe: getSubscribe(config),\n    snapshot: getSnapshot(config),\n    resolveArgument: getResolveArgument(config)\n  };\n  return Object.assign(() => {\n    return {\n      ...currentUser\n    };\n  }, {\n    ...currentUser\n  });\n};\n\n/**\n * @description\n * Factory function that returns a mutate function for a given currentUser.\n *\n * @param {ReturnType<typeof import(\"../current-user\").getCurrentUser> | import(\"../current-user\").CurrentUserConfig} currentUserOrConfig - CurrentUser actor or configuration\n */\nconst getMutate = currentUserOrConfig => {\n  /**\n   * @description\n   * Allows you to submit transactions to the blockchain to potentially mutate the state.\n   *\n   * @param {object} [opts] - Mutation Options and configuration\n   * @param {string} [opts.cadence] - Cadence Transaction used to mutate Flow\n   * @param {import(\"./args\").ArgsFn} [opts.args] - Arguments passed to cadence transaction\n   * @param {object | string} [opts.template] - Interaction Template for a transaction\n   * @param {number} [opts.limit] - Compute Limit for transaction\n   * @param {Function} [opts.authz] - Authorization function for transaction\n   * @param {Function} [opts.proposer] - Proposer Authorization function for transaction\n   * @param {Function} [opts.payer] - Payer Authorization function for transaction\n   * @param {Array<Function>} [opts.authorizations] - Authorizations function for transaction\n   * @returns {Promise<string>} Transaction Id\n   *\n   * @example\n   * fcl.mutate({\n   *   cadence: `\n   *     transaction(a: Int, b: Int, c: Address) {\n   *       prepare(acct: AuthAccount) {\n   *         log(acct)\n   *         log(a)\n   *         log(b)\n   *         log(c)\n   *       }\n   *     }\n   *   `,\n   *   args: (arg, t) => [\n   *     arg(6, t.Int),\n   *     arg(7, t.Int),\n   *     arg(\"0xba1132bc08f82fe2\", t.Address),\n   *   ],\n   * })\n   *\n   *\n   * Options:\n   * type Options = {\n   *   template: InteractionTemplate | String // InteractionTemplate or url to one\n   *   cadence: String!,\n   *   args: (arg, t) => Array<Arg>,\n   *   limit: Number,\n   *   authz: AuthzFn, // will overload the trinity of signatory roles\n   *   proposer: AuthzFn, // will overload the proposer signatory role\n   *   payer: AuthzFn, // will overload the payer signatory role\n   *   authorizations: [AuthzFn], // an array of authorization functions used as authorizations signatory roles\n   * }\n   */\n  const mutate = async function () {\n    let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var txid;\n    try {\n      await preMutate(opts);\n      opts = await prepTemplateOpts(opts);\n      // Allow for a config to overwrite the authorization function.\n      // prettier-ignore\n      const currentUser = typeof currentUserOrConfig === \"function\" ? currentUserOrConfig : getCurrentUser(currentUserOrConfig);\n      const authz = await _onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.config().get(\"fcl.authz\", currentUser().authorization);\n      txid = _onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.send([_onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.transaction(opts.cadence), _onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.args(normalizeArgs(opts.args || [])), opts.limit && isNumber(opts.limit) && _onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.limit(opts.limit),\n      // opts.proposer > opts.authz > authz\n      _onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.proposer(opts.proposer || opts.authz || authz),\n      // opts.payer > opts.authz > authz\n      _onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.payer(opts.payer || opts.authz || authz),\n      // opts.authorizations > [opts.authz > authz]\n      _onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.authorizations(opts.authorizations || [opts.authz || authz])]).then(_onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.decode);\n      return txid;\n    } catch (error) {\n      throw error;\n    }\n  };\n  return mutate;\n};\n\nfunction serviceEndpoint(service) {\n  const url = new URL(service.endpoint);\n  if (window?.location?.origin) {\n    url.searchParams.append(\"l6n\", window.location.origin);\n  }\n  if (service.params != null) {\n    for (let [key, value] of Object.entries(service.params || {})) {\n      url.searchParams.append(key, value);\n    }\n  }\n  return url;\n}\n\nfunction fetchService(service) {\n  let opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  const method = opts.method || \"POST\";\n  const body = method === \"GET\" ? undefined : JSON.stringify(opts.data || service.data || {});\n  return fetch(serviceEndpoint(service), {\n    method: method,\n    headers: {\n      ...(service.headers || {}),\n      ...(opts.headers || {}),\n      \"Content-Type\": \"application/json\"\n    },\n    body: body\n  }).then(d => d.json());\n}\n\n// {\n//    \"f_type\": \"PollingResponse\",\n//    \"f_vsn\": \"1.0.0\",\n//    \"status\": \"PENDING\", // PENDING | APPROVED | DECLINED | REDIRECT\n//    \"reason\": null,      // Reason for Declining Transaction\n//    \"data\": null,        // Return value for APPROVED\n//    \"updates\": BackChannelRpc,\n//    \"local\": Frame,\n// }\nfunction normalizePollingResponse(resp) {\n  if (resp == null) return null;\n  if (!resp[\"f_vsn\"]) {\n    return {\n      ...POLLING_RESPONSE_PRAGMA,\n      status: resp.status ?? \"APPROVED\",\n      reason: resp.reason ?? null,\n      data: resp.compositeSignature || resp.data || {\n        ...resp\n      } || {},\n      updates: normalizeBackChannelRpc(resp.authorizationUpdates),\n      local: normalizeFrame((resp.local || [])[0])\n    };\n  }\n  switch (resp[\"f_vsn\"]) {\n    case \"1.0.0\":\n      return resp;\n    default:\n      return null;\n  }\n}\n\nconst OPTIONS = {\n  \"HTTP/GET\": \"GET\",\n  \"HTTP/POST\": \"POST\"\n};\nconst serviceMethod = service => {\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_2__.invariant)(OPTIONS[service.method], \"Invalid Service Method for type back-channel-rpc\", {\n    service\n  });\n  return OPTIONS[service.method];\n};\nasync function poll(service) {\n  let checkCanContinue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : () => true;\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_2__.invariant)(service, \"Missing Polling Service\", {\n    service\n  });\n  const canContinue = checkCanContinue();\n  if (!canContinue) throw new Error(\"Externally Halted\");\n  let resp;\n  try {\n    if (typeof document !== \"undefined\" && document.visibilityState === \"hidden\") {\n      await new Promise(r => setTimeout(r, 500));\n      return poll(service, checkCanContinue);\n    }\n    resp = await fetchService(service, {\n      method: serviceMethod(service)\n    }).then(normalizePollingResponse);\n  } catch (error) {\n    throw error;\n  }\n  switch (resp.status) {\n    case \"APPROVED\":\n      return resp.data;\n    case \"DECLINED\":\n      throw new Error(`Declined: ${resp.reason || \"No reason supplied.\"}`);\n    default:\n      await new Promise(r => setTimeout(r, 500));\n      return poll(resp.updates, checkCanContinue);\n  }\n}\n\nconst getExecHttpPost = execLocal => async _ref => {\n  let {\n    service,\n    body,\n    config,\n    opts\n  } = _ref;\n  const resp = await fetchService(service, {\n    data: {\n      fclVersion: VERSION,\n      service: {\n        params: service.params,\n        data: service.data,\n        type: service.type\n      },\n      config,\n      ...body\n    }\n  }).then(normalizePollingResponse);\n  if (resp.status === \"APPROVED\") {\n    return resp.data;\n  } else if (resp.status === \"DECLINED\") {\n    throw new Error(`Declined: ${resp.reason || \"No reason supplied.\"}`);\n  } else if (resp.status === \"REDIRECT\") {\n    return resp;\n  } else if (resp.status === \"PENDING\") {\n    // these two flags are required to run polling one more time before it stops\n    var canContinue = true;\n    var shouldContinue = true;\n    const [_, unmount] = await execLocal(normalizeLocalView(resp.local), {\n      serviceEndpoint,\n      onClose: () => shouldContinue = false\n    });\n    const close = () => {\n      try {\n        unmount();\n        shouldContinue = false;\n      } catch (error) {\n        console.error(\"Frame Close Error\", error);\n      }\n    };\n    /**\n     * this function is run once per poll call.\n     * Offsetting canContinue flag to make sure that\n     * the polling is performed one extra time after canContinue flag is set to false\n     * to prevent halting on Android when a browser calls window.close\n     * before FCL receives a successful result from polling\n     *\n     * @returns {boolean}\n     */\n    const checkCanContinue = () => {\n      const offsetCanContinue = canContinue;\n      canContinue = shouldContinue;\n      return offsetCanContinue;\n    };\n    return poll(resp.updates, checkCanContinue).then(serviceResponse => {\n      close();\n      return serviceResponse;\n    }).catch(error => {\n      console.error(error);\n      close();\n      throw error;\n    });\n  } else {\n    console.error(`Auto Decline: Invalid Response`, {\n      service,\n      resp\n    });\n    throw new Error(`Auto Decline: Invalid Response`);\n  }\n};\n\nconst CLOSE_EVENT = \"FCL:VIEW:CLOSE\";\nconst READY_EVENT = \"FCL:VIEW:READY\";\nconst RESPONSE_EVENT = \"FCL:VIEW:RESPONSE\";\nconst CUSTOM_RPC = \"FCL:VIEW:CUSTOM_RPC\";\nconst _ = e => typeof e === \"string\" && e.toLowerCase();\nconst IGNORE = new Set([\"monetizationstart\", \"monetizationpending\", \"monetizationprogress\", \"monetizationstop\"]);\nconst deprecate = (was, want) => console.warn(\"DEPRECATION NOTICE\", `Received ${was}, please use ${want} for this and future versions of FCL`);\nconst buildMessageHandler = _ref => {\n  let {\n    close,\n    send,\n    onReady,\n    onResponse,\n    onMessage,\n    onCustomRpc,\n    getSource\n  } = _ref;\n  let source;\n  return e => {\n    try {\n      source = getSource?.() || source;\n    } catch (_) {\n      // If getSource isn't working correctly, we should reset source\n      // to prevent desync between the source and the actual source\n      source = null;\n    }\n    try {\n      if (typeof e.data !== \"object\") return;\n      if (IGNORE.has(e.data.type)) return;\n      if (source != null && e.source !== source) return;\n      if (_(e.data.type) === _(CLOSE_EVENT)) close();\n      if (_(e.data.type) === _(READY_EVENT)) {\n        onReady(e, {\n          send,\n          close\n        });\n        source ||= e.source;\n      }\n      if (_(e.data.type) === _(RESPONSE_EVENT)) onResponse(e, {\n        send,\n        close\n      });\n      if (_(e.data.type) === _(CUSTOM_RPC)) onCustomRpc(e.data.payload, {\n        send,\n        close\n      });\n      onMessage(e, {\n        send,\n        close\n      });\n\n      // Backwards Compatible\n      if (_(e.data.type) === _(\"FCL:FRAME:READY\")) {\n        deprecate(e.data.type, READY_EVENT);\n        onReady(e, {\n          send,\n          close\n        });\n        source ||= e.source;\n      }\n      if (_(e.data.type) === _(\"FCL:FRAME:RESPONSE\")) {\n        deprecate(e.data.type, RESPONSE_EVENT);\n        onResponse(e, {\n          send,\n          close\n        });\n      }\n      if (_(e.data.type) === _(\"FCL:FRAME:CLOSE\")) {\n        deprecate(e.data.type, CLOSE_EVENT);\n        close();\n      }\n      //\n      if (_(e.data.type) === _(\"FCL::CHALLENGE::RESPONSE\")) {\n        deprecate(e.data.type, RESPONSE_EVENT);\n        onResponse(e, {\n          send,\n          close\n        });\n      }\n      if (_(e.data.type) === _(\"FCL::AUTHZ_READY\")) {\n        deprecate(e.data.type, READY_EVENT);\n        onReady(e, {\n          send,\n          close\n        });\n        source ||= e.source;\n      }\n      if (_(e.data.type) === _(\"FCL::CHALLENGE::CANCEL\")) {\n        deprecate(e.data.type, CLOSE_EVENT);\n        close();\n      }\n      if (_(e.data.type) === _(\"FCL::CANCEL\")) {\n        deprecate(e.data.type, CLOSE_EVENT);\n        close();\n      }\n    } catch (error) {\n      console.error(\"Frame Callback Error\", error);\n      close();\n    }\n  };\n};\n\n// Set chain id default on access node change\nwatchForChainIdChanges();\n\n\n//# sourceMappingURL=fcl-core.module.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/@onflow/fcl-core/dist/fcl-core.module.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/@onflow/fcl/dist/fcl.module.js":
/*!******************************************************!*\
  !*** ../node_modules/@onflow/fcl/dist/fcl.module.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AppUtils: () => (/* reexport safe */ _onflow_fcl_core__WEBPACK_IMPORTED_MODULE_0__.AppUtils),\n/* harmony export */   InteractionTemplateUtils: () => (/* reexport safe */ _onflow_fcl_core__WEBPACK_IMPORTED_MODULE_0__.InteractionTemplateUtils),\n/* harmony export */   LOCAL_STORAGE: () => (/* binding */ LOCAL_STORAGE),\n/* harmony export */   SESSION_STORAGE: () => (/* binding */ SESSION_STORAGE),\n/* harmony export */   TestUtils: () => (/* reexport safe */ _onflow_fcl_core__WEBPACK_IMPORTED_MODULE_0__.TestUtils),\n/* harmony export */   TransactionError: () => (/* reexport safe */ _onflow_fcl_core__WEBPACK_IMPORTED_MODULE_0__.TransactionError),\n/* harmony export */   VERSION: () => (/* reexport safe */ _onflow_fcl_core__WEBPACK_IMPORTED_MODULE_0__.VERSION),\n/* harmony export */   WalletUtils: () => (/* reexport safe */ _onflow_fcl_core__WEBPACK_IMPORTED_MODULE_0__.WalletUtils),\n/* harmony export */   account: () => (/* reexport safe */ _onflow_fcl_core__WEBPACK_IMPORTED_MODULE_0__.account),\n/* harmony export */   arg: () => (/* reexport safe */ _onflow_fcl_core__WEBPACK_IMPORTED_MODULE_0__.arg),\n/* harmony export */   args: () => (/* reexport safe */ _onflow_fcl_core__WEBPACK_IMPORTED_MODULE_0__.args),\n/* harmony export */   atBlockHeight: () => (/* reexport safe */ _onflow_fcl_core__WEBPACK_IMPORTED_MODULE_0__.atBlockHeight),\n/* harmony export */   atBlockId: () => (/* reexport safe */ _onflow_fcl_core__WEBPACK_IMPORTED_MODULE_0__.atBlockId),\n/* harmony export */   authenticate: () => (/* binding */ authenticate),\n/* harmony export */   authorization: () => (/* reexport safe */ _onflow_fcl_core__WEBPACK_IMPORTED_MODULE_0__.authorization),\n/* harmony export */   authorizations: () => (/* reexport safe */ _onflow_fcl_core__WEBPACK_IMPORTED_MODULE_0__.authorizations),\n/* harmony export */   authz: () => (/* binding */ authz),\n/* harmony export */   block: () => (/* reexport safe */ _onflow_fcl_core__WEBPACK_IMPORTED_MODULE_0__.block),\n/* harmony export */   build: () => (/* reexport safe */ _onflow_fcl_core__WEBPACK_IMPORTED_MODULE_0__.build),\n/* harmony export */   cadence: () => (/* reexport safe */ _onflow_fcl_core__WEBPACK_IMPORTED_MODULE_0__.cadence),\n/* harmony export */   cdc: () => (/* reexport safe */ _onflow_fcl_core__WEBPACK_IMPORTED_MODULE_0__.cdc),\n/* harmony export */   config: () => (/* reexport safe */ _onflow_fcl_core__WEBPACK_IMPORTED_MODULE_0__.config),\n/* harmony export */   createSignableVoucher: () => (/* reexport safe */ _onflow_fcl_core__WEBPACK_IMPORTED_MODULE_0__.createSignableVoucher),\n/* harmony export */   currentUser: () => (/* binding */ currentUser),\n/* harmony export */   decode: () => (/* reexport safe */ _onflow_fcl_core__WEBPACK_IMPORTED_MODULE_0__.decode),\n/* harmony export */   discovery: () => (/* reexport safe */ _onflow_fcl_core__WEBPACK_IMPORTED_MODULE_0__.discovery),\n/* harmony export */   display: () => (/* reexport safe */ _onflow_fcl_core__WEBPACK_IMPORTED_MODULE_0__.display),\n/* harmony export */   events: () => (/* reexport safe */ _onflow_fcl_core__WEBPACK_IMPORTED_MODULE_0__.events),\n/* harmony export */   flowEmulator: () => (/* reexport safe */ _onflow_fcl_core__WEBPACK_IMPORTED_MODULE_0__.flowEmulator),\n/* harmony export */   flowMainnet: () => (/* reexport safe */ _onflow_fcl_core__WEBPACK_IMPORTED_MODULE_0__.flowMainnet),\n/* harmony export */   flowTestnet: () => (/* reexport safe */ _onflow_fcl_core__WEBPACK_IMPORTED_MODULE_0__.flowTestnet),\n/* harmony export */   getAccount: () => (/* reexport safe */ _onflow_fcl_core__WEBPACK_IMPORTED_MODULE_0__.getAccount),\n/* harmony export */   getBlock: () => (/* reexport safe */ _onflow_fcl_core__WEBPACK_IMPORTED_MODULE_0__.getBlock),\n/* harmony export */   getBlockHeader: () => (/* reexport safe */ _onflow_fcl_core__WEBPACK_IMPORTED_MODULE_0__.getBlockHeader),\n/* harmony export */   getChainId: () => (/* reexport safe */ _onflow_fcl_core__WEBPACK_IMPORTED_MODULE_0__.getChainId),\n/* harmony export */   getCollection: () => (/* reexport safe */ _onflow_fcl_core__WEBPACK_IMPORTED_MODULE_0__.getCollection),\n/* harmony export */   getEvents: () => (/* reexport safe */ _onflow_fcl_core__WEBPACK_IMPORTED_MODULE_0__.getEvents),\n/* harmony export */   getEventsAtBlockHeightRange: () => (/* reexport safe */ _onflow_fcl_core__WEBPACK_IMPORTED_MODULE_0__.getEventsAtBlockHeightRange),\n/* harmony export */   getEventsAtBlockIds: () => (/* reexport safe */ _onflow_fcl_core__WEBPACK_IMPORTED_MODULE_0__.getEventsAtBlockIds),\n/* harmony export */   getNetworkParameters: () => (/* reexport safe */ _onflow_fcl_core__WEBPACK_IMPORTED_MODULE_0__.getNetworkParameters),\n/* harmony export */   getNodeVersionInfo: () => (/* reexport safe */ _onflow_fcl_core__WEBPACK_IMPORTED_MODULE_0__.getNodeVersionInfo),\n/* harmony export */   getTransaction: () => (/* reexport safe */ _onflow_fcl_core__WEBPACK_IMPORTED_MODULE_0__.getTransaction),\n/* harmony export */   getTransactionStatus: () => (/* reexport safe */ _onflow_fcl_core__WEBPACK_IMPORTED_MODULE_0__.getTransactionStatus),\n/* harmony export */   invariant: () => (/* reexport safe */ _onflow_fcl_core__WEBPACK_IMPORTED_MODULE_0__.invariant),\n/* harmony export */   isBad: () => (/* reexport safe */ _onflow_fcl_core__WEBPACK_IMPORTED_MODULE_0__.isBad),\n/* harmony export */   isOk: () => (/* reexport safe */ _onflow_fcl_core__WEBPACK_IMPORTED_MODULE_0__.isOk),\n/* harmony export */   limit: () => (/* reexport safe */ _onflow_fcl_core__WEBPACK_IMPORTED_MODULE_0__.limit),\n/* harmony export */   logIn: () => (/* binding */ logIn),\n/* harmony export */   mutate: () => (/* binding */ mutate),\n/* harmony export */   nodeVersionInfo: () => (/* reexport safe */ _onflow_fcl_core__WEBPACK_IMPORTED_MODULE_0__.nodeVersionInfo),\n/* harmony export */   param: () => (/* reexport safe */ _onflow_fcl_core__WEBPACK_IMPORTED_MODULE_0__.param),\n/* harmony export */   params: () => (/* reexport safe */ _onflow_fcl_core__WEBPACK_IMPORTED_MODULE_0__.params),\n/* harmony export */   payer: () => (/* reexport safe */ _onflow_fcl_core__WEBPACK_IMPORTED_MODULE_0__.payer),\n/* harmony export */   ping: () => (/* reexport safe */ _onflow_fcl_core__WEBPACK_IMPORTED_MODULE_0__.ping),\n/* harmony export */   pipe: () => (/* reexport safe */ _onflow_fcl_core__WEBPACK_IMPORTED_MODULE_0__.pipe),\n/* harmony export */   pluginRegistry: () => (/* reexport safe */ _onflow_fcl_core__WEBPACK_IMPORTED_MODULE_0__.pluginRegistry),\n/* harmony export */   proposer: () => (/* reexport safe */ _onflow_fcl_core__WEBPACK_IMPORTED_MODULE_0__.proposer),\n/* harmony export */   query: () => (/* reexport safe */ _onflow_fcl_core__WEBPACK_IMPORTED_MODULE_0__.query),\n/* harmony export */   queryRaw: () => (/* reexport safe */ _onflow_fcl_core__WEBPACK_IMPORTED_MODULE_0__.queryRaw),\n/* harmony export */   reauthenticate: () => (/* binding */ reauthenticate),\n/* harmony export */   ref: () => (/* reexport safe */ _onflow_fcl_core__WEBPACK_IMPORTED_MODULE_0__.ref),\n/* harmony export */   sansPrefix: () => (/* reexport safe */ _onflow_fcl_core__WEBPACK_IMPORTED_MODULE_0__.sansPrefix),\n/* harmony export */   script: () => (/* reexport safe */ _onflow_fcl_core__WEBPACK_IMPORTED_MODULE_0__.script),\n/* harmony export */   send: () => (/* reexport safe */ _onflow_fcl_core__WEBPACK_IMPORTED_MODULE_0__.send),\n/* harmony export */   serialize: () => (/* reexport safe */ _onflow_fcl_core__WEBPACK_IMPORTED_MODULE_0__.serialize),\n/* harmony export */   signUp: () => (/* binding */ signUp),\n/* harmony export */   subscribe: () => (/* reexport safe */ _onflow_fcl_core__WEBPACK_IMPORTED_MODULE_0__.subscribe),\n/* harmony export */   subscribeEvents: () => (/* reexport safe */ _onflow_fcl_core__WEBPACK_IMPORTED_MODULE_0__.subscribeEvents),\n/* harmony export */   subscribeRaw: () => (/* reexport safe */ _onflow_fcl_core__WEBPACK_IMPORTED_MODULE_0__.subscribeRaw),\n/* harmony export */   t: () => (/* reexport safe */ _onflow_fcl_core__WEBPACK_IMPORTED_MODULE_0__.t),\n/* harmony export */   transaction: () => (/* reexport safe */ _onflow_fcl_core__WEBPACK_IMPORTED_MODULE_0__.transaction),\n/* harmony export */   tx: () => (/* reexport safe */ _onflow_fcl_core__WEBPACK_IMPORTED_MODULE_0__.tx),\n/* harmony export */   unauthenticate: () => (/* binding */ unauthenticate),\n/* harmony export */   validator: () => (/* reexport safe */ _onflow_fcl_core__WEBPACK_IMPORTED_MODULE_0__.validator),\n/* harmony export */   verifyUserSignatures: () => (/* reexport safe */ _onflow_fcl_core__WEBPACK_IMPORTED_MODULE_0__.verifyUserSignatures),\n/* harmony export */   voucherIntercept: () => (/* reexport safe */ _onflow_fcl_core__WEBPACK_IMPORTED_MODULE_0__.voucherIntercept),\n/* harmony export */   voucherToTxId: () => (/* reexport safe */ _onflow_fcl_core__WEBPACK_IMPORTED_MODULE_0__.voucherToTxId),\n/* harmony export */   why: () => (/* reexport safe */ _onflow_fcl_core__WEBPACK_IMPORTED_MODULE_0__.why),\n/* harmony export */   withPrefix: () => (/* reexport safe */ _onflow_fcl_core__WEBPACK_IMPORTED_MODULE_0__.withPrefix)\n/* harmony export */ });\n/* harmony import */ var _onflow_fcl_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @onflow/fcl-core */ \"(ssr)/../node_modules/@onflow/fcl-core/dist/fcl-core.module.js\");\n/* harmony import */ var _onflow_util_rpc__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @onflow/util-rpc */ \"(ssr)/../node_modules/@onflow/util-rpc/dist/index.module.js\");\n/* harmony import */ var _onflow_fcl_wc__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @onflow/fcl-wc */ \"(ssr)/../node_modules/@onflow/fcl-wc/dist/index.module.mjs\");\n/* harmony import */ var _onflow_config__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @onflow/config */ \"(ssr)/../node_modules/@onflow/config/dist/config.module.js\");\n/* harmony import */ var _onflow_util_invariant__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @onflow/util-invariant */ \"(ssr)/../node_modules/@onflow/util-invariant/dist/util-invariant.module.js\");\n/* harmony import */ var _onflow_util_uid__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @onflow/util-uid */ \"(ssr)/../node_modules/@onflow/util-uid/dist/util-uid.module.js\");\n\n\n\n\n\n\n\n\n\nconst AbortController = globalThis.AbortController || __webpack_require__(/*! abort-controller */ \"(ssr)/../node_modules/abort-controller/dist/abort-controller.js\");\nfunction wrapAbortSignal(signal) {\n  const controller = new AbortController();\n  if (signal?.aborted) controller.abort();\n  signal?.addEventListener(\"abort\", () => controller.abort());\n  return controller;\n}\n\nlet DiscoveryNotification = /*#__PURE__*/function (DiscoveryNotification) {\n  DiscoveryNotification[\"NOTIFY_QRCODE_CONNECTING\"] = \"notifyQrCodeConnecting\";\n  DiscoveryNotification[\"NOTIFY_QRCODE_CONNECTED\"] = \"notifyQrCodeConnected\";\n  DiscoveryNotification[\"NOTIFY_QRCODE_ERROR\"] = \"notifyQrCodeError\";\n  return DiscoveryNotification;\n}({});\nlet FclRequest = /*#__PURE__*/function (FclRequest) {\n  FclRequest[\"REQUEST_WALLETCONNECT_QRCODE\"] = \"requestWalletConnectQrCode\";\n  FclRequest[\"EXEC_SERVICE\"] = \"execService\";\n  return FclRequest;\n}({});\n\nconst APPROVED = \"APPROVED\";\n\n// RPC handler for handling service execution requests (e.g extension service)\nconst execServiceHandlerFactory = _ref => {\n  let {\n    onExecResult,\n    execStrategyOpts,\n    execStrategyArgs,\n    abortSignal\n  } = _ref;\n  return async _ref2 => {\n    let {\n      service\n    } = _ref2;\n    try {\n      const result = await (0,_onflow_fcl_core__WEBPACK_IMPORTED_MODULE_0__.execStrategy)({\n        ...execStrategyOpts,\n        service,\n        config: execStrategyOpts.config,\n        abortSignal\n      },\n      // Pass the rest of the arguments (protect against future changes)\n      ...execStrategyArgs.slice(1));\n      const status = (0,_onflow_fcl_core__WEBPACK_IMPORTED_MODULE_0__.normalizePollingResponse)(result)?.status || APPROVED;\n      if (status === APPROVED) {\n        // Propogrates the result to the execStrategy hook\n        onExecResult(result);\n\n        // Notify Discovery that the service was approved\n        return null;\n      } else {\n        // Notify Discovery that the service was rejected\n        throw new Error(result?.reason || \"Service was declined\");\n      }\n    } catch (e) {\n      throw new Error(e?.message || \"Service execution failed\");\n    }\n  };\n};\n\n// RPC handler for handling WalletConnect QR code requests\nconst wcRequestHandlerFactory = _ref => {\n  let {\n    rpc,\n    onExecResult,\n    authnBody,\n    abortSignal\n  } = _ref;\n  const watchQr = watchQrFactory({\n    rpc,\n    authnBody\n  });\n  return async _ref2 => {\n    if (abortSignal.aborted) {\n      throw new Error(\"Handler has been terminated\");\n    }\n    const provider = await (0,_onflow_fcl_wc__WEBPACK_IMPORTED_MODULE_2__.getProvider)();\n\n    // Execute WC bypass if session is approved\n    const {\n      uri,\n      approval\n    } = await (0,_onflow_fcl_wc__WEBPACK_IMPORTED_MODULE_2__.createSessionProposal)({\n      provider\n    });\n\n    // Watch for QR code connection asynchronously\n    watchQr({\n      uri,\n      approval,\n      onExecResult\n    });\n    return {\n      uri\n    };\n  };\n};\nfunction watchQrFactory(_ref3) {\n  let {\n    rpc,\n    authnBody\n  } = _ref3;\n  return _ref4 => {\n    let {\n      uri,\n      approval,\n      onExecResult\n    } = _ref4;\n    // Watch for QR code connection & resolve callback if connected\n    setTimeout(async () => {\n      try {\n        const provider = await (0,_onflow_fcl_wc__WEBPACK_IMPORTED_MODULE_2__.getProvider)();\n        const session = await approval();\n        rpc.notify(DiscoveryNotification.NOTIFY_QRCODE_CONNECTING, {\n          uri\n        });\n        const result = await (0,_onflow_fcl_wc__WEBPACK_IMPORTED_MODULE_2__.request)({\n          method: _onflow_fcl_wc__WEBPACK_IMPORTED_MODULE_2__.FLOW_METHODS.FLOW_AUTHN,\n          body: authnBody,\n          session,\n          provider\n        });\n        rpc.notify(DiscoveryNotification.NOTIFY_QRCODE_CONNECTED, {\n          uri\n        });\n        onExecResult(result);\n      } catch (e) {\n        rpc.notify(DiscoveryNotification.NOTIFY_QRCODE_ERROR, {\n          uri,\n          error: e?.message\n        });\n      }\n    }, 0);\n  };\n}\n\n// Initialize the discovery RPC client\nfunction createDiscoveryRpcClient(_ref) {\n  let {\n    onExecResult,\n    body,\n    opts,\n    args,\n    abortSignal\n  } = _ref;\n  const rpc = new _onflow_util_rpc__WEBPACK_IMPORTED_MODULE_1__.RpcClient({\n    notifications: []\n  });\n  rpc.on(FclRequest.REQUEST_WALLETCONNECT_QRCODE, wcRequestHandlerFactory({\n    rpc,\n    onExecResult,\n    authnBody: body,\n    abortSignal\n  }));\n  rpc.on(FclRequest.EXEC_SERVICE, execServiceHandlerFactory({\n    onExecResult,\n    execStrategyOpts: opts,\n    execStrategyArgs: args,\n    abortSignal\n  }));\n  return {\n    connect: rpc.connect.bind(rpc),\n    receive: rpc.receive.bind(rpc)\n  };\n}\n\nasync function execDiscovery(_ref) {\n  let {\n    customRpc,\n    opts,\n    args,\n    abortSignal\n  } = _ref;\n  // Update the discovery config to enable RPC support\n  const discoveryConfig = {\n    ...opts.config,\n    client: {\n      ...opts.config.client,\n      discoveryRpcEnabled: true\n    }\n  };\n\n  // Execute base discovery request\n  return (0,_onflow_fcl_core__WEBPACK_IMPORTED_MODULE_0__.execStrategy)({\n    ...opts,\n    config: discoveryConfig,\n    customRpc,\n    abortSignal\n  },\n  // @ts-ignore - Pass the rest of the arguments (protect against future changes)\n  ...args.slice(1));\n}\n\nconst AUTHN_SERVICE_TYPE = \"authn\";\n\n// Defines the execStrategy hook for Discovery Service\n// Used to define custom service execution rules for the Discovery Service\nasync function execStrategyHook() {\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n  const [opts] = args;\n  const {\n    body,\n    abortSignal: baseAbortSignal,\n    service\n  } = opts;\n\n  // Ensure the service type is \"auth\" for the execStrategyHook\n  if (service?.type !== AUTHN_SERVICE_TYPE) {\n    console.error(`ERROR: Invalid service type for FCL Discovery execStrategyHook, expected \"${AUTHN_SERVICE_TYPE}\" but got \"${service?.type}\"`);\n    return (0,_onflow_fcl_core__WEBPACK_IMPORTED_MODULE_0__.execStrategy)(...args);\n  }\n\n  // Create an abort controller for this context\n  // Either used to terminate WC bypass proposal loop or the base discovery request\n  const abortController = wrapAbortSignal(baseAbortSignal);\n  let discoveryPromise;\n  const resultPromise = new Promise(async (resolve, reject) => {\n    // Initialize the discovery RPC client\n    const rpc = createDiscoveryRpcClient({\n      onExecResult: resolve,\n      body,\n      opts,\n      args,\n      abortSignal: abortController.signal\n    });\n\n    // Execute the base discovery request\n    discoveryPromise = execDiscovery({\n      customRpc: rpc,\n      opts,\n      args,\n      abortSignal: abortController.signal\n    }).then(resolve, reject);\n  });\n\n  // Wait for the result promise to resolve or reject\n  await resultPromise.catch(() => {});\n\n  // Give Discovery time to cleanup\n  await Promise.race([new Promise(resolve => setTimeout(resolve, 1000)), discoveryPromise]).catch(() => {});\n\n  // Ensure the abort signal is propagated to all candidates on completion\n  abortController.abort();\n\n  // Return the result\n  return resultPromise;\n}\n\nconst FRAME = \"FCL_IFRAME\";\nconst FRAME_STYLES = `\n  position:fixed;\n  top: 0px;\n  right: 0px;\n  bottom: 0px;\n  left: 0px;\n  height: 100%;\n  width: 100vw;\n  display:block;\n  background:rgba(0,0,0,0.25);\n  z-index: 2147483647;\n  box-sizing: border-box;\n  color-scheme: light;\n`;\nfunction renderFrame(src) {\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_4__.invariant)(!document.getElementById(FRAME), \"Attempt at triggering multiple Frames\", {\n    src\n  });\n  const $frame = document.createElement(\"iframe\");\n  $frame.src = src;\n  $frame.id = FRAME;\n  $frame.allow = \"usb *; hid *; clipboard-write\";\n  $frame.frameBorder = \"0\";\n  $frame.style.cssText = FRAME_STYLES;\n  document.body.append($frame);\n  const unmount = () => {\n    if (document.getElementById(FRAME)) {\n      document.getElementById(FRAME).remove();\n    }\n  };\n  return [$frame.contentWindow, unmount];\n}\n\nconst POP = \"FCL_POP\";\nlet popup = null;\nlet previousUrl$1 = null;\nfunction popupWindow(url, windowName, win, w, h) {\n  const y = win.top.outerHeight / 2 + win.top.screenY - h / 2;\n  const x = win.top.outerWidth / 2 + win.top.screenX - w / 2;\n  const popup = win.open(url, windowName, `toolbar=no, location=no, directories=no, status=no, menubar=no, scrollbars=no, resizable=no, copyhistory=no, width=${w}, height=${h}, top=${y}, left=${x}`);\n  if (!popup) throw new Error(\"Popup failed to open (was it blocked by a popup blocker?)\");\n  return popup;\n}\nfunction renderPop(src) {\n  if (popup == null || popup?.closed) {\n    popup = popupWindow(src, POP, window, 640, 770);\n  } else if (previousUrl$1 !== src) {\n    popup.location.replace(src);\n    popup.focus();\n  } else {\n    popup.focus();\n  }\n  previousUrl$1 = src;\n  const unmount = () => {\n    if (popup && !popup.closed) {\n      popup.close();\n    }\n    popup = null;\n  };\n  return [popup, unmount];\n}\n\nlet tab$1 = null;\nlet previousUrl = null;\nfunction renderTab(src) {\n  if (tab$1 == null || tab$1?.closed) {\n    tab$1 = window.open(src, \"_blank\");\n    if (!tab$1) throw new Error(\"Tab failed to open (was it blocked by the browser?)\");\n  } else if (previousUrl !== src) {\n    tab$1.location.replace(src);\n    tab$1.focus();\n  } else {\n    tab$1.focus();\n  }\n  previousUrl = src;\n  const unmount = () => {\n    if (tab$1 && !tab$1.closed) {\n      tab$1.close();\n    }\n    tab$1 = null;\n  };\n  return [tab$1, unmount];\n}\n\nconst getDefaultConfig = () => {\n  return {\n    \"discovery.wallet.method.default\": \"IFRAME/RPC\"\n  };\n};\n\nconst noop$3 = () => {};\nfunction frame(service) {\n  let opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  if (service == null) return {\n    send: noop$3,\n    close: noop$3\n  };\n  const onClose = opts.onClose || noop$3;\n  const onMessage = opts.onMessage || noop$3;\n  const onReady = opts.onReady || noop$3;\n  const onResponse = opts.onResponse || noop$3;\n  const onCustomRpc = opts.onCustomRpc || noop$3;\n  let $frame, unmount;\n  const handler = (0,_onflow_fcl_core__WEBPACK_IMPORTED_MODULE_0__.buildMessageHandler)({\n    close,\n    send,\n    onReady,\n    onResponse,\n    onMessage,\n    onCustomRpc,\n    getSource: () => $frame\n  });\n  window.addEventListener(\"message\", handler);\n  [$frame, unmount] = renderFrame((0,_onflow_fcl_core__WEBPACK_IMPORTED_MODULE_0__.serviceEndpoint)(service));\n  return {\n    send,\n    close\n  };\n  function close() {\n    try {\n      window.removeEventListener(\"message\", handler);\n      unmount();\n      onClose();\n    } catch (error) {\n      console.error(\"Frame Close Error\", error);\n    }\n  }\n  function send(msg) {\n    try {\n      $frame.postMessage(JSON.parse(JSON.stringify(msg || {})), \"*\");\n    } catch (error) {\n      console.error(\"Frame Send Error\", msg, error);\n    }\n  }\n}\n\nconst VERSION = \"1.19.0\";\n\nfunction execIframeRPC(_ref) {\n  let {\n    service,\n    body,\n    config,\n    customRpc,\n    abortSignal,\n    opts\n  } = _ref;\n  return new Promise((resolve, reject) => {\n    const id = (0,_onflow_util_uid__WEBPACK_IMPORTED_MODULE_5__.uid)();\n    const includeOlderJsonRpcCall = opts.includeOlderJsonRpcCall;\n    const {\n      close\n    } = frame(service, {\n      async onReady(_, _ref2) {\n        let {\n          send\n        } = _ref2;\n        try {\n          send({\n            type: \"FCL:VIEW:READY:RESPONSE\",\n            fclVersion: VERSION,\n            body,\n            service: {\n              params: service.params,\n              data: service.data,\n              type: service.type\n            },\n            config\n          });\n          send({\n            fclVersion: VERSION,\n            type: \"FCL:FRAME:READY:RESPONSE\",\n            body,\n            service: {\n              params: service.params,\n              data: service.data,\n              type: service.type\n            },\n            config,\n            deprecated: {\n              message: \"FCL:FRAME:READY:RESPONSE is deprecated and replaced with type: FCL:VIEW:READY:RESPONSE\"\n            }\n          });\n          if (includeOlderJsonRpcCall) {\n            send({\n              jsonrpc: \"2.0\",\n              id: id,\n              method: \"fcl:sign\",\n              params: [body, service.params],\n              deprecated: {\n                message: \"jsonrpc is deprecated and replaced with type: FCL:VIEW:READY:RESPONSE\"\n              }\n            });\n          }\n          customRpc?.connect({\n            send: msg => {\n              send({\n                type: \"FCL:VIEW:CUSTOM_RPC\",\n                payload: msg\n              });\n            }\n          });\n        } catch (error) {\n          throw error;\n        }\n      },\n      onResponse(e, _ref3) {\n        let {\n          close\n        } = _ref3;\n        try {\n          if (typeof e.data !== \"object\") return;\n          const resp = (0,_onflow_fcl_core__WEBPACK_IMPORTED_MODULE_0__.normalizePollingResponse)(e.data);\n          switch (resp.status) {\n            case \"APPROVED\":\n              resolve(resp.data);\n              close();\n              break;\n            case \"DECLINED\":\n              reject(`Declined: ${resp.reason || \"No reason supplied\"}`);\n              close();\n              break;\n            case \"REDIRECT\":\n              resolve(resp);\n              close();\n              break;\n            default:\n              reject(`Declined: No reason supplied`);\n              close();\n              break;\n          }\n        } catch (error) {\n          console.error(\"execIframeRPC onResponse error\", error);\n          throw error;\n        }\n      },\n      onMessage(e, _ref4) {\n        let {\n          close\n        } = _ref4;\n        try {\n          if (typeof e.data !== \"object\") return;\n          if (e.data.jsonrpc !== \"2.0\") return;\n          if (e.data.id !== id) return;\n          const resp = (0,_onflow_fcl_core__WEBPACK_IMPORTED_MODULE_0__.normalizePollingResponse)(e.data.result);\n          switch (resp.status) {\n            case \"APPROVED\":\n              resolve(resp.data);\n              close();\n              break;\n            case \"DECLINED\":\n              reject(`Declined: ${resp.reason || \"No reason supplied\"}`);\n              close();\n              break;\n            case \"REDIRECT\":\n              resolve(resp);\n              close();\n              break;\n            default:\n              reject(`Declined: No reason supplied`);\n              close();\n              break;\n          }\n        } catch (error) {\n          console.error(\"execIframeRPC onMessage error\", error);\n          throw error;\n        }\n      },\n      onClose() {\n        reject(`Declined: Externally Halted`);\n      },\n      onCustomRpc(msg) {\n        customRpc?.receive(msg);\n      }\n    });\n    if (abortSignal) {\n      if (abortSignal.aborted) {\n        reject(`Declined: Aborted`);\n        close();\n      }\n      abortSignal.addEventListener(\"abort\", () => {\n        reject(`Declined: Aborted`);\n        close();\n      });\n    }\n  });\n}\n\nconst noop$2 = () => {};\nfunction pop(service) {\n  let opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  if (service == null) return {\n    send: noop$2,\n    close: noop$2\n  };\n  const onClose = opts.onClose || noop$2;\n  const onMessage = opts.onMessage || noop$2;\n  const onReady = opts.onReady || noop$2;\n  const onResponse = opts.onResponse || noop$2;\n  const onCustomRpc = opts.onCustomRpc || noop$2;\n  let $pop, unmount;\n  const handler = (0,_onflow_fcl_core__WEBPACK_IMPORTED_MODULE_0__.buildMessageHandler)({\n    close,\n    send,\n    onReady,\n    onResponse,\n    onMessage,\n    onCustomRpc,\n    getSource: () => $pop\n  });\n  window.addEventListener(\"message\", handler);\n  [$pop, unmount] = renderPop((0,_onflow_fcl_core__WEBPACK_IMPORTED_MODULE_0__.serviceEndpoint)(service));\n  const timer = setInterval(function () {\n    if ($pop && $pop.closed) {\n      close();\n    }\n  }, 500);\n  return {\n    send,\n    close\n  };\n  function close() {\n    try {\n      window.removeEventListener(\"message\", handler);\n      clearInterval(timer);\n      unmount();\n      onClose();\n    } catch (error) {\n      console.error(\"Popup Close Error\", error);\n    }\n  }\n  function send(msg) {\n    try {\n      $pop.postMessage(JSON.parse(JSON.stringify(msg || {})), \"*\");\n    } catch (error) {\n      console.error(\"Popup Send Error\", msg, error);\n    }\n  }\n}\n\nfunction execPopRPC(_ref) {\n  let {\n    service,\n    body,\n    config,\n    abortSignal,\n    customRpc,\n    opts\n  } = _ref;\n  return new Promise((resolve, reject) => {\n    const id = (0,_onflow_util_uid__WEBPACK_IMPORTED_MODULE_5__.uid)();\n    const {\n      redir,\n      includeOlderJsonRpcCall\n    } = opts;\n    const {\n      close\n    } = pop(service, {\n      customRpc,\n      async onReady(_, _ref2) {\n        let {\n          send\n        } = _ref2;\n        try {\n          send({\n            fclVersion: VERSION,\n            type: \"FCL:VIEW:READY:RESPONSE\",\n            body,\n            service: {\n              params: service.params,\n              data: service.data,\n              type: service.type\n            },\n            config\n          });\n          send({\n            fclVersion: VERSION,\n            type: \"FCL:FRAME:READY:RESPONSE\",\n            body,\n            service: {\n              params: service.params,\n              data: service.data,\n              type: service.type\n            },\n            config,\n            deprecated: {\n              message: \"FCL:FRAME:READY:RESPONSE is deprecated and replaced with type: FCL:VIEW:READY:RESPONSE\"\n            }\n          });\n          if (includeOlderJsonRpcCall) {\n            send({\n              jsonrpc: \"2.0\",\n              id: id,\n              method: \"fcl:sign\",\n              params: [body, service.params]\n            });\n          }\n          customRpc?.connect({\n            send: msg => {\n              send({\n                type: \"FCL:VIEW:CUSTOM_RPC\",\n                payload: msg\n              });\n            }\n          });\n        } catch (error) {\n          throw error;\n        }\n      },\n      onResponse(e, _ref3) {\n        let {\n          close\n        } = _ref3;\n        try {\n          if (typeof e.data !== \"object\") return;\n          const resp = (0,_onflow_fcl_core__WEBPACK_IMPORTED_MODULE_0__.normalizePollingResponse)(e.data);\n          switch (resp.status) {\n            case \"APPROVED\":\n              resolve(resp.data);\n              !redir && close();\n              break;\n            case \"DECLINED\":\n              reject(`Declined: ${resp.reason || \"No reason supplied\"}`);\n              close();\n              break;\n            case \"REDIRECT\":\n              resolve(resp);\n              close();\n              break;\n            default:\n              reject(`Declined: No reason supplied`);\n              close();\n              break;\n          }\n        } catch (error) {\n          console.error(\"execPopRPC onResponse error\", error);\n          throw error;\n        }\n      },\n      onMessage(e, _ref4) {\n        let {\n          close\n        } = _ref4;\n        try {\n          if (typeof e.data !== \"object\") return;\n          if (e.data.jsonrpc !== \"2.0\") return;\n          if (e.data.id !== id) return;\n          const resp = (0,_onflow_fcl_core__WEBPACK_IMPORTED_MODULE_0__.normalizePollingResponse)(e.data.result);\n          switch (resp.status) {\n            case \"APPROVED\":\n              resolve(resp.data);\n              !redir && close();\n              break;\n            case \"DECLINED\":\n              reject(`Declined: ${resp.reason || \"No reason supplied\"}`);\n              close();\n              break;\n            case \"REDIRECT\":\n              resolve(resp);\n              close();\n              break;\n            default:\n              reject(`Declined: No reason supplied`);\n              close();\n              break;\n          }\n        } catch (error) {\n          console.error(\"execPopRPC onMessage error\", error);\n          throw error;\n        }\n      },\n      onClose() {\n        reject(`Declined: Externally Halted`);\n      },\n      onCustomRpc(msg) {\n        customRpc?.receive(msg);\n      }\n    });\n    if (abortSignal) {\n      if (abortSignal.aborted) {\n        reject(`Declined: Aborted`);\n        close();\n      }\n      abortSignal.addEventListener(\"abort\", () => {\n        reject(`Declined: Aborted`);\n        close();\n      });\n    }\n  });\n}\n\nconst noop$1 = () => {};\nfunction tab(service) {\n  let opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  if (service == null) return {\n    send: noop$1,\n    close: noop$1\n  };\n  const onClose = opts.onClose || noop$1;\n  const onMessage = opts.onMessage || noop$1;\n  const onReady = opts.onReady || noop$1;\n  const onResponse = opts.onResponse || noop$1;\n  const onCustomRpc = opts.onCustomRpc || noop$1;\n  let $tab, unmount;\n  const handler = (0,_onflow_fcl_core__WEBPACK_IMPORTED_MODULE_0__.buildMessageHandler)({\n    close,\n    send,\n    onReady,\n    onResponse,\n    onMessage,\n    onCustomRpc,\n    getSource: () => $tab\n  });\n  window.addEventListener(\"message\", handler);\n  [$tab, unmount] = renderTab((0,_onflow_fcl_core__WEBPACK_IMPORTED_MODULE_0__.serviceEndpoint)(service));\n  const timer = setInterval(function () {\n    if ($tab && $tab.closed) {\n      close();\n    }\n  }, 500);\n  return {\n    send,\n    close\n  };\n  function close() {\n    try {\n      window.removeEventListener(\"message\", handler);\n      clearInterval(timer);\n      unmount();\n      onClose();\n    } catch (error) {\n      console.error(\"Tab Close Error\", error);\n    }\n  }\n  function send(msg) {\n    try {\n      $tab.postMessage(JSON.parse(JSON.stringify(msg || {})), \"*\");\n    } catch (error) {\n      console.error(\"Tab Send Error\", msg, error);\n    }\n  }\n}\n\nfunction execTabRPC(_ref) {\n  let {\n    service,\n    body,\n    config,\n    abortSignal,\n    customRpc,\n    opts\n  } = _ref;\n  return new Promise((resolve, reject) => {\n    const id = (0,_onflow_util_uid__WEBPACK_IMPORTED_MODULE_5__.uid)();\n    const {\n      redir,\n      includeOlderJsonRpcCall\n    } = opts;\n    const {\n      close\n    } = tab(service, {\n      customRpc,\n      async onReady(_, _ref2) {\n        let {\n          send\n        } = _ref2;\n        try {\n          send({\n            fclVersion: VERSION,\n            type: \"FCL:VIEW:READY:RESPONSE\",\n            body,\n            service: {\n              params: service.params,\n              data: service.data,\n              type: service.type\n            },\n            config\n          });\n          send({\n            fclVersion: VERSION,\n            type: \"FCL:FRAME:READY:RESPONSE\",\n            body,\n            service: {\n              params: service.params,\n              data: service.data,\n              type: service.type\n            },\n            config,\n            deprecated: {\n              message: \"FCL:FRAME:READY:RESPONSE is deprecated and replaced with type: FCL:VIEW:READY:RESPONSE\"\n            }\n          });\n          if (includeOlderJsonRpcCall) {\n            send({\n              jsonrpc: \"2.0\",\n              id: id,\n              method: \"fcl:sign\",\n              params: [body, service.params]\n            });\n          }\n          customRpc?.connect({\n            send: msg => {\n              send({\n                type: \"FCL:VIEW:CUSTOM_RPC\",\n                payload: msg\n              });\n            }\n          });\n        } catch (error) {\n          throw error;\n        }\n      },\n      onResponse(e, _ref3) {\n        let {\n          close\n        } = _ref3;\n        try {\n          if (typeof e.data !== \"object\") return;\n          const resp = (0,_onflow_fcl_core__WEBPACK_IMPORTED_MODULE_0__.normalizePollingResponse)(e.data);\n          switch (resp.status) {\n            case \"APPROVED\":\n              resolve(resp.data);\n              !redir && close();\n              break;\n            case \"DECLINED\":\n              reject(`Declined: ${resp.reason || \"No reason supplied\"}`);\n              close();\n              break;\n            case \"REDIRECT\":\n              resolve(resp);\n              close();\n              break;\n            default:\n              reject(`Declined: No reason supplied`);\n              close();\n              break;\n          }\n        } catch (error) {\n          console.error(\"execPopRPC onResponse error\", error);\n          throw error;\n        }\n      },\n      onMessage(e, _ref4) {\n        let {\n          close\n        } = _ref4;\n        try {\n          if (typeof e.data !== \"object\") return;\n          if (e.data.jsonrpc !== \"2.0\") return;\n          if (e.data.id !== id) return;\n          const resp = (0,_onflow_fcl_core__WEBPACK_IMPORTED_MODULE_0__.normalizePollingResponse)(e.data.result);\n          switch (resp.status) {\n            case \"APPROVED\":\n              resolve(resp.data);\n              !redir && close();\n              break;\n            case \"DECLINED\":\n              reject(`Declined: ${resp.reason || \"No reason supplied\"}`);\n              close();\n              break;\n            case \"REDIRECT\":\n              resolve(resp);\n              close();\n              break;\n            default:\n              reject(`Declined: No reason supplied`);\n              close();\n              break;\n          }\n        } catch (error) {\n          console.error(\"execPopRPC onMessage error\", error);\n          throw error;\n        }\n      },\n      onClose() {\n        reject(`Declined: Externally Halted`);\n      },\n      onCustomRpc(msg) {\n        customRpc?.receive(msg);\n      }\n    });\n    if (abortSignal) {\n      if (abortSignal.aborted) {\n        close();\n        reject(`Declined: Aborted`);\n      }\n      abortSignal.addEventListener(\"abort\", () => {\n        close();\n        reject(`Declined: Aborted`);\n      });\n    }\n  });\n}\n\nconst noop = () => {};\nfunction extension(service) {\n  let opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  if (service == null) return {\n    send: noop,\n    close: noop\n  };\n  const onClose = opts.onClose || noop;\n  const onMessage = opts.onMessage || noop;\n  const onReady = opts.onReady || noop;\n  const onResponse = opts.onResponse || noop;\n  const onCustomRpc = opts.onCustomRpc || noop;\n  const handler = (0,_onflow_fcl_core__WEBPACK_IMPORTED_MODULE_0__.buildMessageHandler)({\n    close,\n    send,\n    onReady,\n    onResponse,\n    onMessage,\n    onCustomRpc\n  });\n  window.addEventListener(\"message\", handler);\n  send({\n    service\n  });\n  return {\n    send,\n    close\n  };\n  function close() {\n    try {\n      window.removeEventListener(\"message\", handler);\n      onClose();\n    } catch (error) {\n      console.error(\"Ext Close Error\", error);\n    }\n  }\n  function send(msg) {\n    try {\n      window && window.postMessage(JSON.parse(JSON.stringify(msg || {})), \"*\");\n    } catch (error) {\n      console.error(\"Ext Send Error\", msg, error);\n    }\n  }\n}\n\nfunction execExtRPC(_ref) {\n  let {\n    service,\n    body,\n    config,\n    abortSignal,\n    customRpc,\n    opts\n  } = _ref;\n  return new Promise((resolve, reject) => {\n    const {\n      close\n    } = extension(service, {\n      async onReady(_, _ref2) {\n        let {\n          send\n        } = _ref2;\n        try {\n          send({\n            fclVersion: VERSION,\n            type: \"FCL:VIEW:READY:RESPONSE\",\n            body,\n            service: {\n              params: service.params,\n              data: service.data,\n              type: service.type\n            },\n            config\n          });\n          customRpc?.connect({\n            send: msg => {\n              send({\n                type: \"FCL:VIEW:CUSTOM_RPC\",\n                body: msg\n              });\n            }\n          });\n        } catch (error) {\n          throw error;\n        }\n      },\n      onResponse(e, _ref3) {\n        let {\n          close\n        } = _ref3;\n        try {\n          if (typeof e.data !== \"object\") return;\n          const resp = (0,_onflow_fcl_core__WEBPACK_IMPORTED_MODULE_0__.normalizePollingResponse)(e.data);\n          switch (resp.status) {\n            case \"APPROVED\":\n              resolve(resp.data);\n              close();\n              break;\n            case \"DECLINED\":\n              reject(`Declined: ${resp.reason || \"No reason supplied\"}`);\n              close();\n              break;\n            case \"REDIRECT\":\n              resolve(resp);\n              close();\n              break;\n            default:\n              reject(`Declined: No reason supplied`);\n              close();\n              break;\n          }\n        } catch (error) {\n          console.error(\"execExtRPC onResponse error\", error);\n          throw error;\n        }\n      },\n      onClose() {\n        reject(`Declined: Externally Halted`);\n      },\n      onCustomRpc(msg) {\n        customRpc?.receive(msg);\n      }\n    });\n    if (abortSignal) {\n      if (abortSignal.aborted) {\n        close();\n        reject(`Declined: Aborted`);\n      }\n      abortSignal.addEventListener(\"abort\", () => {\n        close();\n        reject(`Declined: Aborted`);\n      });\n    }\n  });\n}\n\nconst NOT_IMPLEMENTED = () => {\n  throw new Error(\"Strategy util has not been implemented on this platform\");\n};\nconst VIEWS = {\n  \"VIEW/IFRAME\": renderFrame,\n  \"VIEW/POP\": renderPop,\n  \"VIEW/TAB\": renderTab,\n  \"VIEW/MOBILE_BROWSER\": NOT_IMPLEMENTED,\n  \"VIEW/DEEPLINK\": NOT_IMPLEMENTED\n};\nasync function execLocal(service) {\n  let opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n    serviceEndpoint: () => {}\n  };\n  const {\n    serviceEndpoint\n  } = opts;\n  try {\n    return VIEWS[service.method](serviceEndpoint(service), opts);\n  } catch (error) {\n    console.error(\"execLocal({service, opts = {}})\", error, {\n      service,\n      opts\n    });\n    throw error;\n  }\n}\n\nconst coreStrategies = {\n  [_onflow_fcl_core__WEBPACK_IMPORTED_MODULE_0__.CORE_STRATEGIES[\"HTTP/RPC\"]]: (0,_onflow_fcl_core__WEBPACK_IMPORTED_MODULE_0__.getExecHttpPost)(execLocal),\n  [_onflow_fcl_core__WEBPACK_IMPORTED_MODULE_0__.CORE_STRATEGIES[\"HTTP/POST\"]]: (0,_onflow_fcl_core__WEBPACK_IMPORTED_MODULE_0__.getExecHttpPost)(execLocal),\n  [_onflow_fcl_core__WEBPACK_IMPORTED_MODULE_0__.CORE_STRATEGIES[\"IFRAME/RPC\"]]: execIframeRPC,\n  [_onflow_fcl_core__WEBPACK_IMPORTED_MODULE_0__.CORE_STRATEGIES[\"POP/RPC\"]]: execPopRPC,\n  [_onflow_fcl_core__WEBPACK_IMPORTED_MODULE_0__.CORE_STRATEGIES[\"TAB/RPC\"]]: execTabRPC,\n  [_onflow_fcl_core__WEBPACK_IMPORTED_MODULE_0__.CORE_STRATEGIES[\"EXT/RPC\"]]: execExtRPC\n};\n\nconst isServerSide = () => typeof window === \"undefined\";\nconst safeParseJSON = str => {\n  if (str == null) return null;\n  try {\n    return JSON.parse(str);\n  } catch (error) {\n    return null;\n  }\n};\nconst SESSION_STORAGE = {\n  can: !isServerSide() && !!window.sessionStorage,\n  get: async key => safeParseJSON(sessionStorage.getItem(key)),\n  put: async (key, value) => sessionStorage.setItem(key, JSON.stringify(value))\n};\nconst LOCAL_STORAGE = {\n  can: !isServerSide() && !!window.localStorage,\n  get: async key => safeParseJSON(localStorage.getItem(key)),\n  put: async (key, value) => localStorage.setItem(key, JSON.stringify(value))\n};\n\nconst isServer = typeof window === \"undefined\";\nconst getMetadata = config => {\n  const appTitle = config[\"app.detail.title\"];\n  const appIcon = config[\"app.detail.icon\"];\n  const appDescription = config[\"app.detail.description\"];\n  const appUrl = config[\"app.detail.url\"];\n  return {\n    name: appTitle ?? document.title,\n    description: appDescription ?? \"\",\n    url: appUrl ?? window.location.origin,\n    icons: appIcon ? [appIcon] : []\n  };\n};\nfunction initFclWcLoader() {\n  // We cannot load WalletConnect plugin on server side\n  if (isServer) {\n    return;\n  }\n\n  // Use previous configuration to check for changes & notify the user that this is not possible\n  let lastConfig = null;\n\n  // Only the first configuration will be used\n  let hasLoaded = false;\n  _onflow_config__WEBPACK_IMPORTED_MODULE_3__.config.subscribe(async fullConfig => {\n    const wcConfig = {\n      \"walletconnect.projectId\": fullConfig[\"walletconnect.projectId\"],\n      \"walletconnect.disableNotifications\": fullConfig[\"walletconnect.disableNotifications\"],\n      \"app.detail.title\": fullConfig[\"app.detail.title\"],\n      \"app.detail.icon\": fullConfig[\"app.detail.icon\"],\n      \"app.detail.description\": fullConfig[\"app.detail.description\"],\n      \"app.detail.url\": fullConfig[\"app.detail.url\"]\n    };\n    const projectId = wcConfig[\"walletconnect.projectId\"];\n    const disableNotifications = wcConfig[\"walletconnect.disableNotifications\"];\n\n    // Check if the plugin is already loaded by this loader, but with different configuration\n    // The plugin can only be loaded once\n    const previousConfig = lastConfig;\n    lastConfig = JSON.stringify(wcConfig, null, 2);\n    if (hasLoaded) {\n      if (previousConfig !== lastConfig) {\n        console.warn(`FCL WalletConnect Plugin has been already loaded with different configuration. It is not possible to change the configuration after the plugin has been loaded.\n\nPrevious configuration:\n${previousConfig}\n\nCurrent configuration:\n${lastConfig}`);\n      }\n      return;\n    }\n\n    // If the configuration is not set, we do not load the plugin\n    const isConfigured = !!projectId;\n    if (!isConfigured) {\n      return;\n    }\n    (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_4__.invariant)(!!projectId, \"FCL Configuration value for 'walletconnect.projectId' is required\");\n\n    // Check if the plugin is already loaded manually\n    // Usually this won't happen as it is more likely that the plugin will be loaded by this loader\n    // before the developer has a chance to load it manually, but it's good to check\n    if (_onflow_fcl_core__WEBPACK_IMPORTED_MODULE_0__.pluginRegistry.getPlugins().has(_onflow_fcl_wc__WEBPACK_IMPORTED_MODULE_2__.SERVICE_PLUGIN_NAME)) {\n      if (!hasLoaded) {\n        console.warn(\"It seems like the FCL WalletConnect plugins has been already loaded manually. This is no longer necessary, please see the documentation for more information.\");\n      }\n      hasLoaded = true;\n      return;\n    }\n    hasLoaded = true;\n\n    // Load the plugin if not already loaded\n    // We must lazy load the plugin to avoid race conditions\n    // where the developer attempts to use the plugin before\n    // our loader applies the configuration\n    const {\n      providerPromise: _clientPromise,\n      FclWcServicePlugin\n    } = _onflow_fcl_wc__WEBPACK_IMPORTED_MODULE_2__.initLazy({\n      projectId,\n      metadata: getMetadata(wcConfig),\n      disableNotifications: disableNotifications\n    });\n    _onflow_fcl_core__WEBPACK_IMPORTED_MODULE_0__.pluginRegistry.add([FclWcServicePlugin]);\n  });\n}\n\nconst discoveryOpts = {\n  execStrategy: execStrategyHook\n};\nconst currentUser = (0,_onflow_fcl_core__WEBPACK_IMPORTED_MODULE_0__.getCurrentUser)({\n  platform: \"web\",\n  discovery: discoveryOpts,\n  getStorageProvider: async () => {\n    return (await _onflow_config__WEBPACK_IMPORTED_MODULE_3__.config.get(\"fcl.storage\")) || LOCAL_STORAGE;\n  }\n});\nconst mutate = (0,_onflow_fcl_core__WEBPACK_IMPORTED_MODULE_0__.getMutate)(currentUser);\nconst authenticate = function () {\n  let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  return currentUser().authenticate(opts);\n};\nconst unauthenticate = () => currentUser().unauthenticate();\nconst reauthenticate = function () {\n  let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  currentUser().unauthenticate();\n  return currentUser().authenticate(opts);\n};\nconst signUp = function () {\n  let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  return currentUser().authenticate(opts);\n};\nconst logIn = function () {\n  let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  return currentUser().authenticate(opts);\n};\nconst authz = currentUser().authorization;\n(0,_onflow_config__WEBPACK_IMPORTED_MODULE_3__.config)(getDefaultConfig());\n(0,_onflow_fcl_core__WEBPACK_IMPORTED_MODULE_0__.initServiceRegistry)({\n  coreStrategies\n});\n\n// Automatically load fcl-wc plugin\n// Based on the user's config\ninitFclWcLoader();\n\n\n//# sourceMappingURL=fcl.module.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/@onflow/fcl/dist/fcl.module.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/@onflow/rlp/dist/rlp.module.js":
/*!******************************************************!*\
  !*** ../node_modules/@onflow/rlp/dist/rlp.module.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Buffer: () => (/* reexport safe */ buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer),\n/* harmony export */   decode: () => (/* binding */ decode),\n/* harmony export */   encode: () => (/* binding */ encode),\n/* harmony export */   getLength: () => (/* binding */ getLength),\n/* harmony export */   toBuffer: () => (/* binding */ toBuffer)\n/* harmony export */ });\n/* harmony import */ var buffer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! buffer */ \"buffer\");\n/* harmony import */ var buffer__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(buffer__WEBPACK_IMPORTED_MODULE_0__);\n\n\n\n/**\n * Built on top of rlp library, removing the BN dependency for the flow.\n * Package : https://github.com/ethereumjs/rlp\n * RLP License : https://github.com/ethereumjs/rlp/blob/master/LICENSE\n *\n * ethereumjs/rlp is licensed under the\n * Mozilla Public License 2.0\n * Permissions of this weak copyleft license are conditioned on making available source code of licensed files and modifications of those files under the same license (or in certain cases, one of the GNU licenses). Copyright and license notices must be preserved. Contributors provide an express grant of patent rights. However, a larger work using the licensed work may be distributed under different terms and without source code for files added in the larger work.\n */\n\n/**\n * @param input - will be converted to buffer\n * @returns returns buffer of encoded data\n */\nfunction encode(input) {\n  if (Array.isArray(input)) {\n    const output = [];\n    for (let i = 0; i < input.length; i++) {\n      output.push(encode(input[i]));\n    }\n    const buf = buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.concat(output);\n    return buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.concat([encodeLength(buf.length, 192), buf]);\n  } else {\n    const inputBuf = toBuffer(input);\n    return inputBuf.length === 1 && inputBuf[0] < 128 ? inputBuf : buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.concat([encodeLength(inputBuf.length, 128), inputBuf]);\n  }\n}\n\n/**\n * Parse integers. Check if there is no leading zeros\n * @param v The value to parse\n * @param base The base to parse the integer into\n */\nfunction safeParseInt(v, base) {\n  if (v.slice(0, 2) === \"00\") {\n    throw new Error(\"invalid RLP: extra zeros\");\n  }\n  return parseInt(v, base);\n}\nfunction encodeLength(len, offset) {\n  if (len < 56) {\n    return buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.from([len + offset]);\n  } else {\n    const hexLength = intToHex(len);\n    const lLength = hexLength.length / 2;\n    const firstByte = intToHex(offset + 55 + lLength);\n    return buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.from(firstByte + hexLength, \"hex\");\n  }\n}\n\n/**\n * Built on top of rlp library, removing the BN dependency for the flow.\n * Package : https://github.com/ethereumjs/rlp\n * RLP License : https://github.com/ethereumjs/rlp/blob/master/LICENSE\n *\n * ethereumjs/rlp is licensed under the\n * Mozilla Public License 2.0\n * Permissions of this weak copyleft license are conditioned on making available source code of licensed files and modifications of those files under the same license (or in certain cases, one of the GNU licenses). Copyright and license notices must be preserved. Contributors provide an express grant of patent rights. However, a larger work using the licensed work may be distributed under different terms and without source code for files added in the larger work.\n */\n\n/**\n * @param input - will be converted to buffer\n * @param stream Is the input a stream (false by default)\n * @returns returns buffer of encoded data\n */\nfunction decode(input, stream) {\n  if (stream === void 0) {\n    stream = false;\n  }\n  if (!input || input.length === 0) {\n    return buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.from([]);\n  }\n  const inputBuffer = toBuffer(input);\n  const decoded = _decode(inputBuffer);\n  if (stream) {\n    return decoded;\n  }\n  if (decoded.remainder.length !== 0) {\n    throw new Error(\"invalid remainder\");\n  }\n  return decoded.data;\n}\n\n/**\n * Get the length of the RLP input\n * @param input\n * @returns The length of the input or an empty Buffer if no input\n */\nfunction getLength(input) {\n  const inputBuffer = toBuffer(input);\n  if (inputBuffer.length === 0) {\n    return 0;\n  }\n  const firstByte = inputBuffer[0];\n  if (firstByte <= 0x7f) {\n    return inputBuffer.length;\n  } else if (firstByte <= 0xb7) {\n    return firstByte - 0x7f;\n  } else if (firstByte <= 0xbf) {\n    return firstByte - 0xb6;\n  } else if (firstByte <= 0xf7) {\n    // a list between  0-55 bytes long\n    return firstByte - 0xbf;\n  } else {\n    // a list  over 55 bytes long\n    const llength = firstByte - 0xf6;\n    const length = safeParseInt(inputBuffer.slice(1, llength).toString(\"hex\"), 16);\n    return llength + length;\n  }\n}\n\n/** Decode an input with RLP */\nfunction _decode(input) {\n  let length, llength, data, innerRemainder, d;\n  const decoded = [];\n  const firstByte = input[0];\n  if (firstByte <= 0x7f) {\n    // a single byte whose value is in the [0x00, 0x7f] range, that byte is its own RLP encoding.\n    return {\n      data: input.slice(0, 1),\n      remainder: input.slice(1)\n    };\n  } else if (firstByte <= 0xb7) {\n    // string is 0-55 bytes long. A single byte with value 0x80 plus the length of the string followed by the string\n    // The range of the first byte is [0x80, 0xb7]\n    length = firstByte - 0x7f;\n    // set 0x80 null to 0\n    if (firstByte === 0x80) {\n      data = buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.from([]);\n    } else {\n      data = input.slice(1, length);\n    }\n    if (length === 2 && data[0] < 0x80) {\n      throw new Error(\"invalid rlp encoding: byte must be less 0x80\");\n    }\n    return {\n      data: data,\n      remainder: input.slice(length)\n    };\n  } else if (firstByte <= 0xbf) {\n    llength = firstByte - 0xb6;\n    length = safeParseInt(input.slice(1, llength).toString(\"hex\"), 16);\n    data = input.slice(llength, length + llength);\n    if (data.length < length) {\n      throw new Error(\"invalid RLP\");\n    }\n    return {\n      data: data,\n      remainder: input.slice(length + llength)\n    };\n  } else if (firstByte <= 0xf7) {\n    // a list between  0-55 bytes long\n    length = firstByte - 0xbf;\n    innerRemainder = input.slice(1, length);\n    while (innerRemainder.length) {\n      d = _decode(innerRemainder);\n      decoded.push(d.data);\n      innerRemainder = d.remainder;\n    }\n    return {\n      data: decoded,\n      remainder: input.slice(length)\n    };\n  } else {\n    // a list  over 55 bytes long\n    llength = firstByte - 0xf6;\n    length = safeParseInt(input.slice(1, llength).toString(\"hex\"), 16);\n    const totalLength = llength + length;\n    if (totalLength > input.length) {\n      throw new Error(\"invalid rlp: total length is larger than the data\");\n    }\n    innerRemainder = input.slice(llength, totalLength);\n    if (innerRemainder.length === 0) {\n      throw new Error(\"invalid rlp, List has a invalid length\");\n    }\n    while (innerRemainder.length) {\n      d = _decode(innerRemainder);\n      decoded.push(d.data);\n      innerRemainder = d.remainder;\n    }\n    return {\n      data: decoded,\n      remainder: input.slice(totalLength)\n    };\n  }\n}\n/** Check if a string is prefixed by 0x */\nfunction isHexPrefixed(str) {\n  return str.slice(0, 2) === \"0x\";\n}\n/** Removes 0x from a given String */\nfunction stripHexPrefix(str) {\n  if (typeof str !== \"string\") {\n    return str;\n  }\n  return isHexPrefixed(str) ? str.slice(2) : str;\n}\n/** Transform an integer into its hexadecimal value */\nfunction intToHex(integer) {\n  if (integer < 0) {\n    throw new Error(\"Invalid integer as argument, must be unsigned!\");\n  }\n  const hex = integer.toString(16);\n  return hex.length % 2 ? \"0\" + hex : hex;\n}\n/** Pad a string to be even */\nfunction padToEven(a) {\n  return a.length % 2 ? \"0\" + a : a;\n}\n/** Transform an integer into a Buffer */\nfunction intToBuffer(integer) {\n  const hex = intToHex(integer);\n  return buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.from(hex, \"hex\");\n}\n\n/** Transform anything into a Buffer */\nfunction toBuffer(v) {\n  if (!buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.isBuffer(v)) {\n    if (typeof v === \"string\") {\n      if (isHexPrefixed(v)) {\n        return buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.from(padToEven(stripHexPrefix(v)), \"hex\");\n      } else {\n        return buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.from(v);\n      }\n    } else if (typeof v === \"number\") {\n      if (!v) {\n        return buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.from([]);\n      } else {\n        return intToBuffer(v);\n      }\n    } else if (v === null || v === undefined) {\n      return buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.from([]);\n    } else if (v instanceof Uint8Array) {\n      return buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.from(v);\n    } else {\n      throw new Error(\"invalid type\");\n    }\n  }\n  return v;\n}\n\n\n//# sourceMappingURL=rlp.module.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/@onflow/rlp/dist/rlp.module.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/@onflow/sdk/dist/sdk.module.js":
/*!******************************************************!*\
  !*** ../node_modules/@onflow/sdk/dist/sdk.module.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   FvmErrorCode: () => (/* reexport safe */ _onflow_typedefs__WEBPACK_IMPORTED_MODULE_2__.FvmErrorCode),\n/* harmony export */   HashAlgorithm: () => (/* reexport safe */ _onflow_typedefs__WEBPACK_IMPORTED_MODULE_2__.HashAlgorithm),\n/* harmony export */   InteractionResolverKind: () => (/* reexport safe */ _onflow_typedefs__WEBPACK_IMPORTED_MODULE_2__.InteractionResolverKind),\n/* harmony export */   InteractionStatus: () => (/* reexport safe */ _onflow_typedefs__WEBPACK_IMPORTED_MODULE_2__.InteractionStatus),\n/* harmony export */   InteractionTag: () => (/* reexport safe */ _onflow_typedefs__WEBPACK_IMPORTED_MODULE_2__.InteractionTag),\n/* harmony export */   SignatureAlgorithm: () => (/* reexport safe */ _onflow_typedefs__WEBPACK_IMPORTED_MODULE_2__.SignatureAlgorithm),\n/* harmony export */   SubscriptionTopic: () => (/* reexport safe */ _onflow_typedefs__WEBPACK_IMPORTED_MODULE_2__.SubscriptionTopic),\n/* harmony export */   SubscriptionsNotSupportedError: () => (/* binding */ SubscriptionsNotSupportedError),\n/* harmony export */   TestUtils: () => (/* binding */ index),\n/* harmony export */   TransactionExecutionStatus: () => (/* reexport safe */ _onflow_typedefs__WEBPACK_IMPORTED_MODULE_2__.TransactionExecutionStatus),\n/* harmony export */   TransactionRole: () => (/* reexport safe */ _onflow_typedefs__WEBPACK_IMPORTED_MODULE_2__.TransactionRole),\n/* harmony export */   VERSION: () => (/* binding */ VERSION),\n/* harmony export */   account: () => (/* binding */ account),\n/* harmony export */   arg: () => (/* binding */ arg),\n/* harmony export */   args: () => (/* binding */ args),\n/* harmony export */   atBlockHeight: () => (/* binding */ atBlockHeight),\n/* harmony export */   atBlockId: () => (/* binding */ atBlockId),\n/* harmony export */   atLatestBlock: () => (/* binding */ atLatestBlock),\n/* harmony export */   authorization: () => (/* binding */ authorization),\n/* harmony export */   authorizations: () => (/* binding */ authorizations),\n/* harmony export */   block: () => (/* binding */ block),\n/* harmony export */   build: () => (/* binding */ build),\n/* harmony export */   cadence: () => (/* reexport safe */ _onflow_util_template__WEBPACK_IMPORTED_MODULE_9__.template),\n/* harmony export */   cdc: () => (/* reexport safe */ _onflow_util_template__WEBPACK_IMPORTED_MODULE_9__.template),\n/* harmony export */   config: () => (/* reexport safe */ _onflow_config__WEBPACK_IMPORTED_MODULE_3__.config),\n/* harmony export */   createSignableVoucher: () => (/* binding */ createSignableVoucher),\n/* harmony export */   decode: () => (/* binding */ decode),\n/* harmony export */   destroy: () => (/* binding */ destroy),\n/* harmony export */   encodeMessageFromSignable: () => (/* binding */ encodeMessageFromSignable),\n/* harmony export */   encodeTransactionEnvelope: () => (/* binding */ encodeTransactionEnvelope),\n/* harmony export */   encodeTransactionPayload: () => (/* binding */ encodeTransactionPayload),\n/* harmony export */   encodeTxIdFromVoucher: () => (/* binding */ encodeTxIdFromVoucher),\n/* harmony export */   flowEmulator: () => (/* binding */ flowEmulator),\n/* harmony export */   flowMainnet: () => (/* binding */ flowMainnet),\n/* harmony export */   flowTestnet: () => (/* binding */ flowTestnet),\n/* harmony export */   get: () => (/* binding */ get),\n/* harmony export */   getAccount: () => (/* binding */ getAccount),\n/* harmony export */   getBlock: () => (/* binding */ getBlock),\n/* harmony export */   getBlockHeader: () => (/* binding */ getBlockHeader),\n/* harmony export */   getCollection: () => (/* binding */ getCollection),\n/* harmony export */   getEvents: () => (/* binding */ getEvents),\n/* harmony export */   getEventsAtBlockHeightRange: () => (/* binding */ getEventsAtBlockHeightRange),\n/* harmony export */   getEventsAtBlockIds: () => (/* binding */ getEventsAtBlockIds),\n/* harmony export */   getNetworkParameters: () => (/* binding */ getNetworkParameters),\n/* harmony export */   getNodeVersionInfo: () => (/* binding */ getNodeVersionInfo),\n/* harmony export */   getTransaction: () => (/* binding */ getTransaction),\n/* harmony export */   getTransactionStatus: () => (/* binding */ getTransactionStatus),\n/* harmony export */   initInteraction: () => (/* binding */ initInteraction),\n/* harmony export */   interaction: () => (/* binding */ interaction),\n/* harmony export */   invariant: () => (/* binding */ invariant),\n/* harmony export */   isBad: () => (/* binding */ isBad),\n/* harmony export */   isGetAccount: () => (/* binding */ isGetAccount),\n/* harmony export */   isGetBlock: () => (/* binding */ isGetBlock),\n/* harmony export */   isGetBlockHeader: () => (/* binding */ isGetBlockHeader),\n/* harmony export */   isGetCollection: () => (/* binding */ isGetCollection),\n/* harmony export */   isGetEvents: () => (/* binding */ isGetEvents),\n/* harmony export */   isGetNetworkParameters: () => (/* binding */ isGetNetworkParameters),\n/* harmony export */   isGetNodeVersionInfo: () => (/* binding */ isGetNodeVersionInfo),\n/* harmony export */   isGetTransaction: () => (/* binding */ isGetTransaction),\n/* harmony export */   isGetTransactionStatus: () => (/* binding */ isGetTransactionStatus),\n/* harmony export */   isOk: () => (/* binding */ isOk),\n/* harmony export */   isPing: () => (/* binding */ isPing),\n/* harmony export */   isScript: () => (/* binding */ isScript),\n/* harmony export */   isTransaction: () => (/* binding */ isTransaction),\n/* harmony export */   isUnknown: () => (/* binding */ isUnknown),\n/* harmony export */   limit: () => (/* binding */ limit),\n/* harmony export */   nodeVersionInfo: () => (/* binding */ nodeVersionInfo),\n/* harmony export */   param: () => (/* binding */ param),\n/* harmony export */   params: () => (/* binding */ params),\n/* harmony export */   payer: () => (/* binding */ payer),\n/* harmony export */   ping: () => (/* binding */ ping),\n/* harmony export */   pipe: () => (/* binding */ pipe),\n/* harmony export */   proposer: () => (/* binding */ proposer),\n/* harmony export */   put: () => (/* binding */ put),\n/* harmony export */   ref: () => (/* binding */ ref),\n/* harmony export */   resolve: () => (/* binding */ resolve),\n/* harmony export */   resolveAccounts: () => (/* binding */ resolveAccounts),\n/* harmony export */   resolveArguments: () => (/* binding */ resolveArguments),\n/* harmony export */   resolveCadence: () => (/* binding */ resolveCadence),\n/* harmony export */   resolveFinalNormalization: () => (/* binding */ resolveFinalNormalization),\n/* harmony export */   resolveProposerSequenceNumber: () => (/* binding */ resolveProposerSequenceNumber),\n/* harmony export */   resolveRefBlockId: () => (/* binding */ resolveRefBlockId),\n/* harmony export */   resolveSignatures: () => (/* binding */ resolveSignatures),\n/* harmony export */   resolveValidators: () => (/* binding */ resolveValidators),\n/* harmony export */   resolveVoucherIntercept: () => (/* binding */ resolveVoucherIntercept),\n/* harmony export */   response: () => (/* binding */ response),\n/* harmony export */   script: () => (/* binding */ script),\n/* harmony export */   send: () => (/* binding */ send),\n/* harmony export */   subscribe: () => (/* binding */ subscribe),\n/* harmony export */   subscribeEvents: () => (/* binding */ subscribeEvents),\n/* harmony export */   subscribeRaw: () => (/* binding */ subscribeRaw),\n/* harmony export */   t: () => (/* reexport module object */ _onflow_types__WEBPACK_IMPORTED_MODULE_10__),\n/* harmony export */   transaction: () => (/* binding */ transaction),\n/* harmony export */   update: () => (/* binding */ update),\n/* harmony export */   validator: () => (/* binding */ validator),\n/* harmony export */   voucherIntercept: () => (/* binding */ voucherIntercept),\n/* harmony export */   voucherToTxId: () => (/* binding */ voucherToTxId),\n/* harmony export */   why: () => (/* binding */ why)\n/* harmony export */ });\n/* harmony import */ var _onflow_util_logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @onflow/util-logger */ \"(ssr)/../node_modules/@onflow/util-logger/dist/util-logger.module.js\");\n/* harmony import */ var _onflow_util_invariant__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @onflow/util-invariant */ \"(ssr)/../node_modules/@onflow/util-invariant/dist/util-invariant.module.js\");\n/* harmony import */ var uuid__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! uuid */ \"(ssr)/../node_modules/uuid/dist/esm-node/v4.js\");\n/* harmony import */ var _onflow_typedefs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @onflow/typedefs */ \"(ssr)/../node_modules/@onflow/typedefs/dist/typedefs.module.js\");\n/* harmony import */ var _onflow_config__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @onflow/config */ \"(ssr)/../node_modules/@onflow/config/dist/config.module.js\");\n/* harmony import */ var _onflow_rlp__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @onflow/rlp */ \"(ssr)/../node_modules/@onflow/rlp/dist/rlp.module.js\");\n/* harmony import */ var _onflow_transport_http__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @onflow/transport-http */ \"(ssr)/../node_modules/@onflow/transport-http/dist/index.module.js\");\n/* harmony import */ var _onflow_util_address__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @onflow/util-address */ \"(ssr)/../node_modules/@onflow/util-address/dist/util-address.module.js\");\n/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! events */ \"events\");\n/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(events__WEBPACK_IMPORTED_MODULE_7__);\n/* harmony import */ var sha3__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! sha3 */ \"(ssr)/../node_modules/sha3/index.js\");\n/* harmony import */ var _onflow_util_template__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @onflow/util-template */ \"(ssr)/../node_modules/@onflow/util-template/dist/template.module.js\");\n/* harmony import */ var _onflow_types__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @onflow/types */ \"(ssr)/../node_modules/@onflow/types/dist/types.module.js\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nconst ACCT = `{\n  \"kind\":\"${_onflow_typedefs__WEBPACK_IMPORTED_MODULE_2__.InteractionResolverKind.ACCOUNT}\",\n  \"tempId\":null,\n  \"addr\":null,\n  \"keyId\":null,\n  \"sequenceNum\":null,\n  \"signature\":null,\n  \"signingFunction\":null,\n  \"resolve\":null,\n  \"role\": {\n    \"proposer\":false,\n    \"authorizer\":false,\n    \"payer\":false,\n    \"param\":false\n  }\n}`;\nconst ARG = `{\n  \"kind\":\"${_onflow_typedefs__WEBPACK_IMPORTED_MODULE_2__.InteractionResolverKind.ARGUMENT}\",\n  \"tempId\":null,\n  \"value\":null,\n  \"asArgument\":null,\n  \"xform\":null,\n  \"resolve\": null,\n  \"resolveArgument\": null\n}`;\nconst IX = `{\n  \"tag\":\"${_onflow_typedefs__WEBPACK_IMPORTED_MODULE_2__.InteractionTag.UNKNOWN}\",\n  \"assigns\":{},\n  \"status\":\"${_onflow_typedefs__WEBPACK_IMPORTED_MODULE_2__.InteractionStatus.OK}\",\n  \"reason\":null,\n  \"accounts\":{},\n  \"params\":{},\n  \"arguments\":{},\n  \"message\": {\n    \"cadence\":null,\n    \"refBlock\":null,\n    \"computeLimit\":null,\n    \"proposer\":null,\n    \"payer\":null,\n    \"authorizations\":[],\n    \"params\":[],\n    \"arguments\":[]\n  },\n  \"proposer\":null,\n  \"authorizations\":[],\n  \"payer\":[],\n  \"events\": {\n    \"eventType\":null,\n    \"start\":null,\n    \"end\":null,\n    \"blockIds\":[]\n  },\n  \"subscribeEvents\": {\n    \"startBlockId\":null,\n    \"startHeight\":null,\n    \"eventTypes\":null,\n    \"addresses\":null,\n    \"contracts\":null,\n    \"heartbeatInterval\":null\n  },\n  \"transaction\": {\n    \"id\":null\n  },\n  \"block\": {\n    \"id\":null,\n    \"height\":null,\n    \"isSealed\":null\n  },\n  \"account\": {\n    \"addr\":null\n  },\n  \"collection\": {\n    \"id\":null\n  }\n}`;\nconst KEYS = new Set(Object.keys(JSON.parse(IX)));\nconst initInteraction = () => JSON.parse(IX);\n/**\n * @deprecated\n */\nconst interaction = () => {\n  _onflow_util_logger__WEBPACK_IMPORTED_MODULE_0__.log.deprecate({\n    pkg: \"FCL/SDK\",\n    message: `The interaction been deprecated from the Flow JS-SDK/FCL. use initInteraction instead`,\n    transition: \"https://github.com/onflow/flow-js-sdk/blob/master/packages/sdk/TRANSITIONS.md#0010-deprecate-interaction\",\n    level: _onflow_util_logger__WEBPACK_IMPORTED_MODULE_0__.LEVELS.warn\n  });\n  return initInteraction();\n};\nconst isNumber$1 = d => typeof d === \"number\";\nconst isArray$1 = d => Array.isArray(d);\nconst isObj = d => d !== null && typeof d === \"object\";\nconst isNull = d => d == null;\nconst isFn$3 = d => typeof d === \"function\";\nconst isInteraction = ix => {\n  if (!isObj(ix) || isNull(ix) || isNumber$1(ix)) return false;\n  for (let key of KEYS) if (!ix.hasOwnProperty(key)) return false;\n  return true;\n};\nconst Ok = ix => {\n  ix.status = _onflow_typedefs__WEBPACK_IMPORTED_MODULE_2__.InteractionStatus.OK;\n  return ix;\n};\nconst Bad = (ix, reason) => {\n  ix.status = _onflow_typedefs__WEBPACK_IMPORTED_MODULE_2__.InteractionStatus.BAD;\n  ix.reason = reason;\n  return ix;\n};\nconst makeIx = wat => ix => {\n  ix.tag = wat;\n  return Ok(ix);\n};\nconst prepAccountKeyId = acct => {\n  if (acct.keyId == null) return acct;\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_1__.invariant)(!isNaN(parseInt(acct.keyId.toString())), \"account.keyId must be an integer\");\n  return {\n    ...acct,\n    keyId: parseInt(acct.keyId.toString())\n  };\n};\nconst initAccount = () => JSON.parse(ACCT);\nconst prepAccount = function (acct) {\n  let opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return ix => {\n    (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_1__.invariant)(typeof acct === \"function\" || typeof acct === \"object\", \"prepAccount must be passed an authorization function or an account object\");\n    (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_1__.invariant)(opts.role != null, \"Account must have a role\");\n    const ACCOUNT = initAccount();\n    const role = opts.role;\n    const tempId = (0,uuid__WEBPACK_IMPORTED_MODULE_11__[\"default\"])();\n    let account = {\n      ...acct\n    };\n    if (acct.authorization && isFn$3(acct.authorization)) account = {\n      resolve: acct.authorization\n    };\n    if (!acct.authorization && isFn$3(acct)) account = {\n      resolve: acct\n    };\n    const resolve = account.resolve;\n    if (resolve) {\n      account.resolve = function (acct) {\n        for (var _len = arguments.length, rest = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n          rest[_key - 1] = arguments[_key];\n        }\n        return [resolve, prepAccountKeyId].reduce(async (d, fn) => fn(await d, ...rest), acct);\n      };\n    }\n    account = prepAccountKeyId(account);\n    ix.accounts[tempId] = {\n      ...ACCOUNT,\n      tempId,\n      ...account,\n      role: {\n        ...ACCOUNT.role,\n        ...(typeof acct.role === \"object\" ? acct.role : {}),\n        ...(role ? {\n          [role]: true\n        } : {})\n      }\n    };\n    if (role === _onflow_typedefs__WEBPACK_IMPORTED_MODULE_2__.TransactionRole.AUTHORIZER) {\n      ix.authorizations.push(tempId);\n    } else if (role === _onflow_typedefs__WEBPACK_IMPORTED_MODULE_2__.TransactionRole.PAYER) {\n      ix.payer.push(tempId);\n    } else if (role) {\n      ix[role] = tempId;\n    }\n    return ix;\n  };\n};\nconst makeArgument = arg => ix => {\n  let tempId = (0,uuid__WEBPACK_IMPORTED_MODULE_11__[\"default\"])();\n  ix.message.arguments.push(tempId);\n  ix.arguments[tempId] = JSON.parse(ARG);\n  ix.arguments[tempId].tempId = tempId;\n  ix.arguments[tempId].value = arg.value;\n  ix.arguments[tempId].asArgument = arg.asArgument;\n  ix.arguments[tempId].xform = arg.xform;\n  ix.arguments[tempId].resolve = arg.resolve;\n  ix.arguments[tempId].resolveArgument = isFn$3(arg.resolveArgument) ? arg.resolveArgument.bind(arg) : arg.resolveArgument;\n  return Ok(ix);\n};\nconst makeUnknown /*                 */ = makeIx(_onflow_typedefs__WEBPACK_IMPORTED_MODULE_2__.InteractionTag.UNKNOWN);\nconst makeScript /*                  */ = makeIx(_onflow_typedefs__WEBPACK_IMPORTED_MODULE_2__.InteractionTag.SCRIPT);\nconst makeTransaction /*             */ = makeIx(_onflow_typedefs__WEBPACK_IMPORTED_MODULE_2__.InteractionTag.TRANSACTION);\nconst makeGetTransactionStatus /*    */ = makeIx(_onflow_typedefs__WEBPACK_IMPORTED_MODULE_2__.InteractionTag.GET_TRANSACTION_STATUS);\nconst makeGetTransaction /*          */ = makeIx(_onflow_typedefs__WEBPACK_IMPORTED_MODULE_2__.InteractionTag.GET_TRANSACTION);\nconst makeGetAccount /*              */ = makeIx(_onflow_typedefs__WEBPACK_IMPORTED_MODULE_2__.InteractionTag.GET_ACCOUNT);\nconst makeGetEvents /*               */ = makeIx(_onflow_typedefs__WEBPACK_IMPORTED_MODULE_2__.InteractionTag.GET_EVENTS);\nconst makePing /*                    */ = makeIx(_onflow_typedefs__WEBPACK_IMPORTED_MODULE_2__.InteractionTag.PING);\nconst makeGetBlock /*                */ = makeIx(_onflow_typedefs__WEBPACK_IMPORTED_MODULE_2__.InteractionTag.GET_BLOCK);\nconst makeGetBlockHeader /*          */ = makeIx(_onflow_typedefs__WEBPACK_IMPORTED_MODULE_2__.InteractionTag.GET_BLOCK_HEADER);\nconst makeGetCollection /*           */ = makeIx(_onflow_typedefs__WEBPACK_IMPORTED_MODULE_2__.InteractionTag.GET_COLLECTION);\nconst makeGetNetworkParameters /*    */ = makeIx(_onflow_typedefs__WEBPACK_IMPORTED_MODULE_2__.InteractionTag.GET_NETWORK_PARAMETERS);\nconst makeSubscribeEvents /*         */ = makeIx(_onflow_typedefs__WEBPACK_IMPORTED_MODULE_2__.InteractionTag.SUBSCRIBE_EVENTS);\nconst makeGetNodeVerionInfo /*       */ = makeIx(_onflow_typedefs__WEBPACK_IMPORTED_MODULE_2__.InteractionTag.GET_NODE_VERSION_INFO);\nconst is = wat => ix => ix.tag === wat;\nconst isUnknown /*                 */ = is(_onflow_typedefs__WEBPACK_IMPORTED_MODULE_2__.InteractionTag.UNKNOWN);\nconst isScript /*                  */ = is(_onflow_typedefs__WEBPACK_IMPORTED_MODULE_2__.InteractionTag.SCRIPT);\nconst isTransaction /*             */ = is(_onflow_typedefs__WEBPACK_IMPORTED_MODULE_2__.InteractionTag.TRANSACTION);\nconst isGetTransactionStatus /*    */ = is(_onflow_typedefs__WEBPACK_IMPORTED_MODULE_2__.InteractionTag.GET_TRANSACTION_STATUS);\nconst isGetTransaction /*          */ = is(_onflow_typedefs__WEBPACK_IMPORTED_MODULE_2__.InteractionTag.GET_TRANSACTION);\nconst isGetAccount /*              */ = is(_onflow_typedefs__WEBPACK_IMPORTED_MODULE_2__.InteractionTag.GET_ACCOUNT);\nconst isGetEvents /*               */ = is(_onflow_typedefs__WEBPACK_IMPORTED_MODULE_2__.InteractionTag.GET_EVENTS);\nconst isPing /*                    */ = is(_onflow_typedefs__WEBPACK_IMPORTED_MODULE_2__.InteractionTag.PING);\nconst isGetBlock /*                */ = is(_onflow_typedefs__WEBPACK_IMPORTED_MODULE_2__.InteractionTag.GET_BLOCK);\nconst isGetBlockHeader /*          */ = is(_onflow_typedefs__WEBPACK_IMPORTED_MODULE_2__.InteractionTag.GET_BLOCK_HEADER);\nconst isGetCollection /*           */ = is(_onflow_typedefs__WEBPACK_IMPORTED_MODULE_2__.InteractionTag.GET_COLLECTION);\nconst isGetNetworkParameters /*    */ = is(_onflow_typedefs__WEBPACK_IMPORTED_MODULE_2__.InteractionTag.GET_NETWORK_PARAMETERS);\nconst isGetNodeVersionInfo /*      */ = is(_onflow_typedefs__WEBPACK_IMPORTED_MODULE_2__.InteractionTag.GET_NODE_VERSION_INFO);\nconst isSubscribeEvents /*         */ = is(_onflow_typedefs__WEBPACK_IMPORTED_MODULE_2__.InteractionTag.SUBSCRIBE_EVENTS);\nconst isOk /*  */ = ix => ix.status === _onflow_typedefs__WEBPACK_IMPORTED_MODULE_2__.InteractionStatus.OK;\nconst isBad /* */ = ix => ix.status === _onflow_typedefs__WEBPACK_IMPORTED_MODULE_2__.InteractionStatus.BAD;\nconst why /*   */ = ix => ix.reason;\nconst isAccount /*  */ = account => account.kind === _onflow_typedefs__WEBPACK_IMPORTED_MODULE_2__.InteractionResolverKind.ACCOUNT;\nconst isArgument /* */ = argument => argument.kind === _onflow_typedefs__WEBPACK_IMPORTED_MODULE_2__.InteractionResolverKind.ARGUMENT;\nconst hardMode = ix => {\n  for (let key of Object.keys(ix)) {\n    if (!KEYS.has(key)) throw new Error(`\"${key}\" is an invalid root level Interaction property.`);\n  }\n  return ix;\n};\nconst recPipe = async function (ix) {\n  let fns = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  try {\n    ix = hardMode(await ix);\n    if (isBad(ix)) throw new Error(`Interaction Error: ${ix.reason}`);\n    if (!fns.length) return ix;\n    const [hd, ...rest] = fns;\n    const cur = await hd;\n    if (isFn$3(cur)) return recPipe(cur(ix), rest);\n    if (isNull(cur) || !cur) return recPipe(ix, rest);\n    if (isInteraction(cur)) return recPipe(cur, rest);\n    throw new Error(\"Invalid Interaction Composition\");\n  } catch (e) {\n    throw e;\n  }\n};\n\n/**\n * @description Async pipe function to compose interactions\n * @returns An interaction object\n */\n\nfunction pipe() {\n  for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n    args[_key2] = arguments[_key2];\n  }\n  const [arg1, arg2] = args;\n  if (isArray$1(arg1)) return d => pipe(d, arg1);\n  const ix = arg1;\n  const fns = arg2;\n  return recPipe(ix, fns);\n}\nconst identity$1 = function (v) {\n  return v;\n};\nconst get = function (ix, key) {\n  let fallback = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : undefined;\n  return ix.assigns[key] == null ? fallback : ix.assigns[key];\n};\nconst put = (key, value) => ix => {\n  ix.assigns[key] = value;\n  return Ok(ix);\n};\nconst update = function (key) {\n  let fn = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : identity$1;\n  return ix => {\n    ix.assigns[key] = fn(ix.assigns[key], ix);\n    return Ok(ix);\n  };\n};\nconst destroy = key => ix => {\n  delete ix.assigns[key];\n  return Ok(ix);\n};\n\nvar ixModule = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  Bad: Bad,\n  Ok: Ok,\n  destroy: destroy,\n  get: get,\n  initAccount: initAccount,\n  initInteraction: initInteraction,\n  interaction: interaction,\n  isAccount: isAccount,\n  isArgument: isArgument,\n  isArray: isArray$1,\n  isBad: isBad,\n  isFn: isFn$3,\n  isGetAccount: isGetAccount,\n  isGetBlock: isGetBlock,\n  isGetBlockHeader: isGetBlockHeader,\n  isGetCollection: isGetCollection,\n  isGetEvents: isGetEvents,\n  isGetNetworkParameters: isGetNetworkParameters,\n  isGetNodeVersionInfo: isGetNodeVersionInfo,\n  isGetTransaction: isGetTransaction,\n  isGetTransactionStatus: isGetTransactionStatus,\n  isInteraction: isInteraction,\n  isNull: isNull,\n  isNumber: isNumber$1,\n  isObj: isObj,\n  isOk: isOk,\n  isPing: isPing,\n  isScript: isScript,\n  isSubscribeEvents: isSubscribeEvents,\n  isTransaction: isTransaction,\n  isUnknown: isUnknown,\n  makeArgument: makeArgument,\n  makeGetAccount: makeGetAccount,\n  makeGetBlock: makeGetBlock,\n  makeGetBlockHeader: makeGetBlockHeader,\n  makeGetCollection: makeGetCollection,\n  makeGetEvents: makeGetEvents,\n  makeGetNetworkParameters: makeGetNetworkParameters,\n  makeGetNodeVerionInfo: makeGetNodeVerionInfo,\n  makeGetTransaction: makeGetTransaction,\n  makeGetTransactionStatus: makeGetTransactionStatus,\n  makePing: makePing,\n  makeScript: makeScript,\n  makeSubscribeEvents: makeSubscribeEvents,\n  makeTransaction: makeTransaction,\n  makeUnknown: makeUnknown,\n  pipe: pipe,\n  prepAccount: prepAccount,\n  put: put,\n  update: update,\n  why: why\n});\n\n/**\n * @description A builder function that creates an interaction\n * @param fns The functions to apply to the interaction\n * @returns A promise of an interaction\n */\nfunction build() {\n  let fns = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  return pipe(initInteraction(), fns);\n}\n\nconst DEFAULT_RESPONSE = {\n  tag: null,\n  transaction: null,\n  transactionStatus: null,\n  transactionId: null,\n  encodedData: null,\n  events: null,\n  event: null,\n  accountStatusEvent: null,\n  account: null,\n  block: null,\n  blockHeader: null,\n  blockDigest: null,\n  latestBlock: null,\n  collection: null,\n  networkParameters: null,\n  streamConnection: null,\n  heartbeat: null,\n  nodeVersionInfo: null\n};\nconst response = () => ({\n  ...DEFAULT_RESPONSE\n});\n\n/**\n * @description A builder function that returns the interaction to get the latest block\n * @param isSealed Whether or not the block should be sealed\n * @returns A function that processes an interaction object\n */\nfunction getBlock() {\n  let isSealed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n  return pipe([makeGetBlock, ix => {\n    ix.block.isSealed = isSealed;\n    return Ok(ix);\n  }]);\n}\n\n/**\n * @description A builder function that returns the interaction to get an account by address\n * @param addr The address of the account to get\n * @returns A function that processes an interaction object\n */\nfunction getAccount(addr) {\n  return pipe([makeGetAccount, ix => {\n    ix.account.addr = (0,_onflow_util_address__WEBPACK_IMPORTED_MODULE_6__.sansPrefix)(addr);\n    return Ok(ix);\n  }]);\n}\n\n/**\n * Pipes a generic stream of data into a granular stream of decoded data\n * The data is decoded per channel and emitted in order\n */\nconst decodeStream = (stream, decodeResponse, customDecoders) => {\n  const newStream = new (events__WEBPACK_IMPORTED_MODULE_7___default())();\n  let queue = taskQueue();\n\n  // Data is separated by topic & the decoded data is emitted in order\n  // All topics for a given message will be emitted synchronously before moving on to the next message\n  // The streamReady promise ensures that the data is emitted in order and avoids race conditions when decoding\n  stream.on(\"data\", async data => {\n    const topics = Object.keys(data).filter(key => data[key] != null && key !== \"tag\");\n    let newDataPromise = Promise.all(topics.map(async channel => {\n      const partialResponse = {\n        [channel]: data[channel]\n      };\n      const message = await decodeResponse(partialResponse, customDecoders);\n      return {\n        channel,\n        message\n      };\n    }));\n    queue.push(async () => {\n      // Emit the new data\n      const newData = await newDataPromise;\n      newData.forEach(_ref => {\n        let {\n          channel,\n          message\n        } = _ref;\n        newStream.emit(channel, message);\n      });\n    });\n  });\n\n  // Relay events from the original stream\n  // These events are delivered in order as well so that the stream will\n  // not emit more data after it has announced a contradictory state\n  function relayEvent(event) {\n    stream.on(event, message => {\n      queue.push(async () => {\n        newStream.emit(event, message);\n      });\n    });\n  }\n  relayEvent(\"close\");\n  relayEvent(\"error\");\n  return {\n    on(channel, callback) {\n      newStream.on(channel, callback);\n      return this;\n    },\n    off(channel, callback) {\n      newStream.off(channel, callback);\n      return this;\n    },\n    close: () => {\n      stream.close();\n    }\n  };\n};\nfunction taskQueue() {\n  let queue = [];\n  let running = false;\n  async function run() {\n    if (running) return;\n    running = true;\n    while (queue.length > 0) {\n      const task = queue.shift();\n      await task?.();\n    }\n    running = false;\n  }\n  return {\n    push: task => {\n      queue.push(task);\n      run();\n    }\n  };\n}\n\nconst latestBlockDeprecationNotice = () => {\n  _onflow_util_logger__WEBPACK_IMPORTED_MODULE_0__.log.deprecate({\n    pkg: \"@onflow/decode\",\n    subject: \"Operating upon data of the latestBlock field of the response object\",\n    transition: \"https://github.com/onflow/flow-js-sdk/blob/master/packages/decode/WARNINGS.md#0001-Deprecating-latestBlock-field\"\n  });\n};\nconst decodeImplicit = async i => i;\nconst decodeVoid = async () => null;\nconst decodeType = async type => {\n  return type.staticType;\n};\nconst decodeOptional = async (optional, decoders, stack) => optional ? await recurseDecode(optional, decoders, stack) : null;\nconst decodeArray = async (array, decoders, stack) => await Promise.all(array.map(v => new Promise(async res => res(await recurseDecode(v, decoders, [...stack, v.type])))));\nconst decodeDictionary = async (dictionary, decoders, stack) => await dictionary.reduce(async (acc, v) => {\n  acc = await acc;\n  acc[await recurseDecode(v.key, decoders, [...stack, v.key])] = await recurseDecode(v.value, decoders, [...stack, v.key]);\n  return acc;\n}, Promise.resolve({}));\nconst decodeComposite = async (composite, decoders, stack) => {\n  const decoded = await composite.fields.reduce(async (acc, v) => {\n    acc = await acc;\n    acc[v.name] = await recurseDecode(v.value, decoders, [...stack, v.name]);\n    return acc;\n  }, Promise.resolve({}));\n  const decoder = composite.id && decoderLookup(decoders, composite.id);\n  return decoder ? await decoder(decoded) : decoded;\n};\nconst decodeInclusiveRange = async (range, decoders, stack) => {\n  // Recursive decode for start, end, and step\n  // We don't do all fields just in case there are future API changes\n  // where fields added and are not Cadence values\n  const keys = [\"start\", \"end\", \"step\"];\n  const decoded = await Object.keys(range).reduce(async (acc, key) => {\n    acc = await acc;\n    if (keys.includes(key)) {\n      acc[key] = await recurseDecode(range[key], decoders, [...stack, key]);\n    }\n    return acc;\n  }, Promise.resolve({}));\n  return decoded;\n};\nconst defaultDecoders = {\n  UInt: decodeImplicit,\n  Int: decodeImplicit,\n  UInt8: decodeImplicit,\n  Int8: decodeImplicit,\n  UInt16: decodeImplicit,\n  Int16: decodeImplicit,\n  UInt32: decodeImplicit,\n  Int32: decodeImplicit,\n  UInt64: decodeImplicit,\n  Int64: decodeImplicit,\n  UInt128: decodeImplicit,\n  Int128: decodeImplicit,\n  UInt256: decodeImplicit,\n  Int256: decodeImplicit,\n  Word8: decodeImplicit,\n  Word16: decodeImplicit,\n  Word32: decodeImplicit,\n  Word64: decodeImplicit,\n  Word128: decodeImplicit,\n  Word256: decodeImplicit,\n  UFix64: decodeImplicit,\n  Fix64: decodeImplicit,\n  String: decodeImplicit,\n  Character: decodeImplicit,\n  Bool: decodeImplicit,\n  Address: decodeImplicit,\n  Void: decodeVoid,\n  Optional: decodeOptional,\n  Reference: decodeImplicit,\n  Array: decodeArray,\n  Dictionary: decodeDictionary,\n  Event: decodeComposite,\n  Resource: decodeComposite,\n  Struct: decodeComposite,\n  Enum: decodeComposite,\n  Type: decodeType,\n  Path: decodeImplicit,\n  Capability: decodeImplicit,\n  InclusiveRange: decodeInclusiveRange\n};\nconst decoderLookup = (decoders, lookup) => {\n  const found = Object.keys(decoders).find(decoder => {\n    if (/^\\/.*\\/$/.test(decoder)) {\n      const reg = new RegExp(decoder.substring(1, decoder.length - 1));\n      return reg.test(lookup);\n    }\n    return decoder === lookup;\n  });\n  return lookup && found && decoders[found];\n};\nconst recurseDecode = async (decodeInstructions, decoders, stack) => {\n  let decoder = decoderLookup(decoders, decodeInstructions.type);\n  if (!decoder) throw new Error(`Undefined Decoder Error: ${decodeInstructions.type}@${stack.join(\".\")}`);\n  return await decoder(decodeInstructions.value, decoders, stack);\n};\n\n/**\n * @description - Decodes a response from Flow into JSON\n * @param decodeInstructions - The response object from Flow\n * @param customDecoders - An object of custom decoders\n * @param stack - The stack of the current decoding\n * @returns - The decoded response\n */\nconst decode$1 = async function (decodeInstructions) {\n  let customDecoders = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  let stack = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n  // Filter out all default decoders which are overridden by a custom decoder regex\n  const filteredDecoders = Object.keys(defaultDecoders).filter(decoder => !Object.keys(customDecoders).find(customDecoder => new RegExp(customDecoder).test(decoder))).reduce((decoders, decoderKey) => {\n    decoders[decoderKey] = defaultDecoders[decoderKey];\n    return decoders;\n  }, customDecoders);\n  const decoders = {\n    ...filteredDecoders,\n    ...customDecoders\n  };\n  return recurseDecode(decodeInstructions, decoders, stack);\n};\nconst decodeResponse = async function (response) {\n  let customDecoders = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  if (response.encodedData) {\n    return decode$1(response.encodedData, customDecoders);\n  } else if (response.transactionStatus) {\n    return {\n      ...response.transactionStatus,\n      events: await Promise.all(response.transactionStatus.events.map(async function decodeEvents(e) {\n        return {\n          type: e.type,\n          transactionId: e.transactionId,\n          transactionIndex: e.transactionIndex,\n          eventIndex: e.eventIndex,\n          data: await decode$1(e.payload, customDecoders)\n        };\n      }))\n    };\n  } else if (response.transaction) {\n    return response.transaction;\n  } else if (response.events) {\n    return await Promise.all(response.events.map(async function decodeEvents(e) {\n      return {\n        blockId: e.blockId,\n        blockHeight: e.blockHeight,\n        blockTimestamp: e.blockTimestamp,\n        type: e.type,\n        transactionId: e.transactionId,\n        transactionIndex: e.transactionIndex,\n        eventIndex: e.eventIndex,\n        data: await decode$1(e.payload, customDecoders)\n      };\n    }));\n  } else if (response.event) {\n    const {\n      payload,\n      ...rest\n    } = response.event;\n    return {\n      ...rest,\n      data: await decode$1(payload, customDecoders)\n    };\n  } else if (response.accountStatusEvent) {\n    const {\n      payload,\n      ...rest\n    } = response.accountStatusEvent;\n    return {\n      ...rest,\n      data: await decode$1(payload, customDecoders)\n    };\n  } else if (response.account) {\n    return response.account;\n  } else if (response.block) {\n    return response.block;\n  } else if (response.blockHeader) {\n    return response.blockHeader;\n  } else if (response.blockDigest) {\n    return response.blockDigest;\n  } else if (response.latestBlock) {\n    latestBlockDeprecationNotice();\n    return response.latestBlock;\n  } else if (response.transactionId) {\n    return response.transactionId;\n  } else if (response.collection) {\n    return response.collection;\n  } else if (response.networkParameters) {\n    const prefixRegex = /^flow-/;\n    const rawChainId = response.networkParameters.chainId;\n    let formattedChainId;\n    if (rawChainId === \"flow-emulator\") {\n      formattedChainId = \"local\";\n    } else if (prefixRegex.test(rawChainId)) {\n      formattedChainId = rawChainId.replace(prefixRegex, \"\");\n    } else {\n      formattedChainId = rawChainId;\n    }\n    return {\n      chainId: formattedChainId\n    };\n  } else if (response.streamConnection) {\n    return decodeStream(response.streamConnection, decodeResponse, customDecoders);\n  } else if (response.heartbeat) {\n    return response.heartbeat;\n  } else if (response.nodeVersionInfo) {\n    return response.nodeVersionInfo;\n  }\n  return null;\n};\n\nconst isFn$2 = v => typeof v === \"function\";\nconst isString$1 = v => typeof v === \"string\";\nconst oldIdentifierPatternFn = () => /\\b(0x\\w+)\\b/g;\nfunction isOldIdentifierSyntax(cadence) {\n  return oldIdentifierPatternFn().test(cadence);\n}\nconst newIdentifierPatternFn = () => /import\\s+\"(\\w+)\"/g;\nfunction isNewIdentifierSyntax(cadence) {\n  return newIdentifierPatternFn().test(cadence);\n}\nfunction getContractIdentifierSyntaxMatches(cadence) {\n  return cadence.matchAll(newIdentifierPatternFn());\n}\nasync function resolveCadence(ix) {\n  if (!isTransaction(ix) && !isScript(ix)) return ix;\n  var cadence = get(ix, \"ix.cadence\");\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_1__.invariant)(isFn$2(cadence) || isString$1(cadence), \"Cadence needs to be a function or a string.\");\n  if (isFn$2(cadence)) cadence = await cadence({});\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_1__.invariant)(isString$1(cadence), \"Cadence needs to be a string at this point.\");\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_1__.invariant)(!isOldIdentifierSyntax(cadence) || !isNewIdentifierSyntax(cadence), \"Both account identifier and contract identifier syntax not simultaneously supported.\");\n  if (isOldIdentifierSyntax(cadence)) {\n    cadence = await (0,_onflow_config__WEBPACK_IMPORTED_MODULE_3__.config)().where(/^0x/).then(d => Object.entries(d).reduce((cadence, _ref) => {\n      let [key, value] = _ref;\n      const regex = new RegExp(\"(\\\\b\" + key + \"\\\\b)\", \"g\");\n      return cadence.replace(regex, value);\n    }, cadence));\n  }\n  if (isNewIdentifierSyntax(cadence)) {\n    for (const [fullMatch, contractName] of getContractIdentifierSyntaxMatches(cadence)) {\n      const address = await (0,_onflow_config__WEBPACK_IMPORTED_MODULE_3__.config)().get(`system.contracts.${contractName}`);\n      if (address) {\n        cadence = cadence.replace(fullMatch, `import ${contractName} from ${(0,_onflow_util_address__WEBPACK_IMPORTED_MODULE_6__.withPrefix)(address)}`);\n      } else {\n        _onflow_util_logger__WEBPACK_IMPORTED_MODULE_0__.log({\n          title: \"Contract Placeholder not found\",\n          message: `Cannot find a value for contract placeholder ${contractName}. Please add to your flow.json or explicitly add it to the config 'contracts.*' namespace.`,\n          level: _onflow_util_logger__WEBPACK_IMPORTED_MODULE_0__.LEVELS.warn\n        });\n      }\n    }\n  }\n\n  // We need to move this over in any case.\n  ix.message.cadence = cadence;\n  return ix;\n}\n\nconst isFn$1 = v => typeof v === \"function\";\nfunction cast(arg) {\n  // prettier-ignore\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_1__.invariant)(typeof arg.xform != null, `No type specified for argument: ${arg.value}`);\n  if (isFn$1(arg.xform)) return arg.xform(arg.value);\n  if (isFn$1(arg.xform.asArgument)) return arg.xform.asArgument(arg.value);\n\n  // prettier-ignore\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_1__.invariant)(false, `Invalid Argument`, arg);\n}\nasync function handleArgResolution(arg) {\n  let depth = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 3;\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_1__.invariant)(depth > 0, `Argument Resolve Recursion Limit Exceeded for Arg: ${arg.tempId}`);\n  if (isFn$1(arg.resolveArgument)) {\n    const resolvedArg = await arg.resolveArgument();\n    return handleArgResolution(resolvedArg, depth - 1);\n  } else {\n    return arg;\n  }\n}\nasync function resolveArguments(ix) {\n  if (isTransaction(ix) || isScript(ix)) {\n    for (let [id, arg] of Object.entries(ix.arguments)) {\n      const res = await handleArgResolution(arg);\n      ix.arguments[id].asArgument = cast(res);\n    }\n  }\n  return ix;\n}\n\nconst encodeTransactionPayload = tx => prependTransactionDomainTag(rlpEncode(preparePayload(tx)));\nconst encodeTransactionEnvelope = tx => prependTransactionDomainTag(rlpEncode(prepareEnvelope(tx)));\nconst encodeTxIdFromVoucher = voucher => sha3_256(rlpEncode(prepareVoucher(voucher)));\nconst rightPaddedHexBuffer = (value, pad) => _onflow_rlp__WEBPACK_IMPORTED_MODULE_4__.Buffer.from(value.padEnd(pad * 2, \"0\"), \"hex\");\nconst leftPaddedHexBuffer = (value, pad) => _onflow_rlp__WEBPACK_IMPORTED_MODULE_4__.Buffer.from(value.padStart(pad * 2, \"0\"), \"hex\");\nconst TRANSACTION_DOMAIN_TAG = rightPaddedHexBuffer(_onflow_rlp__WEBPACK_IMPORTED_MODULE_4__.Buffer.from(\"FLOW-V0.0-transaction\").toString(\"hex\"), 32).toString(\"hex\");\nconst prependTransactionDomainTag = tx => TRANSACTION_DOMAIN_TAG + tx;\nconst addressBuffer = addr => leftPaddedHexBuffer(addr, 8);\nconst blockBuffer = block => leftPaddedHexBuffer(block, 32);\nconst argumentToString = arg => _onflow_rlp__WEBPACK_IMPORTED_MODULE_4__.Buffer.from(JSON.stringify(arg), \"utf8\");\nconst scriptBuffer = script => _onflow_rlp__WEBPACK_IMPORTED_MODULE_4__.Buffer.from(script, \"utf8\");\nconst signatureBuffer = signature => _onflow_rlp__WEBPACK_IMPORTED_MODULE_4__.Buffer.from(signature, \"hex\");\nconst rlpEncode = v => {\n  return (0,_onflow_rlp__WEBPACK_IMPORTED_MODULE_4__.encode)(v).toString(\"hex\");\n};\nconst sha3_256 = msg => {\n  const sha = new sha3__WEBPACK_IMPORTED_MODULE_8__.SHA3(256);\n  sha.update(_onflow_rlp__WEBPACK_IMPORTED_MODULE_4__.Buffer.from(msg, \"hex\"));\n  return sha.digest().toString(\"hex\");\n};\nconst preparePayload = tx => {\n  validatePayload(tx);\n  return [scriptBuffer(tx.cadence || \"\"), tx.arguments.map(argumentToString), blockBuffer(tx.refBlock || \"\"), tx.computeLimit, addressBuffer((0,_onflow_util_address__WEBPACK_IMPORTED_MODULE_6__.sansPrefix)(tx.proposalKey.address || \"\")), tx.proposalKey.keyId, tx.proposalKey.sequenceNum, addressBuffer((0,_onflow_util_address__WEBPACK_IMPORTED_MODULE_6__.sansPrefix)(tx.payer)), tx.authorizers.map(authorizer => addressBuffer((0,_onflow_util_address__WEBPACK_IMPORTED_MODULE_6__.sansPrefix)(authorizer)))];\n};\nconst prepareEnvelope = tx => {\n  validateEnvelope(tx);\n  return [preparePayload(tx), preparePayloadSignatures(tx)];\n};\nconst preparePayloadSignatures = tx => {\n  const signers = collectSigners(tx);\n  return tx.payloadSigs?.map(sig => {\n    return {\n      signerIndex: signers.get((0,_onflow_util_address__WEBPACK_IMPORTED_MODULE_6__.sansPrefix)(sig.address)) || \"\",\n      keyId: sig.keyId,\n      sig: sig.sig\n    };\n  }).sort((a, b) => {\n    if (a.signerIndex > b.signerIndex) return 1;\n    if (a.signerIndex < b.signerIndex) return -1;\n    if (a.keyId > b.keyId) return 1;\n    if (a.keyId < b.keyId) return -1;\n    return 0;\n  }).map(sig => {\n    return [sig.signerIndex, sig.keyId, signatureBuffer(sig.sig)];\n  });\n};\nconst collectSigners = tx => {\n  const signers = new Map();\n  let i = 0;\n  const addSigner = addr => {\n    if (!signers.has(addr)) {\n      signers.set(addr, i);\n      i++;\n    }\n  };\n  if (tx.proposalKey.address) {\n    addSigner(tx.proposalKey.address);\n  }\n  addSigner(tx.payer);\n  tx.authorizers.forEach(addSigner);\n  return signers;\n};\nconst prepareVoucher = voucher => {\n  validateVoucher(voucher);\n  const signers = collectSigners(voucher);\n  const prepareSigs = sigs => {\n    return sigs.map(_ref => {\n      let {\n        address,\n        keyId,\n        sig\n      } = _ref;\n      return {\n        signerIndex: signers.get((0,_onflow_util_address__WEBPACK_IMPORTED_MODULE_6__.sansPrefix)(address)) || \"\",\n        keyId,\n        sig\n      };\n    }).sort((a, b) => {\n      if (a.signerIndex > b.signerIndex) return 1;\n      if (a.signerIndex < b.signerIndex) return -1;\n      if (a.keyId > b.keyId) return 1;\n      if (a.keyId < b.keyId) return -1;\n      return 0;\n    }).map(sig => {\n      return [sig.signerIndex, sig.keyId, signatureBuffer(sig.sig)];\n    });\n  };\n  return [[scriptBuffer(voucher.cadence), voucher.arguments.map(argumentToString), blockBuffer(voucher.refBlock), voucher.computeLimit, addressBuffer((0,_onflow_util_address__WEBPACK_IMPORTED_MODULE_6__.sansPrefix)(voucher.proposalKey.address)), voucher.proposalKey.keyId, voucher.proposalKey.sequenceNum, addressBuffer((0,_onflow_util_address__WEBPACK_IMPORTED_MODULE_6__.sansPrefix)(voucher.payer)), voucher.authorizers.map(authorizer => addressBuffer((0,_onflow_util_address__WEBPACK_IMPORTED_MODULE_6__.sansPrefix)(authorizer)))], prepareSigs(voucher.payloadSigs), prepareSigs(voucher.envelopeSigs)];\n};\nconst validatePayload = tx => {\n  payloadFields.forEach(field => checkField(tx, field));\n  proposalKeyFields.forEach(field => checkField(tx.proposalKey, field, \"proposalKey\"));\n};\nconst validateEnvelope = tx => {\n  payloadSigsFields.forEach(field => checkField(tx, field));\n  tx.payloadSigs?.forEach((sig, index) => {\n    payloadSigFields.forEach(field => checkField(sig, field, \"payloadSigs\", index));\n  });\n};\nconst validateVoucher = voucher => {\n  payloadFields.forEach(field => checkField(voucher, field));\n  proposalKeyFields.forEach(field => checkField(voucher.proposalKey, field, \"proposalKey\"));\n  payloadSigsFields.forEach(field => checkField(voucher, field));\n  voucher.payloadSigs.forEach((sig, index) => {\n    payloadSigFields.forEach(field => checkField(sig, field, \"payloadSigs\", index));\n  });\n  envelopeSigsFields.forEach(field => checkField(voucher, field));\n  voucher.envelopeSigs.forEach((sig, index) => {\n    envelopeSigFields.forEach(field => checkField(sig, field, \"envelopeSigs\", index));\n  });\n};\nconst isNumber = v => typeof v === \"number\";\nconst isString = v => typeof v === \"string\";\nconst isObject = v => v !== null && typeof v === \"object\";\nconst isArray = v => isObject(v) && v instanceof Array;\nconst payloadFields = [{\n  name: \"cadence\",\n  check: isString\n}, {\n  name: \"arguments\",\n  check: isArray\n}, {\n  name: \"refBlock\",\n  check: isString,\n  defaultVal: \"0\"\n}, {\n  name: \"computeLimit\",\n  check: isNumber\n}, {\n  name: \"proposalKey\",\n  check: isObject\n}, {\n  name: \"payer\",\n  check: isString\n}, {\n  name: \"authorizers\",\n  check: isArray\n}];\nconst proposalKeyFields = [{\n  name: \"address\",\n  check: isString\n}, {\n  name: \"keyId\",\n  check: isNumber\n}, {\n  name: \"sequenceNum\",\n  check: isNumber\n}];\nconst payloadSigsFields = [{\n  name: \"payloadSigs\",\n  check: isArray\n}];\nconst payloadSigFields = [{\n  name: \"address\",\n  check: isString\n}, {\n  name: \"keyId\",\n  check: isNumber\n}, {\n  name: \"sig\",\n  check: isString\n}];\nconst envelopeSigsFields = [{\n  name: \"envelopeSigs\",\n  check: isArray\n}];\nconst envelopeSigFields = [{\n  name: \"address\",\n  check: isString\n}, {\n  name: \"keyId\",\n  check: isNumber\n}, {\n  name: \"sig\",\n  check: isString\n}];\nconst checkField = (obj, field, base, index) => {\n  const {\n    name,\n    check,\n    defaultVal\n  } = field;\n  if (obj[name] == null && defaultVal != null) obj[name] = defaultVal;\n  if (obj[name] == null) throw missingFieldError(name, base, index);\n  if (!check(obj[name])) throw invalidFieldError(name, base, index);\n};\nconst printFieldName = (field, base, index) => {\n  if (!!base) return index == null ? `${base}.${field}` : `${base}.${index}.${field}`;\n  return field;\n};\nconst missingFieldError = (field, base, index) => new Error(`Missing field ${printFieldName(field, base, index)}`);\nconst invalidFieldError = (field, base, index) => new Error(`Invalid field ${printFieldName(field, base, index)}`);\n\nfunction findInsideSigners(ix) {\n  // Inside Signers Are: (authorizers + proposer) - payer\n  let inside = new Set(ix.authorizations);\n  if (ix.proposer) {\n    inside.add(ix.proposer);\n  }\n  if (Array.isArray(ix.payer)) {\n    ix.payer.forEach(p => inside.delete(p));\n  } else {\n    inside.delete(ix.payer);\n  }\n  return Array.from(inside);\n}\nfunction findOutsideSigners(ix) {\n  // Outside Signers Are: (payer)\n  let outside = new Set(Array.isArray(ix.payer) ? ix.payer : [ix.payer]);\n  return Array.from(outside);\n}\nconst createSignableVoucher = ix => {\n  const buildAuthorizers = () => {\n    const authorizations = ix.authorizations.map(cid => (0,_onflow_util_address__WEBPACK_IMPORTED_MODULE_6__.withPrefix)(ix.accounts[cid].addr)).reduce((prev, current) => {\n      return prev.find(item => item === current) ? prev : [...prev, current];\n    }, []);\n    return authorizations;\n  };\n  const buildInsideSigners = () => findInsideSigners(ix).map(id => ({\n    address: (0,_onflow_util_address__WEBPACK_IMPORTED_MODULE_6__.withPrefix)(ix.accounts[id].addr),\n    keyId: ix.accounts[id].keyId,\n    sig: ix.accounts[id].signature\n  }));\n  const buildOutsideSigners = () => findOutsideSigners(ix).map(id => ({\n    address: (0,_onflow_util_address__WEBPACK_IMPORTED_MODULE_6__.withPrefix)(ix.accounts[id].addr),\n    keyId: ix.accounts[id].keyId,\n    sig: ix.accounts[id].signature\n  }));\n  const proposalKey = ix.proposer ? {\n    address: (0,_onflow_util_address__WEBPACK_IMPORTED_MODULE_6__.withPrefix)(ix.accounts[ix.proposer].addr),\n    keyId: ix.accounts[ix.proposer].keyId,\n    sequenceNum: ix.accounts[ix.proposer].sequenceNum\n  } : {};\n  return {\n    cadence: ix.message.cadence,\n    refBlock: ix.message.refBlock || null,\n    computeLimit: ix.message.computeLimit,\n    arguments: ix.message.arguments.map(id => ix.arguments[id].asArgument),\n    proposalKey,\n    payer: (0,_onflow_util_address__WEBPACK_IMPORTED_MODULE_6__.withPrefix)(ix.accounts[Array.isArray(ix.payer) ? ix.payer[0] : ix.payer].addr),\n    authorizers: buildAuthorizers(),\n    payloadSigs: buildInsideSigners(),\n    envelopeSigs: buildOutsideSigners()\n  };\n};\nconst voucherToTxId = voucher => {\n  return encodeTxIdFromVoucher(voucher);\n};\n\nconst MAX_DEPTH_LIMIT = 5;\nconst idof$1 = acct => `${(0,_onflow_util_address__WEBPACK_IMPORTED_MODULE_6__.withPrefix)(acct.addr)}-${acct.keyId}`;\nconst isFn = v => v && (Object.prototype.toString.call(v) === \"[object Function]\" || \"function\" === typeof v || v instanceof Function);\nconst genAccountId = function () {\n  for (var _len = arguments.length, ids = new Array(_len), _key = 0; _key < _len; _key++) {\n    ids[_key] = arguments[_key];\n  }\n  return ids.join(\"-\");\n};\nvar ROLES = /*#__PURE__*/function (ROLES) {\n  ROLES[\"PAYER\"] = \"payer\";\n  ROLES[\"PROPOSER\"] = \"proposer\";\n  ROLES[\"AUTHORIZATIONS\"] = \"authorizations\";\n  return ROLES;\n}(ROLES || {});\nfunction debug$1() {\n  const SPACE = \" \";\n  const SPACE_COUNT_PER_INDENT = 4;\n  const DEBUG_MESSAGE = [];\n  return [function () {\n    let msg = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n    let indent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    DEBUG_MESSAGE.push(Array(indent * SPACE_COUNT_PER_INDENT).fill(SPACE).join(\"-\") + msg);\n  }, function () {\n    return DEBUG_MESSAGE.reduce((prev, curr) => prev + \"\\n\" + curr);\n  }];\n}\nfunction recurseFlatMap(el) {\n  let depthLimit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 3;\n  if (depthLimit <= 0) return el;\n  if (!Array.isArray(el)) return el;\n  return recurseFlatMap(el.flatMap(e => e), depthLimit - 1);\n}\nfunction buildPreSignable(acct, ix) {\n  try {\n    return {\n      f_type: \"PreSignable\",\n      f_vsn: \"1.0.1\",\n      roles: acct.role,\n      cadence: ix.message.cadence,\n      args: ix.message.arguments.map(d => ix.arguments[d].asArgument),\n      data: {},\n      interaction: ix,\n      voucher: createSignableVoucher(ix)\n    };\n  } catch (error) {\n    console.error(\"buildPreSignable\", error);\n    throw error;\n  }\n}\nasync function removeUnusedIxAccounts(ix, opts) {\n  const payerTempIds = Array.isArray(ix.payer) ? ix.payer : [ix.payer];\n  const authorizersTempIds = Array.isArray(ix.authorizations) ? ix.authorizations : [ix.authorizations];\n  const proposerTempIds = ix.proposer === null ? [] : Array.isArray(ix.proposer) ? ix.proposer : [ix.proposer];\n  const ixAccountKeys = Object.keys(ix.accounts);\n  const uniqueTempIds = [...new Set(payerTempIds.concat(authorizersTempIds, proposerTempIds))];\n  for (const ixAccountKey of ixAccountKeys) {\n    if (!uniqueTempIds.find(id => id === ixAccountKey)) {\n      delete ix.accounts[ixAccountKey];\n    }\n  }\n}\nfunction addAccountToIx(ix, newAccount) {\n  if (typeof newAccount.addr === \"string\" && (typeof newAccount.keyId === \"number\" || typeof newAccount.keyId === \"string\")) {\n    newAccount.tempId = idof$1(newAccount);\n  } else {\n    newAccount.tempId = newAccount.tempId || (0,uuid__WEBPACK_IMPORTED_MODULE_11__[\"default\"])();\n  }\n  const existingAccount = ix.accounts[newAccount.tempId] || newAccount;\n  if (!ix.accounts[newAccount.tempId]) {\n    ix.accounts[newAccount.tempId] = newAccount;\n  }\n  ix.accounts[newAccount.tempId].role.proposer = existingAccount.role.proposer || newAccount.role.proposer;\n  ix.accounts[newAccount.tempId].role.payer = existingAccount.role.payer || newAccount.role.payer;\n  ix.accounts[newAccount.tempId].role.authorizer = existingAccount.role.authorizer || newAccount.role.authorizer;\n  return ix.accounts[newAccount.tempId];\n}\nfunction uniqueAccountsFlatMap(accounts) {\n  const flatMapped = recurseFlatMap(accounts);\n  const seen = new Set();\n  const uniqueAccountsFlatMapped = flatMapped.map(account => {\n    const accountId = genAccountId(account.tempId, account.role.payer, account.role.proposer, account.role.authorizer, account.role.param);\n    if (seen.has(accountId)) return null;\n    seen.add(accountId);\n    return account;\n  }).filter(e => e !== null);\n  return uniqueAccountsFlatMapped;\n}\n\n// Resolve single account, returns new account tempIds (if they exist)\nasync function resolveSingleAccount(ix, currentAccountTempId) {\n  let depthLimit = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : MAX_DEPTH_LIMIT;\n  let {\n    debugLogger\n  } = arguments.length > 3 ? arguments[3] : undefined;\n  if (depthLimit <= 0) {\n    throw new Error(`recurseResolveAccount Error: Depth limit (${MAX_DEPTH_LIMIT}) reached. Ensure your authorization functions resolve to an account after ${MAX_DEPTH_LIMIT} resolves.`);\n  }\n  let account = ix.accounts[currentAccountTempId];\n  if (!account) return [[], false];\n  debugLogger(`account: ${account.tempId}`, Math.max(MAX_DEPTH_LIMIT - depthLimit, 0));\n  if (account?.resolve) {\n    if (isFn(account?.resolve)) {\n      debugLogger(`account: ${account.tempId} -- cache MISS`, Math.max(MAX_DEPTH_LIMIT - depthLimit, 0));\n      const {\n        resolve,\n        ...accountWithoutResolve\n      } = account;\n      let resolvedAccounts = await resolve(accountWithoutResolve, buildPreSignable(accountWithoutResolve, ix));\n      resolvedAccounts = Array.isArray(resolvedAccounts) ? resolvedAccounts : [resolvedAccounts];\n      let flatResolvedAccounts = recurseFlatMap(resolvedAccounts);\n      flatResolvedAccounts = flatResolvedAccounts.map(flatResolvedAccount => addAccountToIx(ix, flatResolvedAccount));\n      account.resolve = flatResolvedAccounts.map(flatResolvedAccount => flatResolvedAccount.tempId);\n      account = addAccountToIx(ix, account);\n      return [flatResolvedAccounts.map(flatResolvedAccount => flatResolvedAccount.tempId), true];\n    } else {\n      debugLogger(`account: ${account.tempId} -- cache HIT`, Math.max(MAX_DEPTH_LIMIT - depthLimit, 0));\n      return [account.resolve, false];\n    }\n  }\n  return [account.tempId ? [account.tempId] : [], false];\n}\nconst getAccountTempIDs = rawTempIds => {\n  if (rawTempIds === null) {\n    return [];\n  }\n  return Array.isArray(rawTempIds) ? rawTempIds : [rawTempIds];\n};\nasync function replaceRoles(ix, oldAccountTempId, newAccounts) {\n  // Replace roles in the interaction with any resolved accounts\n  // e.g. payer -> [oldAccountTempId, anotherId] => payer -> [newAccountTempId, anotherId]\n  for (let role of Object.values(ROLES)) {\n    if (role === ROLES.AUTHORIZATIONS || role === ROLES.PAYER) {\n      ix[role] = getAccountTempIDs(ix[role]).reduce((acc, acctTempId) => {\n        if (acctTempId === oldAccountTempId) {\n          return acc.concat(...newAccounts.filter(x => {\n            return role === ROLES.PAYER && x.role.payer || role === ROLES.AUTHORIZATIONS && x.role.authorizer;\n          }).map(acct => acct.tempId));\n        }\n        return acc.concat(acctTempId);\n      }, []);\n    } else if (role === ROLES.PROPOSER) {\n      const proposerAccts = newAccounts.filter(x => x.role.proposer);\n      if (proposerAccts.length > 1) {\n        throw new Error(`replaceRoles Error: Multiple proposer keys were resolved, but only one is allowed`);\n      }\n      ix[role] = proposerAccts[0]?.tempId ?? ix[role];\n    }\n  }\n}\nasync function resolveAccountsByIds(ix, accountTempIds) {\n  let depthLimit = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : MAX_DEPTH_LIMIT;\n  let {\n    debugLogger\n  } = arguments.length > 3 ? arguments[3] : undefined;\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_1__.invariant)(ix && typeof ix === \"object\", \"resolveAccountType Error: ix not defined\");\n  let newTempIds = new Set();\n  for (let accountId of accountTempIds) {\n    let account = ix.accounts[accountId];\n    (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_1__.invariant)(Boolean(account), `resolveAccountType Error: account not found`);\n    const [resolvedAccountTempIds, foundNewAccounts] = await resolveSingleAccount(ix, accountId, depthLimit, {\n      debugLogger\n    });\n\n    // If new accounts were resolved, add them to the set so they can be explored next iteration\n    if (foundNewAccounts) {\n      const resolvedAccounts = resolvedAccountTempIds.map(resolvedAccountTempId => ix.accounts[resolvedAccountTempId]);\n      const flatResolvedAccounts = uniqueAccountsFlatMap(resolvedAccounts);\n\n      // Add new tempIds to the set so they can be used next iteration\n      flatResolvedAccounts.forEach(x => newTempIds.add(x.tempId));\n\n      // Update any roles in the interaction based on the new accounts\n      replaceRoles(ix, accountId, flatResolvedAccounts);\n    }\n  }\n\n  // Ensure all payers are of the same account\n  let payerAddress;\n  for (const payerTempID of ix[ROLES.PAYER]) {\n    let pAcct = ix.accounts[payerTempID];\n    if (!payerAddress) payerAddress = pAcct.addr;else if (payerAddress !== pAcct.addr) {\n      throw new Error(\"resolveAccountType Error: payers from different accounts detected\");\n    }\n  }\n  return newTempIds;\n}\nasync function resolveAccounts(ix) {\n  let opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  if (isTransaction(ix)) {\n    if (!Array.isArray(ix.payer)) {\n      _onflow_util_logger__WEBPACK_IMPORTED_MODULE_0__.log.deprecate({\n        pkg: \"FCL\",\n        subject: '\"ix.payer\" must be an array. Support for ix.payer as a singular',\n        message: \"See changelog for more info.\"\n      });\n    }\n    let [debugLogger, getDebugMessage] = debug$1();\n    try {\n      // BFS, resolving one level of accounts at a time\n      let depthLimit = MAX_DEPTH_LIMIT;\n      let frontier = new Set([...getAccountTempIDs(ix[ROLES.PAYER]), ...getAccountTempIDs(ix[ROLES.PROPOSER]), ...getAccountTempIDs(ix[ROLES.AUTHORIZATIONS])]);\n      while (frontier.size > 0) {\n        if (depthLimit <= 0) {\n          throw new Error(`resolveAccounts Error: Depth limit (${MAX_DEPTH_LIMIT}) reached. Ensure your authorization functions resolve to an account after ${MAX_DEPTH_LIMIT} resolves.`);\n        }\n        frontier = await resolveAccountsByIds(ix, frontier, depthLimit, {\n          debugLogger\n        });\n        depthLimit--;\n      }\n      await removeUnusedIxAccounts(ix, {\n        debugLogger\n      });\n\n      // Ensure at least one account for each role is resolved (except for authorizations)\n      for (const role of Object.values(ROLES)) {\n        (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_1__.invariant)(getAccountTempIDs(ix[role]).length > 0 || role === ROLES.AUTHORIZATIONS, `resolveAccountType Error: no accounts for role \"${role}\" found`);\n      }\n      if (opts.enableDebug) {\n        console.debug(getDebugMessage());\n      }\n    } catch (error) {\n      console.error(\"=== SAD PANDA ===\\n\\n\", error, \"\\n\\n=== SAD PANDA ===\");\n      throw error;\n    }\n  }\n  return ix;\n}\n\nasync function resolveSignatures(ix) {\n  if (isTransaction(ix)) {\n    try {\n      let insideSigners = findInsideSigners(ix);\n      const insidePayload = encodeTransactionPayload(prepForEncoding(ix));\n\n      // Promise.all could potentially break the flow if there are multiple inside signers trying to resolve at the same time\n      // causing multiple triggers of authz function that tries to render multiple auth iiframes/tabs/extensions\n      // as an alternative, use this:\n      // for(const insideSigner of insideSigners) {\n      //   await fetchSignature(ix, insidePayload)(insideSigner);\n      // }\n      await Promise.all(insideSigners.map(fetchSignature(ix, insidePayload)));\n      let outsideSigners = findOutsideSigners(ix);\n      const outsidePayload = encodeTransactionEnvelope({\n        ...prepForEncoding(ix),\n        payloadSigs: insideSigners.map(id => ({\n          address: ix.accounts[id].addr || \"\",\n          keyId: ix.accounts[id].keyId || 0,\n          sig: ix.accounts[id].signature || \"\"\n        }))\n      });\n\n      // Promise.all could potentially break the flow if there are multiple outside signers trying to resolve at the same time\n      // causing multiple triggers of authz function that tries to render multiple auth iframes/tabs/extensions\n      // as an alternative, use this:\n      // for(const outsideSigner of outsideSigners) {\n      //   await fetchSignature(ix, outsidePayload)(outsideSigner);\n      // }\n      await Promise.all(outsideSigners.map(fetchSignature(ix, outsidePayload)));\n    } catch (error) {\n      console.error(\"Signatures\", error, {\n        ix\n      });\n      throw error;\n    }\n  }\n  return ix;\n}\nfunction fetchSignature(ix, payload) {\n  return async function innerFetchSignature(id) {\n    const acct = ix.accounts[id];\n    if (acct.signature != null && acct.signature !== undefined) return;\n    const {\n      signature\n    } = await acct.signingFunction(buildSignable(acct, payload, ix));\n    ix.accounts[id].signature = signature;\n  };\n}\nfunction buildSignable(acct, message, ix) {\n  try {\n    return {\n      f_type: \"Signable\",\n      f_vsn: \"1.0.1\",\n      message,\n      addr: (0,_onflow_util_address__WEBPACK_IMPORTED_MODULE_6__.sansPrefix)(acct.addr),\n      keyId: acct.keyId,\n      roles: acct.role,\n      cadence: ix.message.cadence,\n      args: ix.message.arguments.map(d => ix.arguments[d].asArgument),\n      data: {},\n      interaction: ix,\n      voucher: createSignableVoucher(ix)\n    };\n  } catch (error) {\n    console.error(\"buildSignable\", error);\n    throw error;\n  }\n}\nfunction prepForEncoding(ix) {\n  const payerAddress = (0,_onflow_util_address__WEBPACK_IMPORTED_MODULE_6__.sansPrefix)((Array.isArray(ix.payer) ? ix.accounts[ix.payer[0]] : ix.accounts[ix.payer]).addr || \"\");\n  const proposalKey = ix.proposer ? {\n    address: (0,_onflow_util_address__WEBPACK_IMPORTED_MODULE_6__.sansPrefix)(ix.accounts[ix.proposer].addr) || \"\",\n    keyId: ix.accounts[ix.proposer].keyId || 0,\n    sequenceNum: ix.accounts[ix.proposer].sequenceNum || 0\n  } : {};\n  return {\n    cadence: ix.message.cadence,\n    refBlock: ix.message.refBlock,\n    computeLimit: ix.message.computeLimit,\n    arguments: ix.message.arguments.map(id => ix.arguments[id].asArgument),\n    proposalKey,\n    payer: payerAddress,\n    authorizers: ix.authorizations.map(cid => (0,_onflow_util_address__WEBPACK_IMPORTED_MODULE_6__.sansPrefix)(ix.accounts[cid].addr) || \"\").reduce((prev, current) => {\n      return prev.find(item => item === current) ? prev : [...prev, current];\n    }, [])\n  };\n}\n\nasync function resolveValidators(ix) {\n  const validators = get(ix, \"ix.validators\", []);\n  return pipe(ix, validators.map(cb => ix => cb(ix, {\n    Ok,\n    Bad\n  })));\n}\n\nasync function resolveFinalNormalization(ix) {\n  for (let key of Object.keys(ix.accounts)) {\n    ix.accounts[key].addr = (0,_onflow_util_address__WEBPACK_IMPORTED_MODULE_6__.sansPrefix)(ix.accounts[key].addr);\n  }\n  return ix;\n}\n\nasync function resolveVoucherIntercept(ix) {\n  const fn = get(ix, \"ix.voucher-intercept\");\n  if (isFn$3(fn)) {\n    await fn(createSignableVoucher(ix));\n  }\n  return ix;\n}\n\nconst DEFAULT_COMPUTE_LIMIT = 100;\nasync function resolveComputeLimit(ix) {\n  if (isTransaction(ix)) {\n    ix.message.computeLimit = ix.message.computeLimit || (await _onflow_config__WEBPACK_IMPORTED_MODULE_3__.config.get(\"fcl.limit\"));\n    if (!ix.message.computeLimit) {\n      _onflow_util_logger__WEBPACK_IMPORTED_MODULE_0__.log.deprecate({\n        pkg: \"FCL/SDK\",\n        subject: \"The built-in default compute limit (DEFAULT_COMPUTE_LIMIT=10)\",\n        transition: \"https://github.com/onflow/flow-js-sdk/blob/master/packages/sdk/TRANSITIONS.md#0009-deprecate-default-compute-limit\"\n      });\n      ix.message.computeLimit = DEFAULT_COMPUTE_LIMIT;\n    }\n  }\n  return ix;\n}\n\nconst noop = v => v;\nconst debug = function (key) {\n  let fn = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : noop;\n  return async ix => {\n    const accts = ix => [\"\\nAccounts:\", {\n      proposer: ix.proposer,\n      authorizations: ix.authorizations,\n      payer: ix.payer\n    }, \"\\n\\nDetails:\", ix.accounts].filter(Boolean);\n    const log = function () {\n      for (var _len = arguments.length, msg = new Array(_len), _key = 0; _key < _len; _key++) {\n        msg[_key] = arguments[_key];\n      }\n      console.log(`debug[${key}] ---\\n`, ...msg, \"\\n\\n\\n---\");\n    };\n    if (await _onflow_config__WEBPACK_IMPORTED_MODULE_3__.config.get(`debug.${key}`)) await fn(ix, log, accts);\n    return ix;\n  };\n};\nconst resolve = pipe([resolveCadence, debug(\"cadence\", (ix, log) => log(ix.message.cadence)), resolveComputeLimit, debug(\"compute limit\", (ix, log) => log(ix.message.computeLimit)), resolveArguments, debug(\"arguments\", (ix, log) => log(ix.message.arguments, ix.message)), resolveAccounts, debug(\"accounts\", (ix, log, accts) => log(...accts(ix))), /* special */execFetchRef, /* special */execFetchSequenceNumber, resolveSignatures, debug(\"signatures\", (ix, log, accts) => log(...accts(ix))), resolveFinalNormalization, resolveValidators, resolveVoucherIntercept, debug(\"resolved\", (ix, log) => log(ix))]);\nasync function execFetchRef(ix) {\n  if (isTransaction(ix) && ix.message.refBlock == null) {\n    const node = await (0,_onflow_config__WEBPACK_IMPORTED_MODULE_3__.config)().get(\"accessNode.api\");\n    const sendFn = await _onflow_config__WEBPACK_IMPORTED_MODULE_3__.config.first([\"sdk.transport\", \"sdk.send\"], _onflow_transport_http__WEBPACK_IMPORTED_MODULE_5__.send);\n    (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_1__.invariant)(sendFn, `Required value for sdk.transport is not defined in config. See: ${\"https://github.com/onflow/fcl-js/blob/master/packages/sdk/CHANGELOG.md#0057-alpha1----2022-01-21\"}`);\n    ix.message.refBlock = (await sendFn(build([getBlock()]), {\n      config: _onflow_config__WEBPACK_IMPORTED_MODULE_3__.config,\n      response,\n      Buffer: _onflow_rlp__WEBPACK_IMPORTED_MODULE_4__.Buffer,\n      ix: ixModule\n    }, {\n      node\n    }).then(decodeResponse)).id;\n  }\n  return ix;\n}\nasync function execFetchSequenceNumber(ix) {\n  if (isTransaction(ix)) {\n    var acct = Object.values(ix.accounts).find(a => a.role.proposer);\n    (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_1__.invariant)(acct !== undefined, `Transactions require a proposer`);\n    if (acct && acct.sequenceNum == null) {\n      const node = await (0,_onflow_config__WEBPACK_IMPORTED_MODULE_3__.config)().get(\"accessNode.api\");\n      const sendFn = await _onflow_config__WEBPACK_IMPORTED_MODULE_3__.config.first([\"sdk.transport\", \"sdk.send\"], _onflow_transport_http__WEBPACK_IMPORTED_MODULE_5__.send);\n      (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_1__.invariant)(sendFn, `Required value for sdk.transport is not defined in config. See: ${\"https://github.com/onflow/fcl-js/blob/master/packages/sdk/CHANGELOG.md#0057-alpha1----2022-01-21\"}`);\n      ix.accounts[acct.tempId].sequenceNum = await sendFn(await build([getAccount(acct.addr)]), {\n        config: _onflow_config__WEBPACK_IMPORTED_MODULE_3__.config,\n        response,\n        Buffer: _onflow_rlp__WEBPACK_IMPORTED_MODULE_4__.Buffer,\n        ix: ixModule\n      }, {\n        node\n      }).then(decodeResponse).then(acctResponse => acctResponse.keys).then(keys => keys.find(key => key.index === acct.keyId)).then(key => key.sequenceNumber);\n    }\n  }\n  return ix;\n}\n\nfunction invariant() {\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n  if (args.length > 1) {\n    const [predicate, message] = args;\n    return invariant((ix, _ref) => {\n      let {\n        Ok,\n        Bad\n      } = _ref;\n      return predicate ? Ok(ix) : Bad(ix, message);\n    });\n  }\n  const [fn] = args;\n  return ix => fn(ix, {\n    Ok,\n    Bad\n  });\n}\n\nclass SubscriptionsNotSupportedError extends Error {\n  constructor() {\n    super(`The current transport does not support subscriptions.  If you have provided a custom transport (e.g. via \\`sdk.transport\\` configuration), ensure that it implements the subscribe method.`);\n    this.name = \"SubscriptionsNotSupportedError\";\n  }\n}\n\n/**\n * Get the SDK transport object, either from the provided override or from the global config.\n * @param overrides - Override default configuration with custom transport or send function.\n * @returns The SDK transport object.\n */\nasync function getTransport() {\n  let override = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_1__.invariant)(override.send == null || override.transport == null, `SDK Transport Error: Cannot provide both \"transport\" and legacy \"send\" options.`);\n  const transportOrSend = override.transport || override.send || (await (0,_onflow_config__WEBPACK_IMPORTED_MODULE_3__.config)().first([\"sdk.transport\", \"sdk.send\"], _onflow_transport_http__WEBPACK_IMPORTED_MODULE_5__.httpTransport));\n\n  // Backwards compatibility with legacy send function\n  if (!isTransportObject(transportOrSend)) {\n    return {\n      send: transportOrSend,\n      subscribe: () => {\n        throw new SubscriptionsNotSupportedError();\n      }\n    };\n  }\n  return transportOrSend;\n}\nfunction isTransportObject(transport) {\n  return transport.send !== undefined && transport.subscribe !== undefined && typeof transport.send === \"function\" && typeof transport.subscribe === \"function\";\n}\n\n/**\n * @description - Sends arbitrary scripts, transactions, and requests to Flow\n * @param args - An array of functions that take interaction and return interaction\n * @param opts - Optional parameters\n * @returns - A promise that resolves to a response\n */\nconst send = async function () {\n  let args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  let opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  const transport = await getTransport(opts);\n  const sendFn = transport.send.bind(transport);\n  invariant(sendFn, `Required value for sdk.transport is not defined in config. See: ${\"https://github.com/onflow/fcl-js/blob/master/packages/sdk/CHANGELOG.md#0057-alpha1----2022-01-21\"}`);\n  const resolveFn = await _onflow_config__WEBPACK_IMPORTED_MODULE_3__.config.first([\"sdk.resolve\"], opts.resolve || resolve);\n  opts.node = opts.node || (await (0,_onflow_config__WEBPACK_IMPORTED_MODULE_3__.config)().get(\"accessNode.api\"));\n  if (Array.isArray(args)) args = pipe(initInteraction(), args);\n  return sendFn(await resolveFn(args), {\n    config: _onflow_config__WEBPACK_IMPORTED_MODULE_3__.config,\n    response,\n    ix: ixModule,\n    Buffer: _onflow_rlp__WEBPACK_IMPORTED_MODULE_4__.Buffer\n  }, opts);\n};\n\n/**\n * Subscribe to a topic without decoding the data.\n * @param params - The parameters for the subscription.\n * @param opts - Additional options for the subscription.\n * @returns A promise that resolves once the subscription is active.\n */\nfunction subscribeRaw(_ref) {\n  let {\n    topic,\n    args,\n    onData,\n    onError\n  } = _ref;\n  let opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  async function subscribe() {\n    let transport;\n    let node;\n    try {\n      transport = await getTransport(opts);\n      node = opts?.node || (await (0,_onflow_config__WEBPACK_IMPORTED_MODULE_3__.config)().get(\"accessNode.api\"));\n      (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_1__.invariant)(!!node, `SDK Send Error: Either opts.node or \"accessNode.api\" in config must be defined.`);\n    } catch (e) {\n      onError(e instanceof Error ? e : new Error(String(e)));\n      return;\n    }\n\n    // Subscribe using the resolved transport\n    return transport.subscribe({\n      topic,\n      args,\n      onData,\n      onError\n    }, {\n      node,\n      ...opts\n    });\n  }\n  let subscriptionPromise = subscribe();\n  return {\n    unsubscribe: () => {\n      subscriptionPromise.then(sub => sub?.unsubscribe?.());\n    }\n  };\n}\n\n/**\n * Subscribe to a topic and decode the data.\n * @param params - The parameters for the subscription.\n * @param opts - Additional options for the subscription.\n * @returns A promise that resolves when the subscription is active.\n */\nfunction subscribe(_ref) {\n  let {\n    topic,\n    args,\n    onData,\n    onError\n  } = _ref;\n  let opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  const sub = subscribeRaw({\n    topic,\n    args,\n    onData: data => {\n      decodeResponse(data).then(onData).catch(e => {\n        onError(new Error(`Failed to decode response: ${e.message}`));\n        sub?.unsubscribe?.();\n      });\n    },\n    onError\n  }, opts);\n  return sub;\n}\n\nasync function decode(response) {\n  const decodersFromConfig = await (0,_onflow_config__WEBPACK_IMPORTED_MODULE_3__.config)().where(/^decoder\\./);\n  const decoders = Object.entries(decodersFromConfig).map(_ref => {\n    let [pattern, xform] = _ref;\n    pattern = `/${pattern.replace(/^decoder\\./, \"\")}$/`;\n    return [pattern, xform];\n  });\n  return decodeResponse(response, Object.fromEntries(decoders));\n}\n\nconst findPayloadSigners = voucher => {\n  // Payload Signers Are: (authorizers + proposer) - payer\n  const payload = new Set(voucher.authorizers);\n  payload.add(voucher.proposalKey.address);\n  payload.delete(voucher.payer);\n  return Array.from(payload).map(addr => (0,_onflow_util_address__WEBPACK_IMPORTED_MODULE_6__.withPrefix)(addr));\n};\nconst findEnvelopeSigners = voucher => {\n  // Envelope Signers Are: (payer)\n  const envelope = new Set([voucher.payer]);\n  return Array.from(envelope).map(addr => (0,_onflow_util_address__WEBPACK_IMPORTED_MODULE_6__.withPrefix)(addr));\n};\nclass UnableToDetermineMessageEncodingTypeForSignerAddress extends Error {\n  constructor(signerAddress) {\n    const msg = `\n        Encode Message From Signable Error: Unable to determine message encoding for signer addresss: ${signerAddress}. \n        Please ensure the address: ${signerAddress} is intended to sign the given transaction as specified by the transaction signable.\n      `.trim();\n    super(msg);\n    this.name = \"Unable To Determine Message Encoding For Signer Addresss\";\n  }\n}\nconst encodeMessageFromSignable = (signable, signerAddress) => {\n  let payloadSigners = findPayloadSigners(signable.voucher);\n  let envelopeSigners = findEnvelopeSigners(signable.voucher);\n  const isPayloadSigner = payloadSigners.includes((0,_onflow_util_address__WEBPACK_IMPORTED_MODULE_6__.withPrefix)(signerAddress));\n  const isEnvelopeSigner = envelopeSigners.includes((0,_onflow_util_address__WEBPACK_IMPORTED_MODULE_6__.withPrefix)(signerAddress));\n  if (!isPayloadSigner && !isEnvelopeSigner) {\n    throw new UnableToDetermineMessageEncodingTypeForSignerAddress(signerAddress);\n  }\n  const message = {\n    cadence: signable.voucher.cadence,\n    refBlock: signable.voucher.refBlock,\n    computeLimit: signable.voucher.computeLimit,\n    arguments: signable.voucher.arguments,\n    proposalKey: {\n      ...signable.voucher.proposalKey,\n      address: (0,_onflow_util_address__WEBPACK_IMPORTED_MODULE_6__.sansPrefix)(signable.voucher.proposalKey.address)\n    },\n    payer: (0,_onflow_util_address__WEBPACK_IMPORTED_MODULE_6__.sansPrefix)(signable.voucher.payer),\n    authorizers: signable.voucher.authorizers.map(_onflow_util_address__WEBPACK_IMPORTED_MODULE_6__.sansPrefix),\n    payloadSigs: signable.voucher.payloadSigs.map(ps => ({\n      ...ps,\n      address: (0,_onflow_util_address__WEBPACK_IMPORTED_MODULE_6__.sansPrefix)(ps.address)\n    }))\n  };\n  return isPayloadSigner ? encodeTransactionPayload(message) : encodeTransactionEnvelope(message);\n};\n\n/**\n * @description A builder function that adds a validator to a transaction\n * @param cb The validator function\n * @returns A function that processes an interaction object\n */\nfunction validator(cb) {\n  return update(\"ix.validators\", validators => Array.isArray(validators) ? [...validators, cb] : [cb]);\n}\n\n/**\n * @description A builder function that returns a partial interaction to a block at a specific height\n * @param height The height of the block to get\n * @returns A function that processes a partial interaction object\n */\nfunction atBlockHeight(height) {\n  return pipe([ix => {\n    ix.block.height = height;\n    return ix;\n  }, validator(ix => {\n    if (typeof ix.block.isSealed === \"boolean\") throw new Error(\"Unable to specify both block height and isSealed.\");\n    if (ix.block.id) throw new Error(\"Unable to specify both block height and block id.\");\n    return ix;\n  })]);\n}\n\nfunction atBlockId(id) {\n  return pipe([ix => {\n    ix.block.id = id;\n    return Ok(ix);\n  }, validator((ix, _ref) => {\n    let {\n      Ok,\n      Bad\n    } = _ref;\n    if (isGetAccount(ix)) return Bad(ix, \"Unable to specify a block id with a Get Account interaction.\");\n    if (typeof ix.block.isSealed === \"boolean\") return Bad(ix, \"Unable to specify both block id and isSealed.\");\n    if (ix.block.height) return Bad(ix, \"Unable to specify both block id and block height.\");\n    return Ok(ix);\n  })]);\n}\n\n/**\n * @description A builder function that returns a partial interaction to query the latest block with the given finality state\n * @param isSealed Block finality state, defaults to latest executed block (\"soft-finality\"), set to true for sealed blocks (\"hard-finality\")\n * @returns A function that processes a partial interaction object\n */\nfunction atLatestBlock() {\n  let isSealed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n  return pipe([ix => {\n    ix.block.isSealed = isSealed;\n    return ix;\n  }, validator(ix => {\n    if (ix.block.id) throw new Error(\"Unable to specify both block finality and block id.\");\n    if (ix.block.height) throw new Error(\"Unable to specify both block finality and block height.\");\n    return ix;\n  })]);\n}\n\n/**\n * @description Returns the details of an account from their public address\n * @param address Address of the account\n * @param queryOptions Query parameters\n * @param queryOptions.height Block height to query\n * @param queryOptions.id Block ID to query\n * @param queryOptions.isSealed Block finality\n * @param opts Optional parameters\n * @returns A promise that resolves to an account response\n */\nasync function account(address) {\n  let {\n    height,\n    id,\n    isSealed\n  } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  let opts = arguments.length > 2 ? arguments[2] : undefined;\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_1__.invariant)(!(id && height || id && isSealed || height && isSealed), `Method: account -- Only one of the following parameters can be provided: id, height, isSealed`);\n\n  // Get account by ID\n  if (id) return await send([getAccount(address), atBlockId(id)], opts).then(decodeResponse);\n\n  // Get account by height\n  if (height) return await send([getAccount(address), atBlockHeight(height)], opts).then(decodeResponse);\n\n  // Get account by latest block\n  return await send([getAccount(address), atLatestBlock(isSealed ?? false)], opts).then(decodeResponse);\n}\n\n/**\n * @description Returns the latest block (optionally sealed or not), by id, or by height\n * @param queryOptions Query parameters\n * @param queryOptions.sealed Whether to query for a sealed block\n * @param queryOptions.height Block height to query\n * @param queryOptions.id Block ID to query\n * @param opts Optional parameters\n * @returns A promise that resolves to a block response\n */\nasync function block() {\n  let {\n    sealed = false,\n    id,\n    height\n  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  let opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_1__.invariant)(!(sealed && id || sealed && height), `Method: block -- Cannot pass \"sealed\" with \"id\" or \"height\"`);\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_1__.invariant)(!(id && height), `Method: block -- Cannot pass \"id\" and \"height\" simultaneously`);\n\n  // Get block by ID\n  if (id) return await send([getBlock(), atBlockId(id)], opts).then(decodeResponse);\n\n  // Get block by height\n  if (height) return await send([getBlock(), atBlockHeight(height)], opts).then(decodeResponse);\n\n  // Get latest block\n  return await send([getBlock(sealed)], opts).then(decodeResponse);\n}\n\n/**\n * @description A builder function for the Get Node Version Info interaction\n * @returns An interaction object\n */\nfunction getNodeVersionInfo() {\n  return pipe([makeGetNodeVerionInfo, ix => {\n    return Ok(ix);\n  }]);\n}\n\n/**\n * @description Returns the version information from to connected node\n * @returns A promise that resolves to a block response\n */\nasync function nodeVersionInfo() {\n  let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  return await send([getNodeVersionInfo()], opts).then(decodeResponse);\n}\n\nfunction authorizations() {\n  let ax = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  return pipe(ax.map(authz => {\n    return prepAccount(authz, {\n      role: _onflow_typedefs__WEBPACK_IMPORTED_MODULE_2__.TransactionRole.AUTHORIZER\n    });\n  }));\n}\nfunction authorization(addr, signingFunction, keyId, sequenceNum) {\n  return {\n    addr,\n    signingFunction,\n    keyId,\n    sequenceNum\n  };\n}\n\n/**\n * @description A builder function that returns the interaction to get events\n * @param eventType The type of event to get\n * @param start The start block ID or height\n * @param end The end block ID or height\n * @returns A function that processes an interaction object\n */\nfunction getEvents(eventType, start, end) {\n  return pipe([makeGetEvents, ix => {\n    ix.events.eventType = eventType;\n    ix.events.start = start;\n    ix.events.end = end;\n    return Ok(ix);\n  }]);\n}\n\n/**\n * @description A builder function that returns the interaction to get events at a block height range\n * @param eventType The type of event to get\n * @param startHeight The start height of the block range\n * @param endHeight The end height of the block range\n * @returns A function that processes an interaction object\n */\nfunction getEventsAtBlockHeightRange(eventType, startHeight, endHeight) {\n  return pipe([makeGetEvents, ix => {\n    ix.events.eventType = eventType;\n    ix.events.start = startHeight;\n    ix.events.end = endHeight;\n    return Ok(ix);\n  }]);\n}\n\n/**\n * @description A builder function that returns the interaction to get events at specific block IDs\n * @param eventType The type of event to get\n * @param blockIds The block IDs to get events from\n * @returns A function that processes an interaction object\n */\nfunction getEventsAtBlockIds(eventType, blockIds) {\n  return pipe([makeGetEvents, ix => {\n    ix.events.eventType = eventType;\n    ix.events.blockIds = blockIds;\n    return Ok(ix);\n  }]);\n}\n\n/**\n * @description A builder function that returns the interaction to get a block header\n * @param isSealed Whether or not the block should be sealed\n * @returns A function that processes an interaction object\n */\nfunction getBlockHeader() {\n  let isSealed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n  return pipe([makeGetBlockHeader, ix => {\n    ix.block.isSealed = isSealed;\n    return Ok(ix);\n  }]);\n}\n\n/**\n * @description A builder function that returns the interaction to get a collection by ID\n * @param id The ID of the collection to get\n * @returns A function that processes an interaction object\n */\nfunction getCollection() {\n  let id = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n  return pipe([makeGetCollection, ix => {\n    ix.collection.id = id;\n    return ix;\n  }]);\n}\n\n/**\n * @description A builder function that returns the status of transaction\n * NOTE: The transactionID provided must be from the current spork.\n * @param transactionId The id of the transaction to get status\n * @returns An interaction object\n */\nfunction getTransactionStatus(transactionId) {\n  return pipe([makeGetTransactionStatus, ix => {\n    ix.transaction.id = transactionId;\n    return Ok(ix);\n  }]);\n}\n\n/**\n * @description A builder function that returns the interaction to get a transaction by ID\n * @param id The ID of the transaction to get\n * @returns A function that processes an interaction object\n */\nfunction getTransaction(id) {\n  return pipe([makeGetTransaction, ix => {\n    ix.transaction.id = id;\n    return Ok(ix);\n  }]);\n}\n\n/**\n * @description A builder function that returns the interaction to get network parameters\n * @returns A function that processes an interaction object\n */\nfunction getNetworkParameters() {\n  return pipe([makeGetNetworkParameters, ix => {\n    return Ok(ix);\n  }]);\n}\n\n/**\n * @description A builder function that sets the compute limit for a transaction\n * @param limit The compute limit to set\n * @returns A function that processes an interaction object\n */\nfunction limit(limit) {\n  return ix => {\n    ix.message.computeLimit = limit;\n    return ix;\n  };\n}\n\n/**\n * @description A utility builder to be used with other builders to pass in arguments with a value and supported type\n * @param ax An array of arguments\n * @returns An interaction object\n */\nfunction args(ax) {\n  return pipe(ax.map(makeArgument));\n}\n\n/**\n * @description A utility builder to be used with fcl.args[...] to create FCL supported arguments for interactions\n * @param value The value of the argument\n * @param xform A function to transform the value\n * @returns An argument object\n */\nfunction arg(value, xform) {\n  return {\n    value,\n    xform\n  };\n}\n\nfunction proposer(authz) {\n  return prepAccount(authz, {\n    role: _onflow_typedefs__WEBPACK_IMPORTED_MODULE_2__.TransactionRole.PROPOSER\n  });\n}\n\n/**\n * @description A builder function that adds payer account(s) to a transaction\n * @param ax An account address or array of account addresses\n * @returns A function that takes an interaction and returns a new interaction with the payer(s) added\n */\nfunction payer() {\n  let ax = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  if (!Array.isArray(ax)) ax = [ax];\n  return pipe(ax.map(authz => {\n    return prepAccount(authz, {\n      role: _onflow_typedefs__WEBPACK_IMPORTED_MODULE_2__.TransactionRole.PAYER\n    });\n  }));\n}\n\n/**\n * @description A builder function that creates a ping interaction\n * @returns A function that processes an interaction object\n */\nfunction ping() {\n  return makePing;\n}\n\n/**\n * @description A builder function that sets the reference block for a transaction\n * @param refBlock The reference block ID\n * @returns A function that processes an interaction object\n */\nfunction ref(refBlock) {\n  return pipe([ix => {\n    ix.message.refBlock = refBlock;\n    return Ok(ix);\n  }]);\n}\n\n/**\n * @description A builder function that creates a script interaction\n * @returns A function that processes an interaction object\n */\nfunction script() {\n  return pipe([makeScript, put(\"ix.cadence\", (0,_onflow_util_template__WEBPACK_IMPORTED_MODULE_9__.template)(...arguments))]);\n}\n\nconst DEFAULT_SCRIPT_ACCOUNTS = [];\nconst DEFAULT_REF = null;\n\n/**\n * @description A template builder to use a Cadence transaction for an interaction\n * @param args The arguments to pass\n * @returns A function that processes an interaction object\n */\nfunction transaction() {\n  return pipe([makeTransaction, put(\"ix.cadence\", (0,_onflow_util_template__WEBPACK_IMPORTED_MODULE_9__.template)(...arguments)), ix => {\n    ix.message.refBlock = ix.message.refBlock || DEFAULT_REF;\n    ix.authorizations = ix.authorizations || DEFAULT_SCRIPT_ACCOUNTS;\n    return Ok(ix);\n  }]);\n}\n\n/**\n * @description A builder function that intercepts and modifies a voucher\n * @param fn The function to intercept and modify the voucher\n * @returns A function that processes an interaction object\n */\nfunction voucherIntercept(fn) {\n  return put(\"ix.voucher-intercept\", fn);\n}\n\n/**\n * @description Subscribe to events with the given filter & parameters\n * @param filter The filter to subscribe to events with\n * @returns A function that processes an interaction object\n */\nfunction subscribeEvents(_ref) {\n  let {\n    startBlockId,\n    startHeight,\n    eventTypes,\n    addresses,\n    contracts,\n    heartbeatInterval\n  } = _ref;\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_1__.invariant)(!(startBlockId && startHeight), `SDK Subscribe Events Error: Cannot set both startBlockId and startHeight.`);\n  return pipe([makeSubscribeEvents, ix => {\n    ix.subscribeEvents.startBlockId = startBlockId ?? null;\n    ix.subscribeEvents.startHeight = startHeight ?? null;\n    ix.subscribeEvents.eventTypes = eventTypes ?? null;\n    ix.subscribeEvents.addresses = addresses ?? null;\n    ix.subscribeEvents.contracts = contracts ?? null;\n    ix.subscribeEvents.heartbeatInterval = heartbeatInterval ?? null;\n    return Ok(ix);\n  }]);\n}\n\nconst resolveProposerSequenceNumber = _ref => {\n  let {\n    node\n  } = _ref;\n  return async ix => {\n    if (!isTransaction(ix)) return Ok(ix);\n    if (ix.accounts[ix.proposer].sequenceNum) return Ok(ix);\n    const sendFn = await _onflow_config__WEBPACK_IMPORTED_MODULE_3__.config.first([\"sdk.transport\", \"sdk.send\"], _onflow_transport_http__WEBPACK_IMPORTED_MODULE_5__.send);\n    (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_1__.invariant)(sendFn, `Required value for sdk.transport is not defined in config. See: ${\"https://github.com/onflow/fcl-js/blob/master/packages/sdk/CHANGELOG.md#0057-alpha1----2022-01-21\"}`);\n    const response$1 = await sendFn(await build([getAccount(ix.accounts[ix.proposer].addr)]), {\n      config: _onflow_config__WEBPACK_IMPORTED_MODULE_3__.config,\n      response: response,\n      Buffer: _onflow_rlp__WEBPACK_IMPORTED_MODULE_4__.Buffer,\n      ix: ixModule\n    }, {\n      node\n    });\n    const decoded = await decodeResponse(response$1);\n    ix.accounts[ix.proposer].sequenceNum = decoded.keys[ix.accounts[ix.proposer].keyId].sequenceNumber;\n    return Ok(ix);\n  };\n};\n\nasync function getRefId(opts) {\n  const node = await (0,_onflow_config__WEBPACK_IMPORTED_MODULE_3__.config)().get(\"accessNode.api\");\n  const sendFn = await _onflow_config__WEBPACK_IMPORTED_MODULE_3__.config.first([\"sdk.transport\", \"sdk.send\"], _onflow_transport_http__WEBPACK_IMPORTED_MODULE_5__.send);\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_1__.invariant)(sendFn, `Required value for sdk.transport is not defined in config. See: ${\"https://github.com/onflow/fcl-js/blob/master/packages/sdk/CHANGELOG.md#0057-alpha1----2022-01-21\"}`);\n  var ix;\n  ix = await pipe(initInteraction(), [getBlock()]);\n  ix = await sendFn(ix, {\n    config: _onflow_config__WEBPACK_IMPORTED_MODULE_3__.config,\n    response,\n    Buffer: _onflow_rlp__WEBPACK_IMPORTED_MODULE_4__.Buffer,\n    ix: ixModule\n  }, {\n    node\n  });\n  ix = await decodeResponse(ix);\n  return ix.id;\n}\nfunction resolveRefBlockId(opts) {\n  return async ix => {\n    if (!isTransaction(ix)) return Ok(ix);\n    if (ix.message.refBlock) return Ok(ix);\n    ix.message.refBlock = await getRefId();\n    return Ok(ix);\n  };\n}\n\nfunction mockAccountResponse(ix) {\n  let numberOfKeys = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 5;\n  // prettier-ignore\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_1__.invariant)(ix.account, \"mockAccountResponse(ix) -- ix.account is missing\", ix);\n  // prettier-ignore\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_1__.invariant)(ix.account.addr, \"mockAccountResponse(ix) -- ix.account.addr is missing\", ix);\n  const address = ix.account.addr;\n  return {\n    account: {\n      addr: address,\n      keys: Array.from({\n        length: numberOfKeys\n      }, (_, i) => ({\n        index: i,\n        sequenceNumber: 42\n      }))\n    }\n  };\n}\nfunction mockGetBlockResponse(ix) {\n  return {\n    tag: \"GET_BLOCK\",\n    block: {\n      id: \"32\"\n    }\n  };\n}\nconst identity = v => v;\nfunction mockSend() {\n  let fallback = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : identity;\n  return async function execSend(ix) {\n    ix = await ix;\n    switch (true) {\n      case isGetAccount(ix):\n        return mockAccountResponse(ix);\n      case isGetBlock(ix):\n        return mockGetBlockResponse();\n      default:\n        return fallback(ix);\n    }\n  };\n}\n\nconst idof = acct => `${(0,_onflow_util_address__WEBPACK_IMPORTED_MODULE_6__.withPrefix)(acct.addr)}-${acct.keyId}`;\nfunction sig(opts) {\n  return [\"SIGNATURE\", opts.addr, opts.keyId].join(\".\");\n}\nfunction authzFn() {\n  let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  return function (account) {\n    const acct = {\n      ...account,\n      ...opts,\n      resolve: null,\n      signingFunction: opts.signingFunction || account.signingFunction || fallbackSigningFunction\n    };\n    return acct;\n    function fallbackSigningFunction(_signable) {\n      return {\n        addr: acct.addr,\n        keyId: acct.keyId,\n        signature: sig(acct)\n      };\n    }\n  };\n}\nfunction authzResolve() {\n  let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  return function (account) {\n    const {\n      tempId,\n      ...rest\n    } = opts;\n    return {\n      ...account,\n      tempId: tempId || \"WITH_RESOLVE\",\n      resolve: authzFn(rest)\n    };\n  };\n}\nconst ROLE = {\n  proposer: false,\n  authorizer: false,\n  payer: false\n};\nfunction authzResolveMany() {\n  let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n    authorizations: []\n  };\n  return function (account) {\n    const tempId = opts.tempId || \"AUTHZ_RESOLVE_MANY\";\n    return {\n      ...account,\n      tempId,\n      resolve: () => [opts.proposer && authzFn(opts.proposer)({\n        role: {\n          ...ROLE,\n          proposer: true\n        }\n      }), ...opts.authorizations.map(authzFn).map(d => d({\n        role: {\n          ...ROLE,\n          authorizer: true\n        }\n      })), opts.payer && authzFn(opts.payer)({\n        role: {\n          ...ROLE,\n          payer: true\n        }\n      })].filter(Boolean)\n    };\n  };\n}\nfunction authzDeepResolveMany() {\n  let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n    authorizations: []\n  };\n  let depth = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n  return function (account) {\n    const tempId = opts.tempId || \"AUTHZ_DEEP_RESOLVE_MANY\";\n    return {\n      ...account,\n      tempId,\n      resolve: depth > 0 ? authzDeepResolveMany(opts, depth - 1)(account).resolve : authzResolveMany(opts)(account).resolve\n    };\n  };\n}\n\nconst run = function () {\n  let fns = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  return build([ref(\"123\"), ...fns]).then(resolve);\n};\n\nvar index = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  authzDeepResolveMany: authzDeepResolveMany,\n  authzFn: authzFn,\n  authzResolve: authzResolve,\n  authzResolveMany: authzResolveMany,\n  idof: idof,\n  mockSend: mockSend,\n  run: run,\n  sig: sig\n});\n\nconst VERSION = \"1.9.0\";\n\nconst flowMainnet = {\n  \"flow.network\": \"mainnet\",\n  \"accessNode.api\": \"https://rest-mainnet.onflow.org\",\n  \"discovery.wallet\": \"https://fcl-discovery.onflow.org/authn\"\n};\nconst flowTestnet = {\n  \"flow.network\": \"testnet\",\n  \"accessNode.api\": \"https://rest-testnet.onflow.org\",\n  \"discovery.wallet\": \"https://fcl-discovery.onflow.org/testnet/authn\"\n};\nconst flowEmulator = {\n  \"flow.network\": \"local\",\n  \"accessNode.api\": \"http://127.0.0.1:8888\",\n  \"discovery.wallet\": \"http://localhost:8701/fcl/authn\"\n};\n\n// Deprecated\nconst params = params => _onflow_util_logger__WEBPACK_IMPORTED_MODULE_0__.log.deprecate({\n  pkg: \"FCL/SDK\",\n  message: `The params builder has been removed from the Flow JS-SDK/FCL.`,\n  transition: \"https://github.com/onflow/flow-js-sdk/blob/master/packages/sdk/TRANSITIONS.md#0001-deprecate-params\",\n  level: _onflow_util_logger__WEBPACK_IMPORTED_MODULE_0__.LEVELS.error\n});\nconst param = params => _onflow_util_logger__WEBPACK_IMPORTED_MODULE_0__.log.deprecate({\n  pkg: \"FCL/SDK\",\n  message: `The param builder has been removed from the Flow JS-SDK/FCL.`,\n  transition: \"https://github.com/onflow/flow-js-sdk/blob/master/packages/sdk/TRANSITIONS.md#0001-deprecate-params\",\n  level: _onflow_util_logger__WEBPACK_IMPORTED_MODULE_0__.LEVELS.error\n});\n\n\n//# sourceMappingURL=sdk.module.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/@onflow/sdk/dist/sdk.module.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/@onflow/transport-http/dist/index.module.js":
/*!*******************************************************************!*\
  !*** ../node_modules/@onflow/transport-http/dist/index.module.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   HTTPRequestError: () => (/* binding */ HTTPRequestError),\n/* harmony export */   WebsocketError: () => (/* binding */ WebsocketError),\n/* harmony export */   connectSubscribeEvents: () => (/* binding */ connectSubscribeEvents),\n/* harmony export */   httpTransport: () => (/* binding */ httpTransport),\n/* harmony export */   send: () => (/* binding */ send),\n/* harmony export */   sendExecuteScript: () => (/* binding */ sendExecuteScript),\n/* harmony export */   sendGetAccount: () => (/* binding */ sendGetAccount),\n/* harmony export */   sendGetBlock: () => (/* binding */ sendGetBlock),\n/* harmony export */   sendGetBlockHeader: () => (/* binding */ sendGetBlockHeader),\n/* harmony export */   sendGetCollection: () => (/* binding */ sendGetCollection),\n/* harmony export */   sendGetEvents: () => (/* binding */ sendGetEvents),\n/* harmony export */   sendGetNetworkParameters: () => (/* binding */ sendGetNetworkParameters),\n/* harmony export */   sendGetNodeVersionInfo: () => (/* binding */ sendGetNodeVersionInfo),\n/* harmony export */   sendGetTransaction: () => (/* binding */ sendGetTransaction),\n/* harmony export */   sendGetTransactionStatus: () => (/* binding */ sendGetTransactionStatus),\n/* harmony export */   sendPing: () => (/* binding */ sendPing),\n/* harmony export */   sendTransaction: () => (/* binding */ sendTransaction)\n/* harmony export */ });\n/* harmony import */ var _onflow_util_invariant__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @onflow/util-invariant */ \"(ssr)/../node_modules/@onflow/util-invariant/dist/util-invariant.module.js\");\n/* harmony import */ var _onflow_rlp__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @onflow/rlp */ \"(ssr)/../node_modules/@onflow/rlp/dist/rlp.module.js\");\n/* harmony import */ var _onflow_util_logger__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @onflow/util-logger */ \"(ssr)/../node_modules/@onflow/util-logger/dist/util-logger.module.js\");\n/* harmony import */ var cross_fetch__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! cross-fetch */ \"(ssr)/../node_modules/cross-fetch/dist/node-ponyfill.js\");\n/* harmony import */ var cross_fetch__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(cross_fetch__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var _onflow_util_address__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @onflow/util-address */ \"(ssr)/../node_modules/@onflow/util-address/dist/util-address.module.js\");\n/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! events */ \"events\");\n/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(events__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var isomorphic_ws__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! isomorphic-ws */ \"(ssr)/../node_modules/isomorphic-ws/node.js\");\n/* harmony import */ var isomorphic_ws__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(isomorphic_ws__WEBPACK_IMPORTED_MODULE_6__);\n/* harmony import */ var _onflow_typedefs__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @onflow/typedefs */ \"(ssr)/../node_modules/@onflow/typedefs/dist/typedefs.module.js\");\n/* harmony import */ var buffer__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! buffer */ \"buffer\");\n/* harmony import */ var buffer__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(buffer__WEBPACK_IMPORTED_MODULE_8__);\n\n\n\n\n\n\n\n\n\n\nfunction safeParseJSON(data) {\n  try {\n    return JSON.parse(data);\n  } catch {\n    return null;\n  }\n}\n\n/**\n * This file was taken from the Axios project and modified to work with TypeScript/ES6 modules.\n *\n * The original file can be found on GitHub:\n * https://github.com/axios/axios/blob/fe7d09bb08fa1c0e414956b7fc760c80459b0a43/lib/helpers/combineURLs.js\n *\n * The original license is included below:\n *\n * Copyright (c) 2014 Matt Zabriskie\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n\n/**\n * Creates a new URL by combining the specified URLs\n *\n * @param baseURL The base URL\n * @param relativeURL The relative URL\n * @returns The combined URL\n */\nfunction combineURLs(baseURL, relativeURL) {\n  return relativeURL ? baseURL.replace(/\\/+$/, \"\") + \"/\" + relativeURL.replace(/^\\/+/, \"\") : baseURL;\n}\n\nconst AbortController = globalThis.AbortController || __webpack_require__(/*! abort-controller */ \"(ssr)/../node_modules/abort-controller/dist/abort-controller.js\");\nclass HTTPRequestError extends Error {\n  constructor(_ref) {\n    let {\n      error,\n      hostname,\n      path,\n      method,\n      requestBody,\n      responseBody,\n      responseStatusText,\n      statusCode\n    } = _ref;\n    const msg = `\n      HTTP Request Error: An error occurred when interacting with the Access API.\n      ${error ? `error=${error}` : \"\"}\n      ${hostname ? `hostname=${hostname}` : \"\"}\n      ${path ? `path=${path}` : \"\"}\n      ${method ? `method=${method}` : \"\"}\n      ${requestBody ? `requestBody=${requestBody}` : \"\"}\n      ${responseBody ? `responseBody=${responseBody}` : \"\"}\n      ${responseStatusText ? `responseStatusText=${responseStatusText}` : \"\"}\n      ${statusCode ? `statusCode=${statusCode}` : \"\"}\n    `;\n    super(msg);\n    this.name = \"HTTP Request Error\";\n    this.statusCode = statusCode;\n    this.errorMessage = error;\n  }\n}\n\n/**\n * Creates an HTTP Request to be sent to a REST Access API via Fetch API.\n *\n * @param {object} options - Options for the HTTP Request\n * @param {String} options.hostname - Access API Hostname\n * @param {String} options.path - Path to the resource on the Access API\n * @param {String} options.method - HTTP Method\n * @param {object} options.body - HTTP Request Body\n * @param {object} [options.headers] - HTTP Request Headers\n * @param {boolean} [options.enableRequestLogging=true] - Enable/Disable request logging\n * @param {number} [options.retryLimit=5] - Number of times to retry request\n * @param {number} [options.retryIntervalMs=1000] - Time in milliseconds to wait before retrying request\n * @param {number} [options.timeoutLimit=30000] - Time in milliseconds to wait before timing out request\n *\n * @returns JSON object response from Access API.\n */\nasync function httpRequest(_ref2) {\n  let {\n    hostname,\n    path,\n    method,\n    body,\n    headers,\n    retryLimit = 5,\n    retryIntervalMs = 1000,\n    timeoutLimit = 30000,\n    enableRequestLogging = true\n  } = _ref2;\n  const bodyJSON = body ? JSON.stringify(body) : null;\n  function makeRequest() {\n    const controller = new AbortController();\n    const fetchTimeout = setTimeout(() => {\n      controller.abort();\n    }, timeoutLimit);\n    return cross_fetch__WEBPACK_IMPORTED_MODULE_3___default()(combineURLs(hostname, path).toString(), {\n      method: method,\n      body: bodyJSON,\n      headers,\n      signal: controller.signal\n    }).then(async res => {\n      if (res.ok) {\n        return res.json();\n      }\n      const responseText = await res.text().catch(() => null);\n      const response = safeParseJSON(responseText);\n      throw new HTTPRequestError({\n        error: response?.message,\n        hostname,\n        path,\n        method,\n        requestBody: bodyJSON,\n        responseBody: responseText,\n        responseStatusText: res.statusText,\n        statusCode: res.status\n      });\n    }).catch(async e => {\n      if (e instanceof HTTPRequestError) {\n        throw e;\n      }\n      if (e.name === \"AbortError\") {\n        throw e;\n      }\n\n      // Show AN error for all network errors\n      if (enableRequestLogging) {\n        await _onflow_util_logger__WEBPACK_IMPORTED_MODULE_2__.log({\n          title: \"Access Node Error\",\n          message: `The provided access node ${hostname} does not appear to be a valid REST/HTTP access node.\n  Please verify that you are not unintentionally using a GRPC access node.\n  See more here: https://docs.onflow.org/fcl/reference/sdk-guidelines/#connect`,\n          level: _onflow_util_logger__WEBPACK_IMPORTED_MODULE_2__.LEVELS.error\n        });\n      }\n      throw new HTTPRequestError({\n        error: e?.message,\n        hostname,\n        path,\n        method,\n        requestBody: bodyJSON\n      });\n    }).finally(() => {\n      clearTimeout(fetchTimeout);\n    });\n  }\n  async function requestLoop() {\n    let retryAttempt = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    try {\n      const resp = await makeRequest();\n      return resp;\n    } catch (error) {\n      const retryStatusCodes = [408, 429, 500, 502, 503, 504];\n      if (error.name === \"AbortError\" || retryStatusCodes.includes(error.statusCode)) {\n        return await new Promise((resolve, reject) => {\n          if (retryAttempt < retryLimit) {\n            if (enableRequestLogging) {\n              console.warn(`Access node unavailable, retrying in ${retryIntervalMs} ms...`);\n            }\n            setTimeout(() => {\n              resolve(requestLoop(retryAttempt + 1));\n            }, retryIntervalMs);\n          } else {\n            reject(error);\n          }\n        });\n      } else {\n        throw error;\n      }\n    }\n  }\n\n  // Keep retrying request until server available or max attempts exceeded\n  return await requestLoop();\n}\n\nasync function sendExecuteScriptAtBlockIDRequest(ix, context, opts) {\n  const httpRequest$1 = opts.httpRequest || httpRequest;\n  const res = await httpRequest$1({\n    hostname: opts.node,\n    path: `/v1/scripts?block_id=${ix.block.id}`,\n    method: \"POST\",\n    body: {\n      script: context.Buffer.from(ix.message.cadence).toString(\"base64\"),\n      arguments: ix.message.arguments.map(arg => context.Buffer.from(JSON.stringify(ix.arguments[arg].asArgument)).toString(\"base64\"))\n    }\n  });\n  return constructResponse$5(ix, context, res);\n}\nasync function sendExecuteScriptAtBlockHeightRequest(ix, context, opts) {\n  const httpRequest$1 = opts.httpRequest || httpRequest;\n  const res = await httpRequest$1({\n    hostname: opts.node,\n    path: `/v1/scripts?block_height=${ix.block.height}`,\n    method: \"POST\",\n    body: {\n      script: context.Buffer.from(ix.message.cadence).toString(\"base64\"),\n      arguments: ix.message.arguments.map(arg => context.Buffer.from(JSON.stringify(ix.arguments[arg].asArgument)).toString(\"base64\"))\n    }\n  });\n  return constructResponse$5(ix, context, res);\n}\nasync function sendExecuteScriptAtLatestBlockRequest(ix, context, opts) {\n  const httpRequest$1 = opts.httpRequest || httpRequest;\n  const res = await httpRequest$1({\n    hostname: opts.node,\n    path: `/v1/scripts?block_height=${ix.block.isSealed ? \"sealed\" : \"final\"}`,\n    method: \"POST\",\n    body: {\n      script: context.Buffer.from(ix.message.cadence).toString(\"base64\"),\n      arguments: ix.message.arguments.map(arg => context.Buffer.from(JSON.stringify(ix.arguments[arg].asArgument)).toString(\"base64\"))\n    }\n  });\n  return constructResponse$5(ix, context, res);\n}\nfunction constructResponse$5(ix, context, res) {\n  let ret = context.response();\n  ret.tag = ix.tag;\n  ret.encodedData = JSON.parse(context.Buffer.from(res, \"base64\").toString());\n  return ret;\n}\nasync function sendExecuteScript(ix) {\n  let context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  let opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_0__.invariant)(opts.node, `SDK Send Execute Script Error: opts.node must be defined.`);\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_0__.invariant)(context.response, `SDK Send Execute Script Error: context.response must be defined.`);\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_0__.invariant)(context.Buffer, `SDK Send Execute Script Error: context.Buffer must be defined.`);\n  ix = await ix;\n  if (ix.block.id) {\n    return await sendExecuteScriptAtBlockIDRequest(ix, context, opts);\n  } else if (ix.block.height) {\n    return await sendExecuteScriptAtBlockHeightRequest(ix, context, opts);\n  } else {\n    return await sendExecuteScriptAtLatestBlockRequest(ix, context, opts);\n  }\n}\n\nconst HashAlgorithmIDs = {\n  SHA2_256: 1,\n  SHA2_384: 2,\n  SHA3_256: 3,\n  SHA3_384: 4,\n  KMAC128_BLS_BLS12_381: 5\n};\nconst SignatureAlgorithmIDs = {\n  ECDSA_P256: 1,\n  ECDSA_secp256k1: 2,\n  BLS_BLS12_381: 3\n};\nasync function sendGetAccountAtBlockHeightRequest(ix, context, opts) {\n  const httpRequest$1 = opts.httpRequest || httpRequest;\n  const res = await httpRequest$1({\n    hostname: opts.node,\n    path: `/v1/accounts/${ix.account.addr}?block_height=${ix.block.height}&expand=contracts,keys`,\n    method: \"GET\",\n    body: null\n  });\n  return constructResponse$4(ix, context, res);\n}\nasync function sendGetAccountAtLatestBlockRequest(ix, context, opts) {\n  const httpRequest$1 = opts.httpRequest || httpRequest;\n  const res = await httpRequest$1({\n    hostname: opts.node,\n    path: `/v1/accounts/${ix.account.addr}?block_height=${ix.block.isSealed ? \"sealed\" : \"final\"}&expand=contracts,keys`,\n    method: \"GET\",\n    body: null\n  });\n  return constructResponse$4(ix, context, res);\n}\nfunction constructResponse$4(ix, context, res) {\n  let ret = context.response();\n  ret.tag = ix.tag;\n  const unwrapContracts = contracts => {\n    const c = {};\n    if (!contracts) return c;\n    for (let key of Object.keys(contracts)) {\n      c[key] = context.Buffer.from(contracts[key], \"base64\").toString();\n    }\n    return c;\n  };\n  ret.account = {\n    address: res.address,\n    balance: Number(res.balance),\n    code: \"\",\n    contracts: unwrapContracts(res.contracts),\n    keys: res.keys?.map(key => ({\n      index: Number(key.index),\n      publicKey: key.public_key.replace(/^0x/, \"\"),\n      signAlgo: SignatureAlgorithmIDs[key.signing_algorithm],\n      signAlgoString: key.signing_algorithm,\n      hashAlgo: HashAlgorithmIDs[key.hashing_algorithm],\n      hashAlgoString: key.hashing_algorithm,\n      sequenceNumber: Number(key.sequence_number),\n      weight: Number(key.weight),\n      revoked: key.revoked\n    })) ?? []\n  };\n  return ret;\n}\nasync function sendGetAccount(ix) {\n  let context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  let opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_0__.invariant)(opts.node, `SDK Send Get Account Error: opts.node must be defined.`);\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_0__.invariant)(context.response, `SDK Send Get Account Error: context.response must be defined.`);\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_0__.invariant)(context.Buffer, `SDK Send Get Account Error: context.Buffer must be defined.`);\n  ix = await ix;\n  if (ix.block.height !== null) {\n    return await sendGetAccountAtBlockHeightRequest(ix, context, opts);\n  } else {\n    return await sendGetAccountAtLatestBlockRequest(ix, context, opts);\n  }\n}\n\nasync function sendGetBlockHeaderByIDRequest(ix, context, opts) {\n  const httpRequest$1 = opts.httpRequest || httpRequest;\n  const res = await httpRequest$1({\n    hostname: opts.node,\n    path: `/v1/blocks/${ix.block.id}`,\n    method: \"GET\",\n    body: null\n  });\n  return constructResponse$3(ix, context, res);\n}\nasync function sendGetBlockHeaderByHeightRequest(ix, context, opts) {\n  const httpRequest$1 = opts.httpRequest || httpRequest;\n  const res = await httpRequest$1({\n    hostname: opts.node,\n    path: `/v1/blocks?height=${ix.block.height}`,\n    method: \"GET\",\n    body: null\n  });\n  return constructResponse$3(ix, context, res);\n}\nasync function sendGetLatestBlockHeaderRequest(ix, context, opts) {\n  const httpRequest$1 = opts.httpRequest || httpRequest;\n  const height = ix.block?.isSealed ? \"sealed\" : \"final\";\n  const res = await httpRequest$1({\n    hostname: opts.node,\n    path: `/v1/blocks?height=${height}`,\n    method: \"GET\",\n    body: null\n  });\n  return constructResponse$3(ix, context, res);\n}\nfunction constructResponse$3(ix, context, res) {\n  const block = res.length ? res[0] : null;\n  const ret = context.response();\n  ret.tag = ix.tag;\n  ret.blockHeader = {\n    id: block.header.id,\n    parentId: block.header.parent_id,\n    height: Number(block.header.height),\n    timestamp: block.header.timestamp\n  };\n  return ret;\n}\nasync function sendGetBlockHeader(ix) {\n  let context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  let opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_0__.invariant)(opts.node, `SDK Send Get Block Header Error: opts.node must be defined.`);\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_0__.invariant)(context.response, `SDK Send Get Block Header Error: context.response must be defined.`);\n  ix = await ix;\n  const interactionHasBlockID = ix.block.id !== null;\n  const interactionHasBlockHeight = ix.block.height !== null;\n  if (interactionHasBlockID) {\n    return await sendGetBlockHeaderByIDRequest(ix, context, opts);\n  } else if (interactionHasBlockHeight) {\n    return await sendGetBlockHeaderByHeightRequest(ix, context, opts);\n  } else {\n    return await sendGetLatestBlockHeaderRequest(ix, context, opts);\n  }\n}\n\nasync function sendGetBlockByIDRequest(ix, context, opts) {\n  const httpRequest$1 = opts.httpRequest || httpRequest;\n  const res = await httpRequest$1({\n    hostname: opts.node,\n    path: `/v1/blocks/${ix.block.id}?expand=payload`,\n    method: \"GET\",\n    body: null\n  });\n  return constructResponse$2(ix, context, res);\n}\nasync function sendGetBlockByHeightRequest(ix, context, opts) {\n  const httpRequest$1 = opts.httpRequest || httpRequest;\n  const res = await httpRequest$1({\n    hostname: opts.node,\n    path: `/v1/blocks?height=${ix.block.height}&expand=payload`,\n    method: \"GET\",\n    body: null\n  });\n  return constructResponse$2(ix, context, res);\n}\nasync function sendGetBlockRequest(ix, context, opts) {\n  const httpRequest$1 = opts.httpRequest || httpRequest;\n  const height = ix.block?.isSealed ? \"sealed\" : \"final\";\n  const res = await httpRequest$1({\n    hostname: opts.node,\n    path: `/v1/blocks?height=${height}&expand=payload`,\n    method: \"GET\",\n    body: null\n  });\n  return constructResponse$2(ix, context, res);\n}\nfunction constructResponse$2(ix, context, res) {\n  const block = res.length ? res[0] : null;\n  const ret = context.response();\n  ret.tag = ix.tag;\n  ret.block = {\n    id: block.header.id,\n    parentId: block.header.parent_id,\n    height: Number(block.header.height),\n    timestamp: block.header.timestamp,\n    parentVoterSignature: block.header.parent_voter_signature,\n    collectionGuarantees: block.payload.collection_guarantees.map(collectionGuarantee => ({\n      collectionId: collectionGuarantee.collection_id,\n      signerIds: collectionGuarantee.signer_ids\n    })),\n    blockSeals: block.payload.block_seals.map(blockSeal => ({\n      blockId: blockSeal.block_id,\n      executionReceiptId: blockSeal.result_id\n    }))\n  };\n  return ret;\n}\nasync function sendGetBlock(ix) {\n  let context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  let opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_0__.invariant)(opts.node, `SDK Send Get Block Error: opts.node must be defined.`);\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_0__.invariant)(context.response, `SDK Send Get Block Error: context.response must be defined.`);\n  ix = await ix;\n  const interactionHasBlockID = ix.block.id !== null;\n  const interactionHasBlockHeight = ix.block.height !== null;\n  if (interactionHasBlockID) {\n    return await sendGetBlockByIDRequest(ix, context, opts);\n  } else if (interactionHasBlockHeight) {\n    return await sendGetBlockByHeightRequest(ix, context, opts);\n  } else {\n    return await sendGetBlockRequest(ix, context, opts);\n  }\n}\n\nasync function sendGetCollection(ix) {\n  let context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  let opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_0__.invariant)(opts.node, `SDK Send Get Collection Error: opts.node must be defined.`);\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_0__.invariant)(context.response, `SDK Send Get Collection Error: context.response must be defined.`);\n  const httpRequest$1 = opts.httpRequest || httpRequest;\n  const res = await httpRequest$1({\n    hostname: opts.node,\n    path: `/v1/collections/${ix.collection.id}?expand=transactions`,\n    method: \"GET\",\n    body: null\n  });\n  const ret = context.response();\n  ret.tag = ix.tag;\n  ret.collection = {\n    id: res.id,\n    transactionIds: res.transactions.map(transaction => transaction.id)\n  };\n  return ret;\n}\n\nasync function sendGetEventsForHeightRangeRequest(ix, context, opts) {\n  const httpRequest$1 = opts.httpRequest || httpRequest;\n  const res = await httpRequest$1({\n    hostname: opts.node,\n    path: `/v1/events?type=${ix.events.eventType}&start_height=${ix.events.start}&end_height=${ix.events.end}`,\n    method: \"GET\",\n    body: null\n  });\n  return constructResponse$1(ix, context, res);\n}\nasync function sendGetEventsForBlockIDsRequest(ix, context, opts) {\n  const httpRequest$1 = opts.httpRequest || httpRequest;\n  const res = await httpRequest$1({\n    hostname: opts.node,\n    path: `/v1/events?type=${ix.events.eventType}&block_ids=${ix.events.blockIds.join(\",\")}`,\n    method: \"GET\",\n    body: null\n  });\n  return constructResponse$1(ix, context, res);\n}\nfunction constructResponse$1(ix, context, res) {\n  let ret = context.response();\n  ret.tag = ix.tag;\n  ret.events = [];\n  res.forEach(block => block.events ? block.events.forEach(event => ret.events.push({\n    blockId: block.block_id,\n    blockHeight: Number(block.block_height),\n    blockTimestamp: block.block_timestamp,\n    type: event.type,\n    transactionId: event.transaction_id,\n    transactionIndex: Number(event.transaction_index),\n    eventIndex: Number(event.event_index),\n    payload: JSON.parse(context.Buffer.from(event.payload, \"base64\").toString())\n  })) : null);\n  return ret;\n}\nasync function sendGetEvents(ix) {\n  let context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  let opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_0__.invariant)(opts.node, `SDK Send Get Events Error: opts.node must be defined.`);\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_0__.invariant)(context.response, `SDK Send Get Events Error: context.response must be defined.`);\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_0__.invariant)(context.Buffer, `SDK Send Get Events Error: context.Buffer must be defined.`);\n  ix = await ix;\n  const interactionContainsBlockHeightRange = ix.events.start !== null;\n  const interactionContainsBlockIDsList = Array.isArray(ix.events.blockIds) && ix.events.blockIds.length > 0;\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_0__.invariant)(interactionContainsBlockHeightRange || interactionContainsBlockIDsList, \"SendGetEventsError: Unable to determine which get events request to send. Either a block height range, or block IDs must be specified.\");\n  if (interactionContainsBlockHeightRange) {\n    return await sendGetEventsForHeightRangeRequest(ix, context, opts);\n  } else {\n    return await sendGetEventsForBlockIDsRequest(ix, context, opts);\n  }\n}\n\nasync function sendGetTransaction(ix) {\n  let context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  let opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_0__.invariant)(opts.node, `SDK Send Get Transaction Error: opts.node must be defined.`);\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_0__.invariant)(context.response, `SDK Send Get Transaction Error: context.response must be defined.`);\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_0__.invariant)(context.Buffer, `SDK Send Get Transaction Error: context.Buffer must be defined.`);\n  const httpRequest$1 = opts.httpRequest || httpRequest;\n  ix = await ix;\n  const res = await httpRequest$1({\n    hostname: opts.node,\n    path: `/v1/transactions/${ix.transaction.id}`,\n    method: \"GET\",\n    body: null\n  });\n  const unwrapKey = key => ({\n    address: key.address,\n    keyId: Number(key.key_index),\n    sequenceNumber: Number(key.sequence_number)\n  });\n  const unwrapSignature = sig => ({\n    address: sig.address,\n    keyId: Number(sig.key_index),\n    signature: sig.signature\n  });\n  const unwrapArg = arg => JSON.parse(context.Buffer.from(arg, \"base64\").toString());\n  let ret = context.response();\n  ret.tag = ix.tag;\n  ret.transaction = {\n    script: context.Buffer.from(res.script, \"base64\").toString(),\n    args: [...res.arguments.map(unwrapArg)],\n    referenceBlockId: res.reference_block_id,\n    gasLimit: Number(res.gas_limit),\n    payer: res.payer,\n    proposalKey: res.proposal_key ? unwrapKey(res.proposal_key) : res.proposal_key,\n    authorizers: res.authorizers,\n    payloadSignatures: [...res.payload_signatures.map(unwrapSignature)],\n    envelopeSignatures: [...res.envelope_signatures.map(unwrapSignature)]\n  };\n  return ret;\n}\n\nconst STATUS_MAP$1 = {\n  UNKNOWN: 0,\n  PENDING: 1,\n  FINALIZED: 2,\n  EXECUTED: 3,\n  SEALED: 4,\n  EXPIRED: 5\n};\nasync function sendGetTransactionStatus(ix) {\n  let context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  let opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_0__.invariant)(opts.node, `SDK Send Get Transaction Status Error: opts.node must be defined.`);\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_0__.invariant)(context.response, `SDK Send Get Transaction Status Error: context.response must be defined.`);\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_0__.invariant)(context.Buffer, `SDK Send Get Transaction Status Error: context.Buffer must be defined.`);\n  const httpRequest$1 = opts.httpRequest || httpRequest;\n  ix = await ix;\n  const res = await httpRequest$1({\n    hostname: opts.node,\n    path: `/v1/transaction_results/${ix.transaction.id}`,\n    method: \"GET\",\n    body: null\n  });\n  let ret = context.response();\n  ret.tag = ix.tag;\n  ret.transactionStatus = {\n    blockId: res.block_id,\n    status: STATUS_MAP$1[res.status.toUpperCase()] || \"\",\n    statusString: res.status.toUpperCase(),\n    statusCode: res.status_code,\n    errorMessage: res.error_message,\n    events: res.events.map(event => ({\n      type: event.type,\n      transactionId: event.transaction_id,\n      transactionIndex: Number(event.transaction_index),\n      eventIndex: Number(event.event_index),\n      payload: JSON.parse(context.Buffer.from(event.payload, \"base64\").toString())\n    }))\n  };\n  return ret;\n}\n\nasync function sendPing(ix) {\n  let context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  let opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_0__.invariant)(Boolean(opts.node), `SDK Send Ping Error: opts.node must be defined.`);\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_0__.invariant)(Boolean(context.response), `SDK Send Ping Error: context.response must be defined.`);\n  const httpRequest$1 = opts.httpRequest || httpRequest;\n  await httpRequest$1({\n    hostname: opts.node,\n    path: \"/v1/blocks?height=sealed\",\n    method: \"GET\",\n    body: null\n  });\n  let ret = typeof context?.response === \"function\" ? context.response() : {};\n  ret.tag = ix.tag;\n  return ret;\n}\n\nconst idof = acct => `${withPrefix(acct.addr)}-${acct.keyId}`;\nasync function sendTransaction(ix) {\n  let context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  let opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_0__.invariant)(opts.node, `SDK Send Transaction Error: opts.node must be defined.`);\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_0__.invariant)(context.response, `SDK Send Transaction Error: context.response must be defined.`);\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_0__.invariant)(context.Buffer, `SDK Send Transaction Error: context.Buffer must be defined.`);\n  const httpRequest$1 = opts.httpRequest || httpRequest;\n  ix = await ix;\n\n  // Apply Non Payer Signatures to Payload Signatures\n  let payloadSignatures = [];\n  for (let acct of Object.values(ix.accounts)) {\n    try {\n      if (!acct.role.payer && acct.signature != null) {\n        const signature = {\n          address: (0,_onflow_util_address__WEBPACK_IMPORTED_MODULE_4__.sansPrefix)(acct.addr),\n          key_index: String(acct.keyId),\n          signature: context.Buffer.from(acct.signature, \"hex\").toString(\"base64\")\n        };\n        if (!payloadSignatures.find(existingSignature => existingSignature.address === signature.address && existingSignature.key_index === signature.key_index && existingSignature.signature === signature.signature)) {\n          payloadSignatures.push(signature);\n        }\n      }\n    } catch (error) {\n      console.error(\"SDK HTTP Send Error: Trouble applying payload signature\", {\n        acct,\n        ix\n      });\n      throw error;\n    }\n  }\n\n  // Apply Payer Signatures to Envelope Signatures\n  let envelopeSignatures = {};\n  for (let acct of Object.values(ix.accounts)) {\n    try {\n      if (acct.role.payer && acct.signature != null) {\n        let id = acct.tempId || idof(acct);\n        envelopeSignatures[id] = envelopeSignatures[id] || {\n          address: (0,_onflow_util_address__WEBPACK_IMPORTED_MODULE_4__.sansPrefix)(acct.addr),\n          key_index: String(acct.keyId),\n          signature: context.Buffer.from(acct.signature, \"hex\").toString(\"base64\")\n        };\n      }\n    } catch (error) {\n      console.error(\"SDK HTTP Send Error: Trouble applying envelope signature\", {\n        acct,\n        ix\n      });\n      throw error;\n    }\n  }\n  envelopeSignatures = Object.values(envelopeSignatures);\n  var t1 = Date.now();\n  const res = await httpRequest$1({\n    hostname: opts.node,\n    path: `/v1/transactions`,\n    method: \"POST\",\n    body: {\n      script: context.Buffer.from(ix.message.cadence).toString(\"base64\"),\n      arguments: [...ix.message.arguments.map(arg => context.Buffer.from(JSON.stringify(ix.arguments[arg].asArgument)).toString(\"base64\"))],\n      reference_block_id: ix.message.refBlock ? ix.message.refBlock : null,\n      gas_limit: String(ix.message.computeLimit),\n      payer: (0,_onflow_util_address__WEBPACK_IMPORTED_MODULE_4__.sansPrefix)(ix.accounts[Array.isArray(ix.payer) ? ix.payer[0] : ix.payer].addr),\n      proposal_key: {\n        address: (0,_onflow_util_address__WEBPACK_IMPORTED_MODULE_4__.sansPrefix)(ix.accounts[ix.proposer].addr),\n        key_index: String(ix.accounts[ix.proposer].keyId),\n        sequence_number: String(ix.accounts[ix.proposer].sequenceNum)\n      },\n      authorizers: ix.authorizations.map(tempId => ix.accounts[tempId].addr).reduce((prev, current) => {\n        return prev.find(item => item === current) ? prev : [...prev, current];\n      }, []).map(_onflow_util_address__WEBPACK_IMPORTED_MODULE_4__.sansPrefix),\n      payload_signatures: payloadSignatures,\n      envelope_signatures: envelopeSignatures\n    }\n  });\n  var t2 = Date.now();\n  let ret = context.response();\n  ret.tag = ix.tag;\n  ret.transactionId = res.id;\n  if (typeof window !== \"undefined\" && typeof CustomEvent !== \"undefined\") {\n    window.dispatchEvent(new CustomEvent(\"FLOW::TX\", {\n      detail: {\n        txId: ret.transactionId,\n        delta: t2 - t1\n      }\n    }));\n  }\n  return ret;\n}\n\nasync function sendGetNetworkParameters(ix) {\n  let context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  let opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_0__.invariant)(opts.node, `SDK Send Get Network Parameters Error: opts.node must be defined.`);\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_0__.invariant)(context.response, `SDK Send Get Network Parameters Error: context.response must be defined.`);\n  const httpRequest$1 = opts.httpRequest || httpRequest;\n  ix = await ix;\n  const res = await httpRequest$1({\n    hostname: opts.node,\n    path: `/v1/network/parameters`,\n    method: \"GET\",\n    body: null,\n    enableRequestLogging: opts.enableRequestLogging ?? true\n  });\n  let ret = context.response();\n  ret.tag = ix.tag;\n  ret.networkParameters = {\n    chainId: res.chain_id\n  };\n  return ret;\n}\n\nasync function sendGetNodeVersionInfo(ix) {\n  let context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  let opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_0__.invariant)(opts.node, `SDK Send Get Node Version Info Error: opts.node must be defined.`);\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_0__.invariant)(context.response, `SDK Send Get Node Verison Info Error: context.response must be defined.`);\n  const httpRequest$1 = opts.httpRequest || httpRequest;\n  ix = await ix;\n  const res = await httpRequest$1({\n    hostname: opts.node,\n    path: `/v1/node_version_info`,\n    method: \"GET\"\n  });\n  let ret = context.response();\n  ret.tag = ix.tag;\n  ret.nodeVersionInfo = {\n    semver: res.semver,\n    commit: res.commit,\n    sporkId: res.spork_id,\n    protocolVersion: parseInt(res.protocol_version),\n    sporkRootBlockHeight: parseInt(res.spork_root_block_height),\n    nodeRootBlockHeight: parseInt(res.node_root_block_height)\n  };\n  return ret;\n}\n\nconst WebSocket = (isomorphic_ws__WEBPACK_IMPORTED_MODULE_6___default());\n\nclass WebsocketError extends Error {\n  constructor(_ref) {\n    let {\n      code,\n      reason,\n      message,\n      wasClean\n    } = _ref;\n    const msg = `\n      connectWs: connection closed with error${message ? `: ${message}` : \"\"}\n      ${code ? `code: ${code}` : \"\"}\n      ${reason ? `reason: ${reason}` : \"\"}\n      ${wasClean ? `wasClean: ${wasClean}` : \"\"}\n    `;\n    super(msg);\n    this.name = \"WebsocketError\";\n    this.code = code;\n    this.reason = reason;\n    this.wasClean = false;\n  }\n}\nfunction connectWs(_ref2) {\n  let {\n    hostname,\n    path,\n    params,\n    getParams,\n    retryLimit = 5,\n    retryIntervalMs = 1000\n  } = _ref2;\n  if (getParams && params) {\n    throw new Error(\"connectWs: cannot specify both params and getParams\");\n  }\n  let outputEmitter = new events__WEBPACK_IMPORTED_MODULE_5__.EventEmitter();\n  let retryCount = 0;\n  const resolveParams = getParams || (() => params);\n  let close = () => {};\n  (function connect() {\n    let userClosed = false;\n    let hasOpened = false;\n\n    // Build a websocket connection with correct protocol & params\n    const url = buildConnectionUrl(hostname, path, resolveParams());\n    const ws = new WebSocket(url);\n    ws.onmessage = function (e) {\n      const data = safeParseJSON(e.data);\n      if (data) {\n        outputEmitter.emit(\"data\", data);\n      } else {\n        outputEmitter.emit(\"error\", new WebsocketError({\n          message: \"invalid JSON data\"\n        }));\n        this.close();\n      }\n    };\n    ws.onclose = function (e) {\n      if (userClosed) {\n        outputEmitter.emit(\"close\");\n        outputEmitter.removeAllListeners();\n        return;\n      }\n      if (!hasOpened) {\n        if (retryCount < retryLimit) {\n          retryCount++;\n          setTimeout(connect, retryIntervalMs);\n        } else {\n          outputEmitter.emit(\"error\", new WebsocketError({\n            wasClean: e.wasClean,\n            code: e.code,\n            reason: e.reason,\n            message: \"failed to connect\"\n          }));\n\n          // Emit close event on next tick so that the error event is emitted first\n          setTimeout(() => {\n            outputEmitter.emit(\"close\");\n            outputEmitter.removeAllListeners();\n          });\n        }\n      } else {\n        // If the connection was established before closing, attempt to reconnect\n        setTimeout(connect, retryIntervalMs);\n      }\n    };\n    ws.onopen = function () {\n      hasOpened = true;\n      retryCount = 0;\n    };\n    close = () => {\n      userClosed = true;\n      ws.close();\n    };\n  })();\n  return {\n    on(event, listener) {\n      outputEmitter.on(event, listener);\n      return this;\n    },\n    off(event, listener) {\n      outputEmitter.off(event, listener);\n      return this;\n    },\n    close() {\n      close();\n    }\n  };\n}\nfunction buildConnectionUrl(hostname, path, params) {\n  const url = new URL(path || \"\", hostname);\n  if (url.protocol === \"https:\") {\n    url.protocol = \"wss:\";\n  } else if (url.protocol === \"http:\") {\n    url.protocol = \"ws:\";\n  }\n  Object.entries(params || {}).forEach(_ref3 => {\n    let [key, value] = _ref3;\n    if (value) {\n      let formattedValue;\n      if (Array.isArray(value)) {\n        formattedValue = value.join(\",\");\n      } else {\n        formattedValue = value.toString();\n      }\n      url.searchParams.append(key, formattedValue);\n    }\n  });\n  return url.toString();\n}\n\nfunction constructData(ix, context, data) {\n  const response = context.response();\n  response.tag = ix.tag;\n  response.events = data.Events?.length > 0 ? data.Events.map(event => ({\n    blockId: data.BlockID,\n    blockHeight: Number(data.Height),\n    blockTimestamp: data.BlockTimestamp,\n    type: event.Type,\n    transactionId: event.TransactionID,\n    transactionIndex: Number(event.TransactionIndex),\n    eventIndex: Number(event.EventIndex),\n    payload: JSON.parse(context.Buffer.from(event.Payload, \"base64\").toString())\n  })) : null;\n  response.heartbeat = {\n    blockId: data.BlockID,\n    blockHeight: Number(data.Height),\n    blockTimestamp: data.BlockTimestamp\n  };\n  return response;\n}\nfunction constructResponse(ix, context, stream) {\n  const response = context.response();\n  response.tag = ix.tag;\n  response.streamConnection = stream;\n  return response;\n}\nasync function connectSubscribeEvents(ix) {\n  let context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  let opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_0__.invariant)(opts.node, `SDK Send Get Events Error: opts.node must be defined.`);\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_0__.invariant)(context.response, `SDK Send Get Events Error: context.response must be defined.`);\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_0__.invariant)(context.Buffer, `SDK Send Get Events Error: context.Buffer must be defined.`);\n  const resolvedIx = await ix;\n  const connectWs$1 = opts.connectWs || connectWs;\n  const outputEmitter = new events__WEBPACK_IMPORTED_MODULE_5__.EventEmitter();\n  let lastBlockHeight = null;\n\n  // Connect to the websocket & provide reconnection parameters\n  const connection = connectWs$1({\n    hostname: opts.node,\n    path: `/v1/subscribe_events`,\n    getParams: () => {\n      const params = {\n        event_types: resolvedIx.subscribeEvents?.eventTypes,\n        addresses: resolvedIx.subscribeEvents?.addresses,\n        contracts: resolvedIx.subscribeEvents?.contracts,\n        heartbeat_interval: resolvedIx.subscribeEvents?.heartbeatInterval\n      };\n\n      // If the lastBlockId is set, use it to resume the stream\n      if (lastBlockHeight) {\n        params.start_height = lastBlockHeight + 1;\n      } else {\n        params.start_block_id = resolvedIx.subscribeEvents?.startBlockId;\n        params.start_height = resolvedIx.subscribeEvents?.startHeight;\n      }\n      return params;\n    }\n  });\n\n  // Map the connection to a formatted response stream\n  connection.on(\"data\", data => {\n    const responseData = constructData(resolvedIx, context, data);\n    lastBlockHeight = responseData.heartbeat.blockHeight;\n    outputEmitter.emit(\"data\", responseData);\n  });\n  connection.on(\"error\", error => {\n    outputEmitter.emit(\"error\", error);\n  });\n  connection.on(\"close\", () => {\n    outputEmitter.emit(\"close\");\n  });\n  const responseStream = {\n    on(event, listener) {\n      outputEmitter.on(event, listener);\n      return this;\n    },\n    off(event, listener) {\n      outputEmitter.off(event, listener);\n      return this;\n    },\n    close() {\n      connection.close();\n    }\n  };\n  return constructResponse(resolvedIx, context, responseStream);\n}\n\nconst send = async function (ix, context) {\n  let opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_0__.invariant)(Boolean(opts?.node), `SDK Send Error: Either opts.node or \"accessNode.api\" in config must be defined.`);\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_0__.invariant)(Boolean(context.ix), `SDK Send Error: context.ix must be defined.`);\n  ix = await ix;\n\n  // prettier-ignore\n  switch (true) {\n    case context.ix.isTransaction(ix):\n      return opts.sendTransaction ? opts.sendTransaction(ix, context, opts) : sendTransaction(ix, context, opts);\n    case context.ix.isGetTransactionStatus(ix):\n      return opts.sendGetTransactionStatus ? opts.sendGetTransactionStatus(ix, context, opts) : sendGetTransactionStatus(ix, context, opts);\n    case context.ix.isGetTransaction(ix):\n      return opts.sendGetTransaction ? opts.sendGetTransaction(ix, context, opts) : sendGetTransaction(ix, context, opts);\n    case context.ix.isScript(ix):\n      return opts.sendExecuteScript ? opts.sendExecuteScript(ix, context, opts) : sendExecuteScript(ix, context, opts);\n    case context.ix.isGetAccount(ix):\n      return opts.sendGetAccount ? opts.sendGetAccount(ix, context, opts) : sendGetAccount(ix, context, opts);\n    case context.ix.isGetEvents(ix):\n      return opts.sendGetEvents ? opts.sendGetEvents(ix, context, opts) : sendGetEvents(ix, context, opts);\n    case context.ix.isSubscribeEvents?.(ix):\n      return opts.connectSubscribeEvents ? opts.connectSubscribeEvents(ix, context, opts) : connectSubscribeEvents(ix, context, opts);\n    case context.ix.isGetBlock(ix):\n      return opts.sendGetBlock ? opts.sendGetBlock(ix, context, opts) : sendGetBlock(ix, context, opts);\n    case context.ix.isGetBlockHeader(ix):\n      return opts.sendGetBlockHeader ? opts.sendGetBlockHeader(ix, context, opts) : sendGetBlockHeader(ix, context, opts);\n    case context.ix.isGetCollection(ix):\n      return opts.sendGetCollection ? opts.sendGetCollection(ix, context, opts) : sendGetCollection(ix, context, opts);\n    case context.ix.isPing(ix):\n      return opts.sendPing ? opts.sendPing(ix, context, opts) : sendPing(ix, context, opts);\n    case context.ix.isGetNetworkParameters(ix):\n      return opts.sendGetNetworkParameters ? opts.sendGetNetworkParameters(ix, context, opts) : sendGetNetworkParameters(ix, context, opts);\n    case context.ix.isGetNodeVersionInfo?.(ix):\n      return opts.sendGetNodeVersionInfo ? opts.sendGetNodeVersionInfo(ix, context, opts) : sendGetNodeVersionInfo(ix, context, opts);\n    default:\n      return ix;\n  }\n};\n\nlet Action = /*#__PURE__*/function (Action) {\n  Action[\"LIST_SUBSCRIPTIONS\"] = \"list_subscriptions\";\n  Action[\"SUBSCRIBE\"] = \"subscribe\";\n  Action[\"UNSUBSCRIBE\"] = \"unsubscribe\";\n  return Action;\n}({});\nclass SocketError extends Error {\n  constructor(code, message) {\n    super(message);\n    this.name = \"SocketError\";\n    this.code = code;\n  }\n  static fromMessage(error) {\n    return new SocketError(error.code, error.message);\n  }\n}\n\nconst WS_OPEN = 1;\nclass SubscriptionManager {\n  counter = 0;\n  socket = null;\n  subscriptions = [];\n  reconnectAttempts = 0;\n  connectPromise = null;\n  closeConnection = null;\n  constructor(handlers, config) {\n    this.config = {\n      ...config,\n      reconnectOptions: {\n        initialReconnectDelay: 500,\n        reconnectAttempts: 5,\n        maxReconnectDelay: 5000,\n        ...config.reconnectOptions\n      }\n    };\n    this.handlers = handlers;\n  }\n  subscribe(opts) {\n    const idPromise = this._subscribe(opts);\n    return {\n      unsubscribe: () => {\n        // Unsubscribe when the ID is available\n        idPromise.then(id => id && this.unsubscribe(id));\n      }\n    };\n  }\n  async _subscribe(opts) {\n    // Get the data provider for the topic\n    const topicHandler = this.getHandler(opts.topic);\n    const subscriber = topicHandler.createSubscriber(opts.args, opts.onData, opts.onError);\n    let sub = null;\n    try {\n      // Connect the socket if it's not already open\n      await this.connect();\n\n      // Track the subscription locally\n      sub = {\n        id: String(this.counter++),\n        topic: opts.topic,\n        subscriber: subscriber\n      };\n      this.subscriptions.push(sub);\n\n      // Send the subscribe message\n      const response = await this.sendSubscribe(sub);\n      if (response.error) {\n        throw new Error(`Failed to subscribe to topic ${sub.topic}`, {\n          cause: SocketError.fromMessage(response.error)\n        });\n      }\n    } catch (e) {\n      // Unsubscribe if there was an error\n      subscriber.onError(e instanceof Error ? e : new Error(String(e)));\n      if (sub) this.unsubscribe(sub.id);\n      return null;\n    }\n    return sub.id;\n  }\n  unsubscribe(id) {\n    // Get the subscription\n    const sub = this.subscriptions.find(sub => sub.id === id);\n    if (!sub) return;\n\n    // Remove the subscription\n    this.subscriptions = this.subscriptions.filter(sub => sub.id !== id);\n\n    // Close the socket if there are no more subscriptions\n    if (this.subscriptions.length === 0) {\n      this.closeConnection?.();\n      return;\n    }\n\n    // Otherwise, the unsubscribe message\n    this.sendUnsubscribe(sub).catch(e => {\n      console.error(`Error while unsubscribing from topic: ${e}`);\n    });\n  }\n\n  // Lazy connect to the socket when the first subscription is made\n  async connect() {\n    if (this.connectPromise) {\n      return this.connectPromise;\n    }\n    this.connectPromise = new Promise((resolve, reject) => {\n      // If the socket is already open, do nothing\n      if (this.socket?.readyState === WS_OPEN) {\n        resolve();\n        return;\n      }\n      this.socket = new WebSocket(this.config.node);\n      const onMessage = event => {\n        const message = JSON.parse(event.data);\n\n        // Error message\n        if (\"action\" in message && message.error) {\n          const sub = this.subscriptions.find(sub => sub.id === message.subscription_id);\n          if (sub) {\n            sub.subscriber.onError(new Error(`Failed to subscribe to topic ${sub.topic}: ${message.error.message}`));\n            // Remove the subscription\n            this.subscriptions = this.subscriptions.filter(sub => sub.id !== message.subscription_id);\n          }\n          return;\n        }\n        const sub = this.subscriptions.find(sub => sub.id === message.subscription_id);\n        if (sub) {\n          if (!(\"action\" in message) && message.subscription_id === sub.id) {\n            sub.subscriber.onData(message.payload);\n          }\n        }\n      };\n      const onClose = () => {\n        this.handleSocketError(new Error(\"WebSocket closed\")).then(() => {\n          resolve();\n        }).catch(e => {\n          reject(e);\n        });\n      };\n      const onOpen = () => {\n        resolve();\n      };\n      this.socket.addEventListener(\"message\", onMessage);\n      this.socket.addEventListener(\"close\", onClose);\n      this.socket.addEventListener(\"open\", onOpen);\n      this.closeConnection = () => {\n        this.socket?.removeEventListener(\"message\", onMessage);\n        this.socket?.removeEventListener(\"close\", onClose);\n        this.socket?.removeEventListener(\"open\", onOpen);\n        this.socket?.close();\n        this.socket = null;\n        this.closeConnection = null;\n        this.connectPromise = null;\n      };\n    });\n    return this.connectPromise;\n  }\n  async handleSocketError(error) {\n    // Cleanup the connection\n    this.closeConnection?.();\n\n    // Validate the number of reconnection attempts\n    if (++this.reconnectAttempts >= this.config.reconnectOptions.reconnectAttempts) {\n      _onflow_util_logger__WEBPACK_IMPORTED_MODULE_2__.log({\n        level: _onflow_util_logger__WEBPACK_IMPORTED_MODULE_2__.LEVELS.error,\n        title: \"WebSocket Error\",\n        message: `Failed to reconnect to the server after ${this.reconnectAttempts + 1} attempts: ${error}`\n      });\n      this.subscriptions.forEach(sub => {\n        sub.subscriber.onError(new Error(`Failed to reconnect to the server after ${this.reconnectAttempts + 1} attempts: ${error}`));\n      });\n      this.subscriptions = [];\n      this.reconnectAttempts = 0;\n      throw error;\n    } else {\n      _onflow_util_logger__WEBPACK_IMPORTED_MODULE_2__.log({\n        level: _onflow_util_logger__WEBPACK_IMPORTED_MODULE_2__.LEVELS.warn,\n        title: \"WebSocket Error\",\n        message: `WebSocket error, reconnecting in ${this.backoffInterval}ms: ${error}`\n      });\n\n      // Delay the reconnection\n      await new Promise(resolve => setTimeout(resolve, this.backoffInterval));\n\n      // Try to reconnect\n      await this.connect();\n\n      // Restore subscriptions\n      await Promise.all(this.subscriptions.map(async sub => {\n        await this.sendSubscribe(sub).catch(e => {\n          sub.subscriber.onError(new Error(`Failed to restore subscription: ${e}`));\n          // Remove the subscription\n          this.subscriptions = this.subscriptions.filter(s => s.id !== sub.id);\n        });\n      }));\n      this.reconnectAttempts = 0;\n    }\n  }\n  async sendSubscribe(sub) {\n    // Send the subscription message\n    const request = {\n      action: Action.SUBSCRIBE,\n      topic: sub.topic,\n      arguments: sub.subscriber.getConnectionArgs(),\n      subscription_id: String(sub.id)\n    };\n    const response = await this.request(request);\n    if (response.error) {\n      throw new Error(`Failed to subscribe to topic ${sub.topic}`, {\n        cause: SocketError.fromMessage(response.error)\n      });\n    }\n    return response;\n  }\n  async sendUnsubscribe(sub) {\n    // Send the unsubscribe message if the subscription has a remote id\n    const request = {\n      action: Action.UNSUBSCRIBE,\n      subscription_id: sub.id\n    };\n    this.socket?.send(JSON.stringify(request));\n    const response = await this.request(request);\n    if (response.error) {\n      throw new Error(`Failed to unsubscribe from topic ${sub.topic}`, {\n        cause: SocketError.fromMessage(response.error)\n      });\n    }\n    return response;\n  }\n  async request(request) {\n    let cleanup = () => {};\n    return await new Promise((resolve, reject) => {\n      if (!this.socket) {\n        reject(new Error(\"WebSocket is not connected\"));\n        return;\n      }\n\n      // Set the cleanup function to remove the event listeners\n      cleanup = () => {\n        this.socket?.removeEventListener(\"error\", onError);\n        this.socket?.removeEventListener(\"message\", onMessage);\n        this.socket?.removeEventListener(\"close\", onClose);\n      };\n\n      // Bind event listeners\n      this.socket.addEventListener(\"error\", onError);\n      this.socket.addEventListener(\"message\", onMessage);\n      this.socket.addEventListener(\"close\", onClose);\n\n      // Send the request\n      this.socket.send(JSON.stringify(request));\n      function onError(e) {\n        reject(new Error(`WebSocket error: ${e}`));\n      }\n      function onClose() {\n        reject(new Error(\"WebSocket closed\"));\n      }\n      function onMessage(event) {\n        const data = JSON.parse(event.data);\n        if (data.subscription_id === request.subscription_id) {\n          resolve(data);\n        }\n      }\n    }).finally(() => {\n      cleanup();\n    });\n  }\n  getHandler(topic) {\n    const handler = this.handlers.find(handler => handler.topic === topic);\n    if (!handler) {\n      throw new Error(`No handler found for topic ${topic}`);\n    }\n    return handler;\n  }\n\n  /**\n   * Calculate the backoff interval for reconnection attempts\n   * @returns The backoff interval in milliseconds\n   */\n  get backoffInterval() {\n    return Math.min(this.config.reconnectOptions.maxReconnectDelay, this.config.reconnectOptions.initialReconnectDelay * 2 ** this.reconnectAttempts);\n  }\n}\n\nfunction createSubscriptionHandler(handler) {\n  return handler;\n}\n\nconst blocksHandler = createSubscriptionHandler({\n  topic: _onflow_typedefs__WEBPACK_IMPORTED_MODULE_7__.SubscriptionTopic.BLOCKS,\n  createSubscriber: (initialArgs, onData, onError) => {\n    let resumeArgs = {\n      ...initialArgs\n    };\n    return {\n      onData(data) {\n        // Parse the raw data\n        const parsedData = {\n          block: {\n            id: data.header.id,\n            parentId: data.header.parent_id,\n            height: Number(data.header.height),\n            timestamp: data.header.timestamp,\n            parentVoterSignature: data.header.parent_voter_signature,\n            collectionGuarantees: data.payload.collection_guarantees.map(guarantee => ({\n              collectionId: guarantee.collection_id,\n              signerIds: guarantee.signer_indices\n            })),\n            blockSeals: data.payload.block_seals.map(seal => ({\n              blockId: seal.block_id,\n              executionReceiptId: seal.result_id\n            }))\n          }\n        };\n\n        // Update the resume args\n        resumeArgs = {\n          blockStatus: resumeArgs.blockStatus,\n          startBlockHeight: Number(BigInt(data.header.height) + BigInt(1))\n        };\n        onData(parsedData);\n      },\n      onError(error) {\n        onError(error);\n      },\n      getConnectionArgs() {\n        let encodedArgs = {\n          block_status: resumeArgs.blockStatus\n        };\n        if (\"startBlockHeight\" in resumeArgs && resumeArgs.startBlockHeight) {\n          return {\n            ...encodedArgs,\n            start_block_height: String(resumeArgs.startBlockHeight)\n          };\n        }\n        if (\"startBlockId\" in resumeArgs && resumeArgs.startBlockId) {\n          return {\n            ...encodedArgs,\n            start_block_id: resumeArgs.startBlockId\n          };\n        }\n        return encodedArgs;\n      }\n    };\n  }\n});\n\nconst blockHeadersHandler = createSubscriptionHandler({\n  topic: _onflow_typedefs__WEBPACK_IMPORTED_MODULE_7__.SubscriptionTopic.BLOCK_HEADERS,\n  createSubscriber: (initialArgs, onData, onError) => {\n    let resumeArgs = {\n      ...initialArgs\n    };\n    return {\n      onData(data) {\n        // Parse the raw data\n        const parsedData = {\n          blockHeader: {\n            id: data.id,\n            parentId: data.parent_id,\n            height: Number(data.height),\n            timestamp: data.timestamp,\n            parentVoterSignature: data.parent_voter_signature\n          }\n        };\n\n        // Update the resume args\n        resumeArgs = {\n          blockStatus: resumeArgs.blockStatus,\n          startBlockHeight: Number(BigInt(data.height) + BigInt(1))\n        };\n        onData(parsedData);\n      },\n      onError(error) {\n        onError(error);\n      },\n      getConnectionArgs() {\n        let encodedArgs = {\n          block_status: resumeArgs.blockStatus\n        };\n        if (\"startBlockHeight\" in resumeArgs && resumeArgs.startBlockHeight) {\n          return {\n            ...encodedArgs,\n            start_block_height: resumeArgs.startBlockHeight\n          };\n        }\n        if (\"startBlockId\" in resumeArgs && resumeArgs.startBlockId) {\n          return {\n            ...encodedArgs,\n            start_block_id: resumeArgs.startBlockId\n          };\n        }\n        return encodedArgs;\n      }\n    };\n  }\n});\n\nconst blockDigestsHandler = createSubscriptionHandler({\n  topic: _onflow_typedefs__WEBPACK_IMPORTED_MODULE_7__.SubscriptionTopic.BLOCK_DIGESTS,\n  createSubscriber: (initialArgs, onData, onError) => {\n    let resumeArgs = {\n      ...initialArgs\n    };\n    return {\n      onData(data) {\n        // Parse the raw data\n        const parsedData = {\n          blockDigest: {\n            id: data.block_id,\n            height: Number(data.height),\n            timestamp: data.timestamp\n          }\n        };\n\n        // Update the resume args\n        resumeArgs = {\n          blockStatus: resumeArgs.blockStatus,\n          startBlockId: String(BigInt(data.height) + BigInt(1))\n        };\n        onData(parsedData);\n      },\n      onError(error) {\n        onError(error);\n      },\n      getConnectionArgs() {\n        let encodedArgs = {\n          block_status: resumeArgs.blockStatus\n        };\n        if (\"startBlockHeight\" in resumeArgs && resumeArgs.startBlockHeight) {\n          return {\n            ...encodedArgs,\n            start_block_height: resumeArgs.startBlockHeight\n          };\n        }\n        if (\"startBlockId\" in resumeArgs && resumeArgs.startBlockId) {\n          return {\n            ...encodedArgs,\n            start_block_id: resumeArgs.startBlockId\n          };\n        }\n        return encodedArgs;\n      }\n    };\n  }\n});\n\nconst accountStatusesHandler = createSubscriptionHandler({\n  topic: _onflow_typedefs__WEBPACK_IMPORTED_MODULE_7__.SubscriptionTopic.ACCOUNT_STATUSES,\n  createSubscriber: (initialArgs, onData, onError) => {\n    let resumeArgs = {\n      ...initialArgs\n    };\n    return {\n      onData(rawData) {\n        const data = [];\n        for (const [address, events] of Object.entries(rawData.account_events)) {\n          for (const event of events) {\n            // Parse the raw data\n            const parsedData = {\n              accountStatusEvent: {\n                accountAddress: address,\n                blockId: rawData.block_id,\n                blockHeight: Number(rawData.height),\n                type: event.type,\n                transactionId: event.transaction_id,\n                transactionIndex: Number(event.transaction_index),\n                eventIndex: Number(event.event_index),\n                payload: JSON.parse(Buffer.from(event.payload, \"base64\").toString())\n              }\n            };\n            data.push(parsedData);\n          }\n\n          // Sort the messages by increasing message index\n          data.sort((a, b) => {\n            const txIndexDiff = a.accountStatusEvent.transactionIndex - b.accountStatusEvent.transactionIndex;\n            if (txIndexDiff !== 0) return txIndexDiff;\n            return a.accountStatusEvent.eventIndex - b.accountStatusEvent.eventIndex;\n          });\n\n          // Emit the messages\n          for (const message of data) {\n            onData(message);\n          }\n\n          // Update the resume args\n          resumeArgs = {\n            ...resumeArgs,\n            startBlockHeight: Number(BigInt(rawData.height) + BigInt(1)),\n            startBlockId: undefined\n          };\n        }\n      },\n      onError(error) {\n        onError(error);\n      },\n      getConnectionArgs() {\n        let encodedArgs = {\n          event_types: resumeArgs.eventTypes,\n          addresses: resumeArgs.addresses,\n          account_addresses: resumeArgs.accountAddresses\n        };\n        if (\"startBlockHeight\" in resumeArgs && resumeArgs.startBlockHeight) {\n          return {\n            ...encodedArgs,\n            start_block_height: resumeArgs.startBlockHeight\n          };\n        }\n        if (\"startBlockId\" in resumeArgs && resumeArgs.startBlockId) {\n          return {\n            ...encodedArgs,\n            start_block_id: resumeArgs.startBlockId\n          };\n        }\n        return encodedArgs;\n      }\n    };\n  }\n});\n\nconst STATUS_MAP = {\n  UNKNOWN: 0,\n  PENDING: 1,\n  FINALIZED: 2,\n  EXECUTED: 3,\n  SEALED: 4,\n  EXPIRED: 5\n};\nconst transactionStatusesHandler = createSubscriptionHandler({\n  topic: _onflow_typedefs__WEBPACK_IMPORTED_MODULE_7__.SubscriptionTopic.TRANSACTION_STATUSES,\n  createSubscriber: (initialArgs, onData, onError) => {\n    let resumeArgs = {\n      ...initialArgs\n    };\n    return {\n      onData(data) {\n        // Parse the raw data\n        const parsedData = {\n          transactionStatus: {\n            blockId: data.transaction_result.block_id,\n            status: STATUS_MAP[data.transaction_result.status.toUpperCase()],\n            statusString: data.transaction_result.status.toUpperCase(),\n            statusCode: data.transaction_result.status_code,\n            errorMessage: data.transaction_result.error_message,\n            events: data.transaction_result.events.map(event => ({\n              type: event.type,\n              transactionId: event.transaction_id,\n              transactionIndex: Number(event.transaction_index),\n              eventIndex: Number(event.event_index),\n              payload: JSON.parse(buffer__WEBPACK_IMPORTED_MODULE_8__.Buffer.from(event.payload, \"base64\").toString())\n            }))\n          }\n        };\n        onData(parsedData);\n      },\n      onError(error) {\n        onError(error);\n      },\n      getConnectionArgs() {\n        return {\n          tx_id: resumeArgs.transactionId\n        };\n      }\n    };\n  }\n});\n\nconst eventsHandler = createSubscriptionHandler({\n  topic: _onflow_typedefs__WEBPACK_IMPORTED_MODULE_7__.SubscriptionTopic.EVENTS,\n  createSubscriber: (initialArgs, onData, onError) => {\n    let resumeArgs = {\n      ...initialArgs\n    };\n    return {\n      onData(rawData) {\n        for (const event of rawData.events) {\n          // Parse the raw data\n          const result = {\n            event: {\n              blockId: rawData.block_id,\n              blockHeight: Number(rawData.block_height),\n              blockTimestamp: rawData.block_timestamp,\n              type: event.type,\n              transactionId: event.transaction_id,\n              transactionIndex: Number(event.transaction_index),\n              eventIndex: Number(event.event_index),\n              payload: JSON.parse(Buffer.from(event.payload, \"base64\").toString())\n            }\n          };\n          onData(result);\n        }\n\n        // Update the resume args\n        resumeArgs = {\n          ...resumeArgs,\n          startHeight: Number(BigInt(rawData.block_height) + BigInt(1)),\n          startBlockId: undefined\n        };\n      },\n      onError(error) {\n        onError(error);\n      },\n      getConnectionArgs() {\n        let encodedArgs = {\n          event_types: resumeArgs.eventTypes,\n          addresses: resumeArgs.addresses,\n          contracts: resumeArgs.contracts\n        };\n        if (\"startBlockHeight\" in resumeArgs && resumeArgs.startBlockHeight) {\n          return {\n            ...encodedArgs,\n            start_block_height: resumeArgs.startBlockHeight\n          };\n        }\n        if (\"startBlockId\" in resumeArgs && resumeArgs.startBlockId) {\n          return {\n            ...encodedArgs,\n            start_block_id: resumeArgs.startBlockId\n          };\n        }\n        return encodedArgs;\n      }\n    };\n  }\n});\n\nconst SUBSCRIPTION_HANDLERS = [blocksHandler, blockHeadersHandler, blockDigestsHandler, accountStatusesHandler, transactionStatusesHandler, eventsHandler];\n\n// Map of SubscriptionManager instances by access node URL\nlet subscriptionManagerMap = new Map();\nfunction subscribe(_ref, opts) {\n  let {\n    topic,\n    args,\n    onData,\n    onError\n  } = _ref;\n  // Get the SubscriptionManager instance for the access node, or create a new one\n  const node = getWsUrl(opts.node);\n  const manager = subscriptionManagerMap.get(node) || new SubscriptionManager(SUBSCRIPTION_HANDLERS, {\n    node\n  });\n  subscriptionManagerMap.set(node, manager);\n  return manager.subscribe({\n    topic,\n    args,\n    onData: onData,\n    onError\n  });\n}\nfunction getWsUrl(node) {\n  const url = new URL(combineURLs(node, \"/v1/ws\"));\n  if (url.protocol === \"https:\") {\n    url.protocol = \"wss:\";\n  } else if (url.protocol === \"http:\") {\n    url.protocol = \"ws:\";\n  }\n  return url.toString();\n}\n\nconst httpTransport = {\n  send,\n  subscribe\n};\n\n\n//# sourceMappingURL=index.module.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/@onflow/transport-http/dist/index.module.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/@onflow/typedefs/dist/typedefs.module.js":
/*!****************************************************************!*\
  !*** ../node_modules/@onflow/typedefs/dist/typedefs.module.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   FvmErrorCode: () => (/* binding */ FvmErrorCode),\n/* harmony export */   HashAlgorithm: () => (/* binding */ HashAlgorithm),\n/* harmony export */   InteractionResolverKind: () => (/* binding */ InteractionResolverKind),\n/* harmony export */   InteractionStatus: () => (/* binding */ InteractionStatus),\n/* harmony export */   InteractionTag: () => (/* binding */ InteractionTag),\n/* harmony export */   SignatureAlgorithm: () => (/* binding */ SignatureAlgorithm),\n/* harmony export */   SubscriptionTopic: () => (/* binding */ SubscriptionTopic),\n/* harmony export */   TransactionExecutionStatus: () => (/* binding */ TransactionExecutionStatus),\n/* harmony export */   TransactionRole: () => (/* binding */ TransactionRole)\n/* harmony export */ });\nvar InteractionTag = /*#__PURE__*/function (InteractionTag) {\n  InteractionTag[\"UNKNOWN\"] = \"UNKNOWN\";\n  InteractionTag[\"SCRIPT\"] = \"SCRIPT\";\n  InteractionTag[\"TRANSACTION\"] = \"TRANSACTION\";\n  InteractionTag[\"GET_TRANSACTION_STATUS\"] = \"GET_TRANSACTION_STATUS\";\n  InteractionTag[\"GET_ACCOUNT\"] = \"GET_ACCOUNT\";\n  InteractionTag[\"GET_EVENTS\"] = \"GET_EVENTS\";\n  InteractionTag[\"PING\"] = \"PING\";\n  InteractionTag[\"GET_TRANSACTION\"] = \"GET_TRANSACTION\";\n  InteractionTag[\"GET_BLOCK\"] = \"GET_BLOCK\";\n  InteractionTag[\"GET_BLOCK_HEADER\"] = \"GET_BLOCK_HEADER\";\n  InteractionTag[\"GET_COLLECTION\"] = \"GET_COLLECTION\";\n  InteractionTag[\"GET_NETWORK_PARAMETERS\"] = \"GET_NETWORK_PARAMETERS\";\n  InteractionTag[\"SUBSCRIBE_EVENTS\"] = \"SUBSCRIBE_EVENTS\";\n  InteractionTag[\"GET_NODE_VERSION_INFO\"] = \"GET_NODE_VERSION_INFO\";\n  return InteractionTag;\n}({});\nvar InteractionStatus = /*#__PURE__*/function (InteractionStatus) {\n  InteractionStatus[\"BAD\"] = \"BAD\";\n  InteractionStatus[\"OK\"] = \"OK\";\n  return InteractionStatus;\n}({});\nvar TransactionRole = /*#__PURE__*/function (TransactionRole) {\n  TransactionRole[\"AUTHORIZER\"] = \"authorizer\";\n  TransactionRole[\"PAYER\"] = \"payer\";\n  TransactionRole[\"PROPOSER\"] = \"proposer\";\n  return TransactionRole;\n}({});\nvar InteractionResolverKind = /*#__PURE__*/function (InteractionResolverKind) {\n  InteractionResolverKind[\"ARGUMENT\"] = \"ARGUMENT\";\n  InteractionResolverKind[\"ACCOUNT\"] = \"ACCOUNT\";\n  return InteractionResolverKind;\n}({});\n\nvar FvmErrorCode = /*#__PURE__*/function (FvmErrorCode) {\n  FvmErrorCode[FvmErrorCode[\"UNKNOWN_ERROR\"] = -1] = \"UNKNOWN_ERROR\";\n  FvmErrorCode[FvmErrorCode[\"TX_VALIDATION_ERROR\"] = 1000] = \"TX_VALIDATION_ERROR\";\n  FvmErrorCode[FvmErrorCode[\"INVALID_TX_BYTE_SIZE_ERROR\"] = 1001] = \"INVALID_TX_BYTE_SIZE_ERROR\";\n  FvmErrorCode[FvmErrorCode[\"INVALID_REFERENCE_BLOCK_ERROR\"] = 1002] = \"INVALID_REFERENCE_BLOCK_ERROR\";\n  FvmErrorCode[FvmErrorCode[\"EXPIRED_TRANSACTION_ERROR\"] = 1003] = \"EXPIRED_TRANSACTION_ERROR\";\n  FvmErrorCode[FvmErrorCode[\"INVALID_SCRIPT_ERROR\"] = 1004] = \"INVALID_SCRIPT_ERROR\";\n  FvmErrorCode[FvmErrorCode[\"INVALID_GAS_LIMIT_ERROR\"] = 1005] = \"INVALID_GAS_LIMIT_ERROR\";\n  FvmErrorCode[FvmErrorCode[\"INVALID_PROPOSAL_SIGNATURE_ERROR\"] = 1006] = \"INVALID_PROPOSAL_SIGNATURE_ERROR\";\n  FvmErrorCode[FvmErrorCode[\"INVALID_PROPOSAL_SEQ_NUMBER_ERROR\"] = 1007] = \"INVALID_PROPOSAL_SEQ_NUMBER_ERROR\";\n  FvmErrorCode[FvmErrorCode[\"INVALID_PAYLOAD_SIGNATURE_ERROR\"] = 1008] = \"INVALID_PAYLOAD_SIGNATURE_ERROR\";\n  FvmErrorCode[FvmErrorCode[\"INVALID_ENVELOPE_SIGNATURE_ERROR\"] = 1009] = \"INVALID_ENVELOPE_SIGNATURE_ERROR\";\n  FvmErrorCode[FvmErrorCode[\"FVM_INTERNAL_ERROR\"] = 1050] = \"FVM_INTERNAL_ERROR\";\n  FvmErrorCode[FvmErrorCode[\"VALUE_ERROR\"] = 1051] = \"VALUE_ERROR\";\n  FvmErrorCode[FvmErrorCode[\"INVALID_ARGUMENT_ERROR\"] = 1052] = \"INVALID_ARGUMENT_ERROR\";\n  FvmErrorCode[FvmErrorCode[\"INVALID_ADDRESS_ERROR\"] = 1053] = \"INVALID_ADDRESS_ERROR\";\n  FvmErrorCode[FvmErrorCode[\"INVALID_LOCATION_ERROR\"] = 1054] = \"INVALID_LOCATION_ERROR\";\n  FvmErrorCode[FvmErrorCode[\"ACCOUNT_AUTHORIZATION_ERROR\"] = 1055] = \"ACCOUNT_AUTHORIZATION_ERROR\";\n  FvmErrorCode[FvmErrorCode[\"OPERATION_AUTHORIZATION_ERROR\"] = 1056] = \"OPERATION_AUTHORIZATION_ERROR\";\n  FvmErrorCode[FvmErrorCode[\"OPERATION_NOT_SUPPORTED_ERROR\"] = 1057] = \"OPERATION_NOT_SUPPORTED_ERROR\";\n  FvmErrorCode[FvmErrorCode[\"BLOCK_HEIGHT_OUT_OF_RANGE_ERROR\"] = 1058] = \"BLOCK_HEIGHT_OUT_OF_RANGE_ERROR\";\n  FvmErrorCode[FvmErrorCode[\"EXECUTION_ERROR\"] = 1100] = \"EXECUTION_ERROR\";\n  FvmErrorCode[FvmErrorCode[\"CADENCE_RUNTIME_ERROR\"] = 1101] = \"CADENCE_RUNTIME_ERROR\";\n  FvmErrorCode[FvmErrorCode[\"ENCODING_UNSUPPORTED_VALUE\"] = 1102] = \"ENCODING_UNSUPPORTED_VALUE\";\n  FvmErrorCode[FvmErrorCode[\"STORAGE_CAPACITY_EXCEEDED\"] = 1103] = \"STORAGE_CAPACITY_EXCEEDED\";\n  FvmErrorCode[FvmErrorCode[\"GAS_LIMIT_EXCEEDED_ERROR\"] = 1104] = \"GAS_LIMIT_EXCEEDED_ERROR\";\n  FvmErrorCode[FvmErrorCode[\"EVENT_LIMIT_EXCEEDED_ERROR\"] = 1105] = \"EVENT_LIMIT_EXCEEDED_ERROR\";\n  FvmErrorCode[FvmErrorCode[\"LEDGER_INTERACTION_LIMIT_EXCEEDED_ERROR\"] = 1106] = \"LEDGER_INTERACTION_LIMIT_EXCEEDED_ERROR\";\n  FvmErrorCode[FvmErrorCode[\"STATE_KEY_SIZE_LIMIT_ERROR\"] = 1107] = \"STATE_KEY_SIZE_LIMIT_ERROR\";\n  FvmErrorCode[FvmErrorCode[\"STATE_VALUE_SIZE_LIMIT_ERROR\"] = 1108] = \"STATE_VALUE_SIZE_LIMIT_ERROR\";\n  FvmErrorCode[FvmErrorCode[\"TRANSACTION_FEE_DEDUCTION_FAILED_ERROR\"] = 1109] = \"TRANSACTION_FEE_DEDUCTION_FAILED_ERROR\";\n  FvmErrorCode[FvmErrorCode[\"COMPUTATION_LIMIT_EXCEEDED_ERROR\"] = 1110] = \"COMPUTATION_LIMIT_EXCEEDED_ERROR\";\n  FvmErrorCode[FvmErrorCode[\"MEMORY_LIMIT_EXCEEDED_ERROR\"] = 1111] = \"MEMORY_LIMIT_EXCEEDED_ERROR\";\n  FvmErrorCode[FvmErrorCode[\"COULD_NOT_DECODE_EXECUTION_PARAMETER_FROM_STATE\"] = 1112] = \"COULD_NOT_DECODE_EXECUTION_PARAMETER_FROM_STATE\";\n  FvmErrorCode[FvmErrorCode[\"SCRIPT_EXECUTION_TIMED_OUT_ERROR\"] = 1113] = \"SCRIPT_EXECUTION_TIMED_OUT_ERROR\";\n  FvmErrorCode[FvmErrorCode[\"SCRIPT_EXECUTION_CANCELLED_ERROR\"] = 1114] = \"SCRIPT_EXECUTION_CANCELLED_ERROR\";\n  FvmErrorCode[FvmErrorCode[\"EVENT_ENCODING_ERROR\"] = 1115] = \"EVENT_ENCODING_ERROR\";\n  FvmErrorCode[FvmErrorCode[\"INVALID_INTERNAL_STATE_ACCESS_ERROR\"] = 1116] = \"INVALID_INTERNAL_STATE_ACCESS_ERROR\";\n  FvmErrorCode[FvmErrorCode[\"INSUFFICIENT_PAYER_BALANCE\"] = 1118] = \"INSUFFICIENT_PAYER_BALANCE\";\n  FvmErrorCode[FvmErrorCode[\"ACCOUNT_ERROR\"] = 1200] = \"ACCOUNT_ERROR\";\n  FvmErrorCode[FvmErrorCode[\"ACCOUNT_NOT_FOUND_ERROR\"] = 1201] = \"ACCOUNT_NOT_FOUND_ERROR\";\n  FvmErrorCode[FvmErrorCode[\"ACCOUNT_PUBLIC_KEY_NOT_FOUND_ERROR\"] = 1202] = \"ACCOUNT_PUBLIC_KEY_NOT_FOUND_ERROR\";\n  FvmErrorCode[FvmErrorCode[\"ACCOUNT_ALREADY_EXISTS_ERROR\"] = 1203] = \"ACCOUNT_ALREADY_EXISTS_ERROR\";\n  FvmErrorCode[FvmErrorCode[\"FROZEN_ACCOUNT_ERROR\"] = 1204] = \"FROZEN_ACCOUNT_ERROR\";\n  FvmErrorCode[FvmErrorCode[\"ACCOUNT_STORAGE_NOT_INITIALIZED_ERROR\"] = 1205] = \"ACCOUNT_STORAGE_NOT_INITIALIZED_ERROR\";\n  FvmErrorCode[FvmErrorCode[\"ACCOUNT_PUBLIC_KEY_LIMIT_ERROR\"] = 1206] = \"ACCOUNT_PUBLIC_KEY_LIMIT_ERROR\";\n  FvmErrorCode[FvmErrorCode[\"CONTRACT_ERROR\"] = 1250] = \"CONTRACT_ERROR\";\n  FvmErrorCode[FvmErrorCode[\"CONTRACT_NOT_FOUND_ERROR\"] = 1251] = \"CONTRACT_NOT_FOUND_ERROR\";\n  FvmErrorCode[FvmErrorCode[\"CONTRACT_NAMES_NOT_FOUND_ERROR\"] = 1252] = \"CONTRACT_NAMES_NOT_FOUND_ERROR\";\n  FvmErrorCode[FvmErrorCode[\"EVM_EXECUTION_ERROR\"] = 1300] = \"EVM_EXECUTION_ERROR\";\n  return FvmErrorCode;\n}({});\n\nvar SubscriptionTopic = /*#__PURE__*/function (SubscriptionTopic) {\n  SubscriptionTopic[\"BLOCKS\"] = \"blocks\";\n  SubscriptionTopic[\"BLOCK_HEADERS\"] = \"block_headers\";\n  SubscriptionTopic[\"BLOCK_DIGESTS\"] = \"block_digests\";\n  SubscriptionTopic[\"ACCOUNT_STATUSES\"] = \"account_statuses\";\n  SubscriptionTopic[\"TRANSACTION_STATUSES\"] = \"transaction_statuses\";\n  SubscriptionTopic[\"EVENTS\"] = \"events\";\n  return SubscriptionTopic;\n}({});\n\nvar SignatureAlgorithm = /*#__PURE__*/function (SignatureAlgorithm) {\n  SignatureAlgorithm[SignatureAlgorithm[\"ECDSA_P256\"] = 1] = \"ECDSA_P256\";\n  SignatureAlgorithm[SignatureAlgorithm[\"ECDSA_secp256k1\"] = 2] = \"ECDSA_secp256k1\";\n  SignatureAlgorithm[SignatureAlgorithm[\"BLS_BLS12_381\"] = 3] = \"BLS_BLS12_381\";\n  return SignatureAlgorithm;\n}({});\nvar HashAlgorithm = /*#__PURE__*/function (HashAlgorithm) {\n  HashAlgorithm[HashAlgorithm[\"SHA2_256\"] = 1] = \"SHA2_256\";\n  HashAlgorithm[HashAlgorithm[\"SHA2_384\"] = 2] = \"SHA2_384\";\n  HashAlgorithm[HashAlgorithm[\"SHA3_256\"] = 3] = \"SHA3_256\";\n  HashAlgorithm[HashAlgorithm[\"SHA3_384\"] = 4] = \"SHA3_384\";\n  HashAlgorithm[HashAlgorithm[\"KMAC128_BLS_BLS12_381\"] = 5] = \"KMAC128_BLS_BLS12_381\";\n  return HashAlgorithm;\n}({});\n\n/**\n * BlockDigest holds lightweight block information which includes only block id, block height and block timestamp.\n */\n\n/**\n * Header contains all meta-data for a block, as well as a hash representing\n * the combined payload of the entire block. It is what consensus nodes agree\n * on after validating the contents against the payload hash.\n */\n\n/**\n * The execution status of the transaction.\n */\nvar TransactionExecutionStatus = /*#__PURE__*/function (TransactionExecutionStatus) {\n  TransactionExecutionStatus[TransactionExecutionStatus[\"UNKNOWN\"] = 0] = \"UNKNOWN\";\n  TransactionExecutionStatus[TransactionExecutionStatus[\"PENDING\"] = 1] = \"PENDING\";\n  TransactionExecutionStatus[TransactionExecutionStatus[\"FINALIZED\"] = 2] = \"FINALIZED\";\n  TransactionExecutionStatus[TransactionExecutionStatus[\"EXECUTED\"] = 3] = \"EXECUTED\";\n  TransactionExecutionStatus[TransactionExecutionStatus[\"SEALED\"] = 4] = \"SEALED\";\n  TransactionExecutionStatus[TransactionExecutionStatus[\"EXPIRED\"] = 5] = \"EXPIRED\";\n  return TransactionExecutionStatus;\n}({});\n\n\n//# sourceMappingURL=typedefs.module.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/@onflow/typedefs/dist/typedefs.module.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/@onflow/types/dist/types.module.js":
/*!**********************************************************!*\
  !*** ../node_modules/@onflow/types/dist/types.module.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Address: () => (/* binding */ Address),\n/* harmony export */   Array: () => (/* binding */ _Array),\n/* harmony export */   Bool: () => (/* binding */ Bool),\n/* harmony export */   Character: () => (/* binding */ Character),\n/* harmony export */   Dictionary: () => (/* binding */ Dictionary),\n/* harmony export */   Enum: () => (/* binding */ Enum),\n/* harmony export */   Event: () => (/* binding */ Event),\n/* harmony export */   Fix64: () => (/* binding */ Fix64),\n/* harmony export */   Identity: () => (/* binding */ Identity),\n/* harmony export */   InclusiveRange: () => (/* binding */ InclusiveRange),\n/* harmony export */   Int: () => (/* binding */ Int),\n/* harmony export */   Int128: () => (/* binding */ Int128),\n/* harmony export */   Int16: () => (/* binding */ Int16),\n/* harmony export */   Int256: () => (/* binding */ Int256),\n/* harmony export */   Int32: () => (/* binding */ Int32),\n/* harmony export */   Int64: () => (/* binding */ Int64),\n/* harmony export */   Int8: () => (/* binding */ Int8),\n/* harmony export */   Optional: () => (/* binding */ Optional),\n/* harmony export */   Path: () => (/* binding */ Path),\n/* harmony export */   Reference: () => (/* binding */ Reference),\n/* harmony export */   Resource: () => (/* binding */ Resource),\n/* harmony export */   String: () => (/* binding */ String),\n/* harmony export */   Struct: () => (/* binding */ Struct),\n/* harmony export */   UFix64: () => (/* binding */ UFix64),\n/* harmony export */   UInt: () => (/* binding */ UInt),\n/* harmony export */   UInt128: () => (/* binding */ UInt128),\n/* harmony export */   UInt16: () => (/* binding */ UInt16),\n/* harmony export */   UInt256: () => (/* binding */ UInt256),\n/* harmony export */   UInt32: () => (/* binding */ UInt32),\n/* harmony export */   UInt64: () => (/* binding */ UInt64),\n/* harmony export */   UInt8: () => (/* binding */ UInt8),\n/* harmony export */   Void: () => (/* binding */ Void),\n/* harmony export */   Word128: () => (/* binding */ Word128),\n/* harmony export */   Word16: () => (/* binding */ Word16),\n/* harmony export */   Word256: () => (/* binding */ Word256),\n/* harmony export */   Word32: () => (/* binding */ Word32),\n/* harmony export */   Word64: () => (/* binding */ Word64),\n/* harmony export */   Word8: () => (/* binding */ Word8),\n/* harmony export */   _Array: () => (/* binding */ _Array)\n/* harmony export */ });\n/* harmony import */ var _onflow_util_logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @onflow/util-logger */ \"(ssr)/../node_modules/@onflow/util-logger/dist/util-logger.module.js\");\n\n\n/**\n * @deprecated Reference values cannot be imported into the Cadence interpreter, will be removed in future versions\n */\n\n/**\n * Creates a type descriptor for a given type\n * @param label - The label for the type\n * @param asArgument - A function that converts the type to a JsonCdcType\n * @param asInjection - A function which returns the argument as is\n * @returns A type descriptor\n * @internal\n */\nconst typedef = (label, asArgument, asInjection) => ({\n  label,\n  asArgument,\n  asInjection: x => {\n    _onflow_util_logger__WEBPACK_IMPORTED_MODULE_0__.log.deprecate({\n      pkg: \"@onflow/types\",\n      subject: `Passing in ${label} as value for ${label}`,\n      message: `Going forward, use ${label} as value for ${label}.`\n    });\n    return asInjection(x);\n  }\n});\nconst isArray = d => Array.isArray(d);\nconst isObj = d => typeof d === \"object\";\nconst isNull = d => d == null;\nconst isBoolean = d => typeof d === \"boolean\";\nconst isNumber = d => typeof d === \"number\";\nconst isInteger = d => Number.isInteger(d);\nconst isString = d => typeof d === \"string\";\nconst throwTypeError = msg => {\n  throw new Error(\"Type Error: \" + msg);\n};\nconst numberValuesDeprecationNotice = type => {\n  _onflow_util_logger__WEBPACK_IMPORTED_MODULE_0__.log.deprecate({\n    pkg: \"@onflow/types\",\n    subject: `Passing in Number as value for ${type}`,\n    message: `Going forward, use String as value for ${type}.`,\n    transition: \"https://github.com/onflow/flow-js-sdk/blob/master/packages/types/WARNINGS.md#0002-[U]Int*-and-Word*-as-Number\"\n  });\n};\nlet identityDeprecationShown = false;\n/**\n * @deprecated will be removed in v2.0.0\n */\nconst Identity = {\n  label: \"Identity\",\n  asArgument: v => {\n    if (!identityDeprecationShown) {\n      _onflow_util_logger__WEBPACK_IMPORTED_MODULE_0__.log.deprecate({\n        pkg: \"@onflow/types\",\n        subject: \"Identity\",\n        message: \"Identity type is deprecated and will be removed in v2.0.0.  Please remove it from your code.\"\n      });\n      identityDeprecationShown = true;\n    }\n    return v;\n  },\n  asInjection: v => v\n};\nconst UInt = typedef(\"UInt\", v => {\n  if (isNumber(v) && isInteger(v)) {\n    numberValuesDeprecationNotice(\"UInt\");\n    return {\n      type: \"UInt\",\n      value: v.toString()\n    };\n  }\n  if (isString(v)) {\n    return {\n      type: \"UInt\",\n      value: v\n    };\n  }\n  return throwTypeError(\"Expected Positive Integer for type Unsigned Int\");\n}, v => v);\nconst Int = typedef(\"Int\", v => {\n  if (isNumber(v) && isInteger(v)) {\n    numberValuesDeprecationNotice(\"Int\");\n    return {\n      type: \"Int\",\n      value: v.toString()\n    };\n  }\n  if (isString(v)) {\n    return {\n      type: \"Int\",\n      value: v\n    };\n  }\n  return throwTypeError(\"Expected Integer for type Int\");\n}, v => v);\nconst UInt8 = typedef(\"UInt8\", v => {\n  if (isNumber(v) && isInteger(v)) {\n    numberValuesDeprecationNotice(\"UInt8\");\n    return {\n      type: \"UInt8\",\n      value: v.toString()\n    };\n  }\n  if (isString(v)) {\n    return {\n      type: \"UInt8\",\n      value: v\n    };\n  }\n  return throwTypeError(\"Expected integer for UInt8\");\n}, v => v);\nconst Int8 = typedef(\"Int8\", v => {\n  if (isNumber(v) && isInteger(v)) {\n    numberValuesDeprecationNotice(\"Int8\");\n    return {\n      type: \"Int8\",\n      value: v.toString()\n    };\n  }\n  if (isString(v)) {\n    return {\n      type: \"Int8\",\n      value: v\n    };\n  }\n  return throwTypeError(\"Expected positive integer for Int8\");\n}, v => v);\nconst UInt16 = typedef(\"UInt16\", v => {\n  if (isNumber(v) && isInteger(v)) {\n    numberValuesDeprecationNotice(\"UInt16\");\n    return {\n      type: \"UInt16\",\n      value: v.toString()\n    };\n  }\n  if (isString(v)) {\n    return {\n      type: \"UInt16\",\n      value: v\n    };\n  }\n  return throwTypeError(\"Expected integer for UInt16\");\n}, v => v);\nconst Int16 = typedef(\"Int16\", v => {\n  if (isNumber(v) && isInteger(v)) {\n    numberValuesDeprecationNotice(\"Int16\");\n    return {\n      type: \"Int16\",\n      value: v.toString()\n    };\n  }\n  if (isString(v)) {\n    return {\n      type: \"Int16\",\n      value: v\n    };\n  }\n  return throwTypeError(\"Expected positive integer for Int16\");\n}, v => v);\nconst UInt32 = typedef(\"UInt32\", v => {\n  if (isNumber(v) && isInteger(v)) {\n    numberValuesDeprecationNotice(\"UInt32\");\n    return {\n      type: \"UInt32\",\n      value: v.toString()\n    };\n  }\n  if (isString(v)) {\n    return {\n      type: \"UInt32\",\n      value: v\n    };\n  }\n  return throwTypeError(\"Expected integer for UInt32\");\n}, v => v);\nconst Int32 = typedef(\"Int32\", v => {\n  if (isNumber(v) && isInteger(v)) {\n    numberValuesDeprecationNotice(\"Int32\");\n    return {\n      type: \"Int32\",\n      value: v.toString()\n    };\n  }\n  if (isString(v)) {\n    return {\n      type: \"Int32\",\n      value: v\n    };\n  }\n  return throwTypeError(\"Expected positive integer for Int32\");\n}, v => v);\nconst UInt64 = typedef(\"UInt64\", v => {\n  if (isNumber(v) && isInteger(v)) {\n    numberValuesDeprecationNotice(\"UInt64\");\n    return {\n      type: \"UInt64\",\n      value: v.toString()\n    };\n  }\n  if (isString(v)) {\n    return {\n      type: \"UInt64\",\n      value: v\n    };\n  }\n  return throwTypeError(\"Expected integer for UInt64\");\n}, v => v);\nconst Int64 = typedef(\"Int64\", v => {\n  if (isNumber(v) && isInteger(v)) {\n    numberValuesDeprecationNotice(\"Int64\");\n    return {\n      type: \"Int64\",\n      value: v.toString()\n    };\n  }\n  if (isString(v)) {\n    return {\n      type: \"Int64\",\n      value: v\n    };\n  }\n  return throwTypeError(\"Expected positive integer for Int64\");\n}, v => v);\nconst UInt128 = typedef(\"UInt128\", v => {\n  if (isNumber(v) && isInteger(v)) {\n    numberValuesDeprecationNotice(\"UInt128\");\n    return {\n      type: \"UInt128\",\n      value: v.toString()\n    };\n  }\n  if (isString(v)) {\n    return {\n      type: \"UInt128\",\n      value: v\n    };\n  }\n  return throwTypeError(\"Expected integer for UInt128\");\n}, v => v);\nconst Int128 = typedef(\"Int128\", v => {\n  if (isNumber(v) && isInteger(v)) {\n    numberValuesDeprecationNotice(\"Int128\");\n    return {\n      type: \"Int128\",\n      value: v.toString()\n    };\n  }\n  if (isString(v)) {\n    return {\n      type: \"Int128\",\n      value: v\n    };\n  }\n  return throwTypeError(\"Expected positive integer for Int128\");\n}, v => v);\nconst UInt256 = typedef(\"UInt256\", v => {\n  if (isNumber(v) && isInteger(v)) {\n    numberValuesDeprecationNotice(\"UInt256\");\n    return {\n      type: \"UInt256\",\n      value: v.toString()\n    };\n  }\n  if (isString(v)) {\n    return {\n      type: \"UInt256\",\n      value: v\n    };\n  }\n  return throwTypeError(\"Expected integer for UInt256\");\n}, v => v);\nconst Int256 = typedef(\"Int256\", v => {\n  if (isNumber(v) && isInteger(v)) {\n    numberValuesDeprecationNotice(\"Int256\");\n    return {\n      type: \"Int256\",\n      value: v.toString()\n    };\n  }\n  if (isString(v)) {\n    return {\n      type: \"Int256\",\n      value: v\n    };\n  }\n  return throwTypeError(\"Expected integer for Int256\");\n}, v => v);\nconst Word8 = typedef(\"Word8\", v => {\n  if (isNumber(v) && isInteger(v)) {\n    numberValuesDeprecationNotice(\"Word8\");\n    return {\n      type: \"Word8\",\n      value: v.toString()\n    };\n  }\n  if (isString(v)) {\n    return {\n      type: \"Word8\",\n      value: v\n    };\n  }\n  return throwTypeError(\"Expected positive number for Word8\");\n}, v => v);\nconst Word16 = typedef(\"Word16\", v => {\n  if (isNumber(v) && isInteger(v)) {\n    numberValuesDeprecationNotice(\"Word16\");\n    return {\n      type: \"Word16\",\n      value: v.toString()\n    };\n  }\n  if (isString(v)) {\n    return {\n      type: \"Word16\",\n      value: v\n    };\n  }\n  return throwTypeError(\"Expected positive number for Word16\");\n}, v => v);\nconst Word32 = typedef(\"Word32\", v => {\n  if (isNumber(v) && isInteger(v)) {\n    numberValuesDeprecationNotice(\"Word32\");\n    return {\n      type: \"Word32\",\n      value: v.toString()\n    };\n  }\n  if (isString(v)) {\n    return {\n      type: \"Word32\",\n      value: v\n    };\n  }\n  return throwTypeError(\"Expected positive number for Word32\");\n}, v => v);\nconst Word64 = typedef(\"Word64\", v => {\n  if (isNumber(v) && isInteger(v)) {\n    numberValuesDeprecationNotice(\"Word64\");\n    return {\n      type: \"Word64\",\n      value: v.toString()\n    };\n  }\n  if (isString(v)) {\n    return {\n      type: \"Word64\",\n      value: v\n    };\n  }\n  return throwTypeError(\"Expected positive number for Word64\");\n}, v => v);\nconst Word128 = typedef(\"Word128\", v => {\n  if (isNumber(v) && isInteger(v)) {\n    numberValuesDeprecationNotice(\"Word128\");\n    return {\n      type: \"Word128\",\n      value: v.toString()\n    };\n  }\n  if (isString(v)) {\n    return {\n      type: \"Word128\",\n      value: v\n    };\n  }\n  return throwTypeError(\"Expected positive number for Word128\");\n}, v => v);\nconst Word256 = typedef(\"Word256\", v => {\n  if (isNumber(v) && isInteger(v)) {\n    numberValuesDeprecationNotice(\"Word256\");\n    return {\n      type: \"Word256\",\n      value: v.toString()\n    };\n  }\n  if (isString(v)) {\n    return {\n      type: \"Word256\",\n      value: v\n    };\n  }\n  return throwTypeError(\"Expected positive number for Word256\");\n}, v => v);\nconst UFix64AndFix64NumberDeprecationNotice = () => {\n  _onflow_util_logger__WEBPACK_IMPORTED_MODULE_0__.log.deprecate({\n    subject: \"Passing in Numbers as values for Fix64 and UFix64 types\",\n    pkg: \"@onflow/types\",\n    transition: \"https://github.com/onflow/flow-js-sdk/blob/master/packages/types/WARNINGS.md#0001-[U]Fix64-as-Number\"\n  });\n};\nconst UFix64 = typedef(\"UFix64\", v => {\n  if (isString(v)) {\n    const vParts = v.split(\".\");\n    if (vParts.length !== 2) {\n      return throwTypeError(`Expected one decimal but found ${vParts.length} in the [U]Fix64 value. Find out more about [U]Fix64 types here: https://docs.onflow.org/cadence/json-cadence-spec/#fixed-point-numbers`);\n    }\n    if (vParts[1].length == 0 || vParts[1].length > 8) {\n      return throwTypeError(`Expected at least one digit, and at most 8 digits following the decimal of the [U]Fix64 value but found ${vParts[1].length} digits. Find out more about [U]Fix64 types here: https://docs.onflow.org/cadence/json-cadence-spec/#fixed-point-numbers`);\n    }\n\n    // make sure the number is extended to 8 decimal places so it matches cadence encoding of UFix values\n    vParts[1] = vParts[1].padEnd(8, \"0\");\n    v = vParts.join(\".\");\n    return {\n      type: \"UFix64\",\n      value: v\n    };\n  } else if (isNumber(v)) {\n    UFix64AndFix64NumberDeprecationNotice();\n    return {\n      type: \"UFix64\",\n      value: v.toString()\n    };\n  }\n  return throwTypeError(\"Expected String for UFix64\");\n}, v => v);\nconst Fix64 = typedef(\"Fix64\", v => {\n  if (isString(v)) {\n    const vParts = v.split(\".\");\n    if (vParts.length !== 2) {\n      return throwTypeError(`Expected one decimal but found ${vParts.length} in the [U]Fix64 value. Find out more about [U]Fix64 types here: https://docs.onflow.org/cadence/json-cadence-spec/#fixed-point-numbers`);\n    }\n    if (vParts[1].length == 0 || vParts[1].length > 8) {\n      return throwTypeError(`Expected at least one digit, and at most 8 digits following the decimal of the [U]Fix64 value but found ${vParts[1].length} digits. Find out more about [U]Fix64 types here: https://docs.onflow.org/cadence/json-cadence-spec/#fixed-point-numbers`);\n    }\n\n    // make sure the number is extended to 8 decimal places so it matches cadence encoding of Fix64 values\n    vParts[1] = vParts[1].padEnd(8, \"0\");\n    v = vParts.join(\".\");\n    return {\n      type: \"Fix64\",\n      value: v\n    };\n  } else if (isNumber(v)) {\n    UFix64AndFix64NumberDeprecationNotice();\n    return {\n      type: \"Fix64\",\n      value: v.toString()\n    };\n  }\n  return throwTypeError(\"Expected String for Fix64\");\n}, v => v);\nconst String = typedef(\"String\", v => {\n  if (isString(v)) return {\n    type: \"String\",\n    value: v\n  };\n  return throwTypeError(\"Expected String for type String\");\n}, v => v);\nconst Character = typedef(\"Character\", v => {\n  if (isString(v)) return {\n    type: \"Character\",\n    value: v\n  };\n  return throwTypeError(\"Expected Character for type Character\");\n}, v => v);\nconst Bool = typedef(\"Bool\", v => {\n  if (isBoolean(v)) return {\n    type: \"Bool\",\n    value: v\n  };\n  return throwTypeError(\"Expected Boolean for type Bool\");\n}, v => v);\nconst Address = typedef(\"Address\", v => {\n  if (isString(v)) return {\n    type: \"Address\",\n    value: v\n  };\n  return throwTypeError(\"Expected Address for type Address\");\n}, v => v);\nconst Void = typedef(\"Void\", v => {\n  if (!v || isNull(v)) return {\n    type: \"Void\",\n    value: null\n  };\n  return throwTypeError(\"Expected Void for type Void\");\n}, v => v);\nconst Optional = children => typedef(\"Optional\", v => ({\n  type: \"Optional\",\n  value: isNull(v) ? null : children.asArgument(v)\n}), v => v);\n\n/**\n * @deprecated Reference values cannot be imported into the Cadence interpreter, will be removed in future versions\n */\nconst Reference = typedef(\"Reference\", v => {\n  if (isObj(v)) return {\n    type: \"Reference\",\n    value: v\n  };\n  return throwTypeError(\"Expected Object for type Reference\");\n}, v => v);\nconst _Array = function () {\n  let children = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  return typedef(\"Array\", v => {\n    return {\n      type: \"Array\",\n      value: isArray(children) ? children.map((c, i) => c.asArgument(v[i])) : v.map(x => children.asArgument(x))\n    };\n  }, v => v);\n};\nconst Dictionary = function () {\n  let children = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  return typedef(\"Dictionary\", v => {\n    const vIsArray = isArray(v);\n    const childrenIsArray = isArray(children);\n    if (isObj(v)) return {\n      type: \"Dictionary\",\n      value: childrenIsArray && vIsArray ? children.map((c, i) => ({\n        key: c.key.asArgument(v[i].key),\n        value: c.value.asArgument(v[i].value)\n      })) : vIsArray && !childrenIsArray ? v.map(x => ({\n        key: children.key.asArgument(x.key),\n        value: children.value.asArgument(x.value)\n      })) : !vIsArray && !childrenIsArray ? [{\n        key: children.key.asArgument(v.key),\n        value: children.value.asArgument(v.value)\n      }] : throwTypeError(\"Invalid arguments for Dictionary.\")\n    };\n    return throwTypeError(\"Expected Object for type Dictionary\");\n  }, v => v);\n};\nconst Event = function (id) {\n  let fields = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  return typedef(\"Event\", v => {\n    if (isObj(v)) return {\n      type: \"Event\",\n      value: {\n        id: id,\n        fields: isArray(fields) ? fields.map((c, i) => ({\n          name: v.fields[i].name,\n          value: c.value.asArgument(v.fields[i].value)\n        })) : v.fields.map(x => ({\n          name: x.name,\n          value: fields.value.asArgument(x.value)\n        }))\n      }\n    };\n    return throwTypeError(\"Expected Object for type Event\");\n  }, v => v);\n};\nconst Resource = function (id) {\n  let fields = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  return typedef(\"Resource\", v => {\n    if (isObj(v)) return {\n      type: \"Resource\",\n      value: {\n        id: id,\n        fields: isArray(fields) ? fields.map((c, i) => ({\n          name: v.fields[i].name,\n          value: c.value.asArgument(v.fields[i].value)\n        })) : v.fields.map(x => ({\n          name: x.name,\n          value: fields.value.asArgument(x.value)\n        }))\n      }\n    };\n    return throwTypeError(\"Expected Object for type Resource\");\n  }, v => v);\n};\nconst Struct = function (id) {\n  let fields = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  return typedef(\"Struct\", v => {\n    if (isObj(v)) return {\n      type: \"Struct\",\n      value: {\n        id: id,\n        fields: isArray(fields) ? fields.map((c, i) => ({\n          name: v.fields[i].name,\n          value: c.value.asArgument(v.fields[i].value)\n        })) : v.fields.map(x => ({\n          name: x.name,\n          value: fields.value.asArgument(x.value)\n        }))\n      }\n    };\n    return throwTypeError(\"Expected Object for type Struct\");\n  }, v => v);\n};\nconst Enum = function (id) {\n  let fields = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  return typedef(\"Enum\", v => {\n    if (isObj(v)) return {\n      type: \"Enum\",\n      value: {\n        id: id,\n        fields: isArray(fields) ? fields.map((c, i) => ({\n          name: v.fields[i].name,\n          value: c.value.asArgument(v.fields[i].value)\n        })) : v.fields.map(x => ({\n          name: x.name,\n          value: fields.value.asArgument(x.value)\n        }))\n      }\n    };\n    return throwTypeError(\"Expected Object for type Enum\");\n  }, v => v);\n};\nconst Path = typedef(\"Path\", v => {\n  if (isObj(v)) {\n    if (!isString(v.domain)) {\n      return throwTypeError(`Expected a string for the Path domain but found ${v.domain}. Find out more about the Path type here: https://docs.onflow.org/cadence/json-cadence-spec/#path`);\n    }\n    if (!(v.domain === \"storage\" || v.domain === \"private\" || v.domain === \"public\")) {\n      return throwTypeError(`Expected either \"storage\", \"private\" or \"public\" as the Path domain but found ${v.domain}. Find out more about the Path type here: https://docs.onflow.org/cadence/json-cadence-spec/#path`);\n    }\n    if (!isString(v.identifier)) {\n      return throwTypeError(`Expected a string for the Path identifier but found ${v.identifier}. Find out more about the Path type here: https://docs.onflow.org/cadence/json-cadence-spec/#path`);\n    }\n    return {\n      type: \"Path\",\n      value: {\n        domain: v.domain,\n        identifier: v.identifier\n      }\n    };\n  }\n  return throwTypeError(\"Expected Object for type Path\");\n}, v => v);\n\n/**\n * InclusiveRange type\n *\n * @param t - A TypeDescriptor for the type of the range, must be a number (UInt32, Int32, etc.)\n * @returns A TypeDescriptor for an InclusiveRange of the given type\n *\n * @example\n * ```javascript\n * import * as fcl from \"@onflow/fcl\"\n * import {InclusiveRange, UInt32} from \"@onflow/types\"\n *\n * const someArg = fcl.arg({start: 1, end: 5, step: 1}, InclusiveRange(UInt32))\n * ```\n */\nconst InclusiveRange = t => typedef(\"InclusiveRange\", v => {\n  if (isObj(v)) {\n    const {\n      start,\n      end,\n      step\n    } = v;\n    return {\n      type: \"InclusiveRange\",\n      value: {\n        start: t.asArgument(start),\n        end: t.asArgument(end),\n        step: t.asArgument(step)\n      }\n    };\n  }\n  return throwTypeError(\"Expected Object for type InclusiveRange\");\n}, v => v);\n\n\n//# sourceMappingURL=types.module.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/@onflow/types/dist/types.module.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/@onflow/util-actor/dist/actor.module.js":
/*!***************************************************************!*\
  !*** ../node_modules/@onflow/util-actor/dist/actor.module.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   EXIT: () => (/* binding */ EXIT),\n/* harmony export */   INIT: () => (/* binding */ INIT),\n/* harmony export */   SNAPSHOT: () => (/* binding */ SNAPSHOT),\n/* harmony export */   SUBSCRIBE: () => (/* binding */ SUBSCRIBE),\n/* harmony export */   TERMINATE: () => (/* binding */ TERMINATE),\n/* harmony export */   UNSUBSCRIBE: () => (/* binding */ UNSUBSCRIBE),\n/* harmony export */   UPDATED: () => (/* binding */ UPDATED),\n/* harmony export */   kill: () => (/* binding */ kill),\n/* harmony export */   send: () => (/* binding */ send),\n/* harmony export */   snapshoter: () => (/* binding */ snapshoter),\n/* harmony export */   spawn: () => (/* binding */ spawn),\n/* harmony export */   subscriber: () => (/* binding */ subscriber)\n/* harmony export */ });\nconst mailbox = () => {\n  const queue = [];\n  let next;\n  return {\n    async deliver(msg) {\n      queue.push(msg);\n      if (next) {\n        next(queue.shift());\n        next = undefined;\n      }\n    },\n    receive() {\n      return new Promise(function innerReceive(resolve) {\n        const msg = queue.shift();\n        if (msg) return resolve(msg);\n        next = resolve;\n      });\n    }\n  };\n};\n\nlet promise;\nconst _queueMicrotask = cb => (promise || (promise = Promise.resolve())).then(cb).catch(err => setTimeout(() => {\n  throw err;\n}, 0));\nconst INIT = \"INIT\";\nconst SUBSCRIBE = \"SUBSCRIBE\";\nconst UNSUBSCRIBE = \"UNSUBSCRIBE\";\nconst UPDATED = \"UPDATED\";\nconst SNAPSHOT = \"SNAPSHOT\";\nconst EXIT = \"EXIT\";\nconst TERMINATE = \"TERMINATE\";\nconst root = typeof self === \"object\" && self.self === self && self || typeof global === \"object\" && global.global === global && global || typeof window === \"object\" && window.window === window && window || {\n  FCL_REGISTRY: null\n};\nroot.FCL_REGISTRY = root.FCL_REGISTRY == null ? {} : root.FCL_REGISTRY;\nconst FCL_REGISTRY = root.FCL_REGISTRY;\nlet pid = 0b0;\nconst DEFAULT_TIMEOUT = 5000;\nfunction send(addr, tag, data) {\n  let opts = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {\n    expectReply: false\n  };\n  return new Promise((resolve, reject) => {\n    const expectReply = opts.expectReply || false;\n    const timeout = opts.timeout != null ? opts.timeout : DEFAULT_TIMEOUT;\n    if (expectReply && timeout) {\n      setTimeout(() => reject(new Error(`Timeout: ${timeout}ms passed without a response.`)), timeout);\n    }\n    const payload = {\n      to: addr,\n      from: opts.from,\n      tag,\n      data,\n      timeout,\n      reply: resolve,\n      reject\n    };\n    try {\n      if (FCL_REGISTRY[addr]) {\n        FCL_REGISTRY[addr].mailbox.deliver(payload);\n      }\n      if (!expectReply) {\n        resolve(true);\n      }\n    } catch (error) {\n      console.error(\"FCL.Actor -- Could Not Deliver Message\", payload, FCL_REGISTRY[addr], error);\n      reject(error);\n    }\n  });\n}\nconst kill = addr => {\n  delete FCL_REGISTRY[addr];\n};\nconst fromHandlers = handlers => async ctx => {\n  if (typeof handlers[INIT] === \"function\") await handlers[INIT](ctx);\n  __loop: while (1) {\n    const letter = await ctx.receive();\n    try {\n      if (letter.tag === EXIT) {\n        if (typeof handlers[TERMINATE] === \"function\") {\n          await handlers[TERMINATE](ctx, letter, letter.data || {});\n        }\n        break __loop;\n      }\n      await handlers[letter.tag]?.(ctx, letter, letter.data || {});\n    } catch (error) {\n      console.error(`${ctx.self()} Error`, letter, error);\n    } finally {\n      continue __loop;\n    }\n  }\n};\nconst parseAddr = addr => {\n  if (addr == null) {\n    while (FCL_REGISTRY[String(pid)]) {\n      pid++;\n    }\n    return String(pid);\n  }\n  return String(addr);\n};\nconst spawn = function (fnOrHandlers) {\n  let rawAddr = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  const addr = parseAddr(rawAddr);\n  if (FCL_REGISTRY[addr] != null) return addr;\n  FCL_REGISTRY[addr] = {\n    addr,\n    mailbox: mailbox(),\n    subs: new Set(),\n    kvs: {},\n    error: null\n  };\n  const ctx = createCtx(addr);\n  let fn;\n  if (typeof fnOrHandlers === \"object\") fn = fromHandlers(fnOrHandlers);else fn = fnOrHandlers;\n  _queueMicrotask(async () => {\n    await fn(ctx);\n    kill(addr);\n  });\n  return addr;\n};\nconst createCtx = addr => ({\n  self: () => addr,\n  receive: () => FCL_REGISTRY[addr].mailbox.receive(),\n  send: function (to, tag, data) {\n    let opts = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    if (to == null) return;\n    opts.from = addr;\n    return send(to, tag, data, opts);\n  },\n  sendSelf: function (tag, data) {\n    let opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    if (FCL_REGISTRY[addr]) send(addr, tag, data, opts);\n  },\n  broadcast: function (tag, data) {\n    let opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    opts.from = addr;\n    for (const to of FCL_REGISTRY[addr].subs) send(to, tag, data, opts);\n  },\n  subscribe: sub => sub != null && FCL_REGISTRY[addr].subs.add(sub),\n  unsubscribe: sub => sub != null && FCL_REGISTRY[addr].subs.delete(sub),\n  subscriberCount: () => FCL_REGISTRY[addr].subs.size,\n  hasSubs: () => !!FCL_REGISTRY[addr].subs.size,\n  put: (key, value) => {\n    if (key != null) FCL_REGISTRY[addr].kvs[key] = value;\n  },\n  get: function (key) {\n    let fallback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;\n    const value = FCL_REGISTRY[addr].kvs[key];\n    return value == null ? fallback : value;\n  },\n  delete: key => {\n    delete FCL_REGISTRY[addr].kvs[key];\n  },\n  update: (key, fn) => {\n    if (key != null) FCL_REGISTRY[addr].kvs[key] = fn(FCL_REGISTRY[addr].kvs[key]);\n  },\n  keys: () => {\n    return Object.keys(FCL_REGISTRY[addr].kvs);\n  },\n  all: () => {\n    return FCL_REGISTRY[addr].kvs;\n  },\n  where: pattern => {\n    return Object.keys(FCL_REGISTRY[addr].kvs).reduce((acc, key) => {\n      return pattern.test(key) ? {\n        ...acc,\n        [key]: FCL_REGISTRY[addr].kvs[key]\n      } : acc;\n    }, {});\n  },\n  merge: function () {\n    let data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    Object.keys(data).forEach(key => FCL_REGISTRY[addr].kvs[key] = data[key]);\n  },\n  fatalError: error => {\n    FCL_REGISTRY[addr].error = error;\n    for (const to of FCL_REGISTRY[addr].subs) send(to, UPDATED);\n  }\n});\n\n// Returns an unsubscribe function\n// A SUBSCRIBE handler will need to be created to handle the subscription event\n//\n//  [SUBSCRIBE]: (ctx, letter) => {\n//    ctx.subscribe(letter.from)\n//    ctx.send(letter.from, UPDATED, ctx.all())\n//  }\n//\nfunction subscriber(address, spawnFn, callback) {\n  spawnFn(address);\n  const self = spawn(async ctx => {\n    ctx.send(address, SUBSCRIBE);\n    while (1) {\n      const letter = await ctx.receive();\n      const error = FCL_REGISTRY[address].error;\n      if (letter.tag === EXIT) {\n        ctx.send(address, UNSUBSCRIBE);\n        return;\n      }\n      if (error) {\n        callback(null, error);\n        ctx.send(address, UNSUBSCRIBE);\n        return;\n      }\n      callback(letter.data, null);\n    }\n  });\n  return () => send(self, EXIT);\n}\n\n// Returns a promise that returns a result\n// A SNAPSHOT handler will need to be created to handle the snapshot event\n//\n//  [SNAPSHOT]: (ctx, letter) => {\n//    letter.reply(ctx.all())\n//  }\n//\nfunction snapshoter(address, spawnFn) {\n  spawnFn(address);\n  return send(address, SNAPSHOT, null, {\n    expectReply: true,\n    timeout: 0\n  });\n}\n\n\n//# sourceMappingURL=actor.module.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/@onflow/util-actor/dist/actor.module.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/@onflow/util-address/dist/util-address.module.js":
/*!************************************************************************!*\
  !*** ../node_modules/@onflow/util-address/dist/util-address.module.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   display: () => (/* binding */ display),\n/* harmony export */   sansPrefix: () => (/* binding */ sansPrefix),\n/* harmony export */   withPrefix: () => (/* binding */ withPrefix)\n/* harmony export */ });\n/**\n * @description Removes 0x from address if present\n * @param address - Flow address\n * @returns Flow address without 0x prefix\n */\nfunction sansPrefix(address) {\n  if (address == null) return null;\n  return address.replace(/^0x/, \"\").replace(/^Fx/, \"\");\n}\n/**\n * @description Adds 0x to address if not already present\n * @param address - Flow address\n * @returns Flow address with 0x prefix\n */\nfunction withPrefix(address) {\n  if (address == null) return null;\n  return \"0x\" + sansPrefix(address);\n}\n\n/**\n * @description Adds 0x to address if not already present\n * @param address - Flow address\n * @returns Flow address with 0x prefix\n */\nfunction display(address) {\n  return withPrefix(address);\n}\n\n\n//# sourceMappingURL=util-address.module.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzL0BvbmZsb3cvdXRpbC1hZGRyZXNzL2Rpc3QvdXRpbC1hZGRyZXNzLm1vZHVsZS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFMkM7QUFDM0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mbG93Zml0LWZyb250ZW5kLy4uL25vZGVfbW9kdWxlcy9Ab25mbG93L3V0aWwtYWRkcmVzcy9kaXN0L3V0aWwtYWRkcmVzcy5tb2R1bGUuanM/ZDAwYyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBkZXNjcmlwdGlvbiBSZW1vdmVzIDB4IGZyb20gYWRkcmVzcyBpZiBwcmVzZW50XG4gKiBAcGFyYW0gYWRkcmVzcyAtIEZsb3cgYWRkcmVzc1xuICogQHJldHVybnMgRmxvdyBhZGRyZXNzIHdpdGhvdXQgMHggcHJlZml4XG4gKi9cbmZ1bmN0aW9uIHNhbnNQcmVmaXgoYWRkcmVzcykge1xuICBpZiAoYWRkcmVzcyA9PSBudWxsKSByZXR1cm4gbnVsbDtcbiAgcmV0dXJuIGFkZHJlc3MucmVwbGFjZSgvXjB4LywgXCJcIikucmVwbGFjZSgvXkZ4LywgXCJcIik7XG59XG4vKipcbiAqIEBkZXNjcmlwdGlvbiBBZGRzIDB4IHRvIGFkZHJlc3MgaWYgbm90IGFscmVhZHkgcHJlc2VudFxuICogQHBhcmFtIGFkZHJlc3MgLSBGbG93IGFkZHJlc3NcbiAqIEByZXR1cm5zIEZsb3cgYWRkcmVzcyB3aXRoIDB4IHByZWZpeFxuICovXG5mdW5jdGlvbiB3aXRoUHJlZml4KGFkZHJlc3MpIHtcbiAgaWYgKGFkZHJlc3MgPT0gbnVsbCkgcmV0dXJuIG51bGw7XG4gIHJldHVybiBcIjB4XCIgKyBzYW5zUHJlZml4KGFkZHJlc3MpO1xufVxuXG4vKipcbiAqIEBkZXNjcmlwdGlvbiBBZGRzIDB4IHRvIGFkZHJlc3MgaWYgbm90IGFscmVhZHkgcHJlc2VudFxuICogQHBhcmFtIGFkZHJlc3MgLSBGbG93IGFkZHJlc3NcbiAqIEByZXR1cm5zIEZsb3cgYWRkcmVzcyB3aXRoIDB4IHByZWZpeFxuICovXG5mdW5jdGlvbiBkaXNwbGF5KGFkZHJlc3MpIHtcbiAgcmV0dXJuIHdpdGhQcmVmaXgoYWRkcmVzcyk7XG59XG5cbmV4cG9ydCB7IGRpc3BsYXksIHNhbnNQcmVmaXgsIHdpdGhQcmVmaXggfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXV0aWwtYWRkcmVzcy5tb2R1bGUuanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/@onflow/util-address/dist/util-address.module.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/@onflow/util-invariant/dist/util-invariant.module.js":
/*!****************************************************************************!*\
  !*** ../node_modules/@onflow/util-invariant/dist/util-invariant.module.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   invariant: () => (/* binding */ invariant)\n/* harmony export */ });\n/**\n * Asserts fact is true, otherwise throw an error with invariant message\n * @param fact\n * @param msg\n * @param rest\n */\nfunction invariant(fact, msg) {\n  if (!fact) {\n    const error = new Error(`INVARIANT ${msg}`);\n    error.stack = error.stack?.split(\"\\n\")?.filter(d => !/at invariant/.test(d))?.join(\"\\n\");\n    for (var _len = arguments.length, rest = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n      rest[_key - 2] = arguments[_key];\n    }\n    console.error(\"\\n\\n---\\n\\n\", error, \"\\n\\n\", ...rest, \"\\n\\n---\\n\\n\");\n    throw error;\n  }\n}\n\n\n//# sourceMappingURL=util-invariant.module.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzL0BvbmZsb3cvdXRpbC1pbnZhcmlhbnQvZGlzdC91dGlsLWludmFyaWFudC5tb2R1bGUuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5Q0FBeUMsSUFBSTtBQUM3QztBQUNBLDJGQUEyRixhQUFhO0FBQ3hHO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFcUI7QUFDckIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mbG93Zml0LWZyb250ZW5kLy4uL25vZGVfbW9kdWxlcy9Ab25mbG93L3V0aWwtaW52YXJpYW50L2Rpc3QvdXRpbC1pbnZhcmlhbnQubW9kdWxlLmpzP2NmMzIiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBBc3NlcnRzIGZhY3QgaXMgdHJ1ZSwgb3RoZXJ3aXNlIHRocm93IGFuIGVycm9yIHdpdGggaW52YXJpYW50IG1lc3NhZ2VcbiAqIEBwYXJhbSBmYWN0XG4gKiBAcGFyYW0gbXNnXG4gKiBAcGFyYW0gcmVzdFxuICovXG5mdW5jdGlvbiBpbnZhcmlhbnQoZmFjdCwgbXNnKSB7XG4gIGlmICghZmFjdCkge1xuICAgIGNvbnN0IGVycm9yID0gbmV3IEVycm9yKGBJTlZBUklBTlQgJHttc2d9YCk7XG4gICAgZXJyb3Iuc3RhY2sgPSBlcnJvci5zdGFjaz8uc3BsaXQoXCJcXG5cIik/LmZpbHRlcihkID0+ICEvYXQgaW52YXJpYW50Ly50ZXN0KGQpKT8uam9pbihcIlxcblwiKTtcbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgcmVzdCA9IG5ldyBBcnJheShfbGVuID4gMiA/IF9sZW4gLSAyIDogMCksIF9rZXkgPSAyOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICByZXN0W19rZXkgLSAyXSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG4gICAgY29uc29sZS5lcnJvcihcIlxcblxcbi0tLVxcblxcblwiLCBlcnJvciwgXCJcXG5cXG5cIiwgLi4ucmVzdCwgXCJcXG5cXG4tLS1cXG5cXG5cIik7XG4gICAgdGhyb3cgZXJyb3I7XG4gIH1cbn1cblxuZXhwb3J0IHsgaW52YXJpYW50IH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD11dGlsLWludmFyaWFudC5tb2R1bGUuanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/@onflow/util-invariant/dist/util-invariant.module.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/@onflow/util-logger/dist/util-logger.module.js":
/*!**********************************************************************!*\
  !*** ../node_modules/@onflow/util-logger/dist/util-logger.module.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   LEVELS: () => (/* binding */ LEVELS),\n/* harmony export */   log: () => (/* binding */ log),\n/* harmony export */   setConfig: () => (/* binding */ setConfig)\n/* harmony export */ });\n// Config dependency injected into logger to break circular dependency\nlet config = null;\nconst setConfig = _config => {\n  config = _config;\n};\n\n/**\n * The levels of the logger\n */\nlet LEVELS = /*#__PURE__*/function (LEVELS) {\n  LEVELS[LEVELS[\"debug\"] = 5] = \"debug\";\n  LEVELS[LEVELS[\"info\"] = 4] = \"info\";\n  LEVELS[LEVELS[\"log\"] = 3] = \"log\";\n  LEVELS[LEVELS[\"warn\"] = 2] = \"warn\";\n  LEVELS[LEVELS[\"error\"] = 1] = \"error\";\n  return LEVELS;\n}({});\n\n/**\n * Builds a message formatted for the logger\n * @param options - The options for the log\n * @param options.title - The title of the log\n * @param options.message - The message of the log\n * @returns The message formatted for the logger\n * @example\n * buildLoggerMessageArgs({ title: \"My Title\", message: \"My Message\" })\n */\nconst buildLoggerMessageArgs = options => {\n  const {\n    title,\n    message\n  } = options;\n  return [`\n    %c${title}\n    ============================\n\n    ${message}\n\n    ============================\n    `.replace(/\\n[^\\S\\r\\n]+/g, \"\\n\").trim(), \"font-weight:bold;font-family:monospace;\"];\n};\n\n/**\n * Logs messages based on the level of the message and the level set in the config\n * @param options - The options for the log\n * @param options.title - The title of the log\n * @param options.message - The message of the log\n * @param options.level - The level of the log\n * @param options.always - Whether to always show the log\n * @example\n * log({ title: \"My Title\", message: \"My Message\", level: LEVELS.warn, always: false })\n */\nconst log = async options => {\n  const {\n    title,\n    message,\n    level,\n    always\n  } = options;\n  const configLoggerLevel = (await config?.()?.get(\"logger.level\")) ?? LEVELS.warn;\n\n  // If config level is below message level then don't show it\n  if (!always && configLoggerLevel < level) return;\n  const loggerMessageArgs = buildLoggerMessageArgs({\n    title,\n    message\n  });\n  switch (level) {\n    case LEVELS.debug:\n      console.debug(...loggerMessageArgs);\n      break;\n    case LEVELS.info:\n      console.info(...loggerMessageArgs);\n      break;\n    case LEVELS.warn:\n      console.warn(...loggerMessageArgs);\n      break;\n    case LEVELS.error:\n      console.error(...loggerMessageArgs);\n      break;\n    default:\n      console.log(...loggerMessageArgs);\n  }\n};\n\n/**\n * Logs a deprecation notice.  If a callback is provided this function returns a function that will call the callback and log the deprecation notice, otherwise it just logs the deprecation notice.\n * @param options - The options for the log\n * @param options.pkg - The package that is being deprecated\n * @param options.subject - The subject of the deprecation\n * @param options.transition - The transition path for the deprecation\n * @param options.level - The level of the log\n * @param options.message - The message of the log\n * @param options.callback - A callback to run after the log\n * @returns A function that will call the callback and log the deprecation notice if the callback is provided\n * @example\n * // Logs a deprecation notice\n * log.deprecate({ pkg: \"@onflow/fcl\", subject: \"Some item\", transition: \"https://github.com/onflow/flow-js-sdk\", message: \"Descriptive message\", level: LEVELS.warn, callback: () => {} })\n * @example\n * function someFunction() { ... }\n * const deprecatedFunction = log.deprecate({ pkg: \"@onflow/fcl\", subject: \"Some item\", transition: \"https://github.com/foo/bar/TRANSITIONS.md\", message: \"Descriptive message\", level: LEVELS.warn, callback: someFunction })\n * deprecatedFunction() // Calls someFunction and logs the deprecation notice\n */\nlog.deprecate = options => {\n  const {\n    pkg,\n    subject,\n    transition,\n    level = LEVELS.warn,\n    message = \"\",\n    callback = null\n  } = options;\n  const capitalizeFirstLetter = str => {\n    return str.charAt(0).toUpperCase() + str.slice(1);\n  };\n  const logMessage = () => log({\n    title: `${pkg ? pkg + \" \" : \"\"}Deprecation Notice`,\n    message: `\n      ${subject ? `${capitalizeFirstLetter(subject)} is deprecated and will cease to work in future releases${pkg ? \" of \" + pkg : \"\"}.` : \"\"}${message ? \"\\n\" + message : \"\"}${transition ? `\\nYou can learn more (including a guide on common transition paths) here: ${transition}` : \"\"}\n    `.trim(),\n    level\n  });\n  if (typeof callback === \"function\") {\n    return async function () {\n      await logMessage();\n      return await callback(...arguments);\n    };\n  }\n  return logMessage();\n};\n\n\n//# sourceMappingURL=util-logger.module.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzL0BvbmZsb3cvdXRpbC1sb2dnZXIvZGlzdC91dGlsLWxvZ2dlci5tb2R1bGUuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsR0FBRzs7QUFFSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRCQUE0QiwwQ0FBMEM7QUFDdEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBLFFBQVE7QUFDUjs7QUFFQSxNQUFNOztBQUVOO0FBQ0EsK0RBQStELHNCQUFzQjtBQUNyRjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUyw2RUFBNkU7QUFDdEY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQix1S0FBdUs7QUFDMUw7QUFDQSw2QkFBNkI7QUFDN0IsOENBQThDLCtLQUErSztBQUM3TjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWMscUJBQXFCO0FBQ25DO0FBQ0EsUUFBUSxhQUFhLGdDQUFnQyx5REFBeUQsd0JBQXdCLFFBQVEsRUFBRSw4QkFBOEIsRUFBRSwwRkFBMEYsV0FBVztBQUNyUjtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRWtDO0FBQ2xDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZmxvd2ZpdC1mcm9udGVuZC8uLi9ub2RlX21vZHVsZXMvQG9uZmxvdy91dGlsLWxvZ2dlci9kaXN0L3V0aWwtbG9nZ2VyLm1vZHVsZS5qcz8xODhhIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvbmZpZyBkZXBlbmRlbmN5IGluamVjdGVkIGludG8gbG9nZ2VyIHRvIGJyZWFrIGNpcmN1bGFyIGRlcGVuZGVuY3lcbmxldCBjb25maWcgPSBudWxsO1xuY29uc3Qgc2V0Q29uZmlnID0gX2NvbmZpZyA9PiB7XG4gIGNvbmZpZyA9IF9jb25maWc7XG59O1xuXG4vKipcbiAqIFRoZSBsZXZlbHMgb2YgdGhlIGxvZ2dlclxuICovXG5sZXQgTEVWRUxTID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChMRVZFTFMpIHtcbiAgTEVWRUxTW0xFVkVMU1tcImRlYnVnXCJdID0gNV0gPSBcImRlYnVnXCI7XG4gIExFVkVMU1tMRVZFTFNbXCJpbmZvXCJdID0gNF0gPSBcImluZm9cIjtcbiAgTEVWRUxTW0xFVkVMU1tcImxvZ1wiXSA9IDNdID0gXCJsb2dcIjtcbiAgTEVWRUxTW0xFVkVMU1tcIndhcm5cIl0gPSAyXSA9IFwid2FyblwiO1xuICBMRVZFTFNbTEVWRUxTW1wiZXJyb3JcIl0gPSAxXSA9IFwiZXJyb3JcIjtcbiAgcmV0dXJuIExFVkVMUztcbn0oe30pO1xuXG4vKipcbiAqIEJ1aWxkcyBhIG1lc3NhZ2UgZm9ybWF0dGVkIGZvciB0aGUgbG9nZ2VyXG4gKiBAcGFyYW0gb3B0aW9ucyAtIFRoZSBvcHRpb25zIGZvciB0aGUgbG9nXG4gKiBAcGFyYW0gb3B0aW9ucy50aXRsZSAtIFRoZSB0aXRsZSBvZiB0aGUgbG9nXG4gKiBAcGFyYW0gb3B0aW9ucy5tZXNzYWdlIC0gVGhlIG1lc3NhZ2Ugb2YgdGhlIGxvZ1xuICogQHJldHVybnMgVGhlIG1lc3NhZ2UgZm9ybWF0dGVkIGZvciB0aGUgbG9nZ2VyXG4gKiBAZXhhbXBsZVxuICogYnVpbGRMb2dnZXJNZXNzYWdlQXJncyh7IHRpdGxlOiBcIk15IFRpdGxlXCIsIG1lc3NhZ2U6IFwiTXkgTWVzc2FnZVwiIH0pXG4gKi9cbmNvbnN0IGJ1aWxkTG9nZ2VyTWVzc2FnZUFyZ3MgPSBvcHRpb25zID0+IHtcbiAgY29uc3Qge1xuICAgIHRpdGxlLFxuICAgIG1lc3NhZ2VcbiAgfSA9IG9wdGlvbnM7XG4gIHJldHVybiBbYFxuICAgICVjJHt0aXRsZX1cbiAgICA9PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cbiAgICAke21lc3NhZ2V9XG5cbiAgICA9PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gICAgYC5yZXBsYWNlKC9cXG5bXlxcU1xcclxcbl0rL2csIFwiXFxuXCIpLnRyaW0oKSwgXCJmb250LXdlaWdodDpib2xkO2ZvbnQtZmFtaWx5Om1vbm9zcGFjZTtcIl07XG59O1xuXG4vKipcbiAqIExvZ3MgbWVzc2FnZXMgYmFzZWQgb24gdGhlIGxldmVsIG9mIHRoZSBtZXNzYWdlIGFuZCB0aGUgbGV2ZWwgc2V0IGluIHRoZSBjb25maWdcbiAqIEBwYXJhbSBvcHRpb25zIC0gVGhlIG9wdGlvbnMgZm9yIHRoZSBsb2dcbiAqIEBwYXJhbSBvcHRpb25zLnRpdGxlIC0gVGhlIHRpdGxlIG9mIHRoZSBsb2dcbiAqIEBwYXJhbSBvcHRpb25zLm1lc3NhZ2UgLSBUaGUgbWVzc2FnZSBvZiB0aGUgbG9nXG4gKiBAcGFyYW0gb3B0aW9ucy5sZXZlbCAtIFRoZSBsZXZlbCBvZiB0aGUgbG9nXG4gKiBAcGFyYW0gb3B0aW9ucy5hbHdheXMgLSBXaGV0aGVyIHRvIGFsd2F5cyBzaG93IHRoZSBsb2dcbiAqIEBleGFtcGxlXG4gKiBsb2coeyB0aXRsZTogXCJNeSBUaXRsZVwiLCBtZXNzYWdlOiBcIk15IE1lc3NhZ2VcIiwgbGV2ZWw6IExFVkVMUy53YXJuLCBhbHdheXM6IGZhbHNlIH0pXG4gKi9cbmNvbnN0IGxvZyA9IGFzeW5jIG9wdGlvbnMgPT4ge1xuICBjb25zdCB7XG4gICAgdGl0bGUsXG4gICAgbWVzc2FnZSxcbiAgICBsZXZlbCxcbiAgICBhbHdheXNcbiAgfSA9IG9wdGlvbnM7XG4gIGNvbnN0IGNvbmZpZ0xvZ2dlckxldmVsID0gKGF3YWl0IGNvbmZpZz8uKCk/LmdldChcImxvZ2dlci5sZXZlbFwiKSkgPz8gTEVWRUxTLndhcm47XG5cbiAgLy8gSWYgY29uZmlnIGxldmVsIGlzIGJlbG93IG1lc3NhZ2UgbGV2ZWwgdGhlbiBkb24ndCBzaG93IGl0XG4gIGlmICghYWx3YXlzICYmIGNvbmZpZ0xvZ2dlckxldmVsIDwgbGV2ZWwpIHJldHVybjtcbiAgY29uc3QgbG9nZ2VyTWVzc2FnZUFyZ3MgPSBidWlsZExvZ2dlck1lc3NhZ2VBcmdzKHtcbiAgICB0aXRsZSxcbiAgICBtZXNzYWdlXG4gIH0pO1xuICBzd2l0Y2ggKGxldmVsKSB7XG4gICAgY2FzZSBMRVZFTFMuZGVidWc6XG4gICAgICBjb25zb2xlLmRlYnVnKC4uLmxvZ2dlck1lc3NhZ2VBcmdzKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgTEVWRUxTLmluZm86XG4gICAgICBjb25zb2xlLmluZm8oLi4ubG9nZ2VyTWVzc2FnZUFyZ3MpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBMRVZFTFMud2FybjpcbiAgICAgIGNvbnNvbGUud2FybiguLi5sb2dnZXJNZXNzYWdlQXJncyk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIExFVkVMUy5lcnJvcjpcbiAgICAgIGNvbnNvbGUuZXJyb3IoLi4ubG9nZ2VyTWVzc2FnZUFyZ3MpO1xuICAgICAgYnJlYWs7XG4gICAgZGVmYXVsdDpcbiAgICAgIGNvbnNvbGUubG9nKC4uLmxvZ2dlck1lc3NhZ2VBcmdzKTtcbiAgfVxufTtcblxuLyoqXG4gKiBMb2dzIGEgZGVwcmVjYXRpb24gbm90aWNlLiAgSWYgYSBjYWxsYmFjayBpcyBwcm92aWRlZCB0aGlzIGZ1bmN0aW9uIHJldHVybnMgYSBmdW5jdGlvbiB0aGF0IHdpbGwgY2FsbCB0aGUgY2FsbGJhY2sgYW5kIGxvZyB0aGUgZGVwcmVjYXRpb24gbm90aWNlLCBvdGhlcndpc2UgaXQganVzdCBsb2dzIHRoZSBkZXByZWNhdGlvbiBub3RpY2UuXG4gKiBAcGFyYW0gb3B0aW9ucyAtIFRoZSBvcHRpb25zIGZvciB0aGUgbG9nXG4gKiBAcGFyYW0gb3B0aW9ucy5wa2cgLSBUaGUgcGFja2FnZSB0aGF0IGlzIGJlaW5nIGRlcHJlY2F0ZWRcbiAqIEBwYXJhbSBvcHRpb25zLnN1YmplY3QgLSBUaGUgc3ViamVjdCBvZiB0aGUgZGVwcmVjYXRpb25cbiAqIEBwYXJhbSBvcHRpb25zLnRyYW5zaXRpb24gLSBUaGUgdHJhbnNpdGlvbiBwYXRoIGZvciB0aGUgZGVwcmVjYXRpb25cbiAqIEBwYXJhbSBvcHRpb25zLmxldmVsIC0gVGhlIGxldmVsIG9mIHRoZSBsb2dcbiAqIEBwYXJhbSBvcHRpb25zLm1lc3NhZ2UgLSBUaGUgbWVzc2FnZSBvZiB0aGUgbG9nXG4gKiBAcGFyYW0gb3B0aW9ucy5jYWxsYmFjayAtIEEgY2FsbGJhY2sgdG8gcnVuIGFmdGVyIHRoZSBsb2dcbiAqIEByZXR1cm5zIEEgZnVuY3Rpb24gdGhhdCB3aWxsIGNhbGwgdGhlIGNhbGxiYWNrIGFuZCBsb2cgdGhlIGRlcHJlY2F0aW9uIG5vdGljZSBpZiB0aGUgY2FsbGJhY2sgaXMgcHJvdmlkZWRcbiAqIEBleGFtcGxlXG4gKiAvLyBMb2dzIGEgZGVwcmVjYXRpb24gbm90aWNlXG4gKiBsb2cuZGVwcmVjYXRlKHsgcGtnOiBcIkBvbmZsb3cvZmNsXCIsIHN1YmplY3Q6IFwiU29tZSBpdGVtXCIsIHRyYW5zaXRpb246IFwiaHR0cHM6Ly9naXRodWIuY29tL29uZmxvdy9mbG93LWpzLXNka1wiLCBtZXNzYWdlOiBcIkRlc2NyaXB0aXZlIG1lc3NhZ2VcIiwgbGV2ZWw6IExFVkVMUy53YXJuLCBjYWxsYmFjazogKCkgPT4ge30gfSlcbiAqIEBleGFtcGxlXG4gKiBmdW5jdGlvbiBzb21lRnVuY3Rpb24oKSB7IC4uLiB9XG4gKiBjb25zdCBkZXByZWNhdGVkRnVuY3Rpb24gPSBsb2cuZGVwcmVjYXRlKHsgcGtnOiBcIkBvbmZsb3cvZmNsXCIsIHN1YmplY3Q6IFwiU29tZSBpdGVtXCIsIHRyYW5zaXRpb246IFwiaHR0cHM6Ly9naXRodWIuY29tL2Zvby9iYXIvVFJBTlNJVElPTlMubWRcIiwgbWVzc2FnZTogXCJEZXNjcmlwdGl2ZSBtZXNzYWdlXCIsIGxldmVsOiBMRVZFTFMud2FybiwgY2FsbGJhY2s6IHNvbWVGdW5jdGlvbiB9KVxuICogZGVwcmVjYXRlZEZ1bmN0aW9uKCkgLy8gQ2FsbHMgc29tZUZ1bmN0aW9uIGFuZCBsb2dzIHRoZSBkZXByZWNhdGlvbiBub3RpY2VcbiAqL1xubG9nLmRlcHJlY2F0ZSA9IG9wdGlvbnMgPT4ge1xuICBjb25zdCB7XG4gICAgcGtnLFxuICAgIHN1YmplY3QsXG4gICAgdHJhbnNpdGlvbixcbiAgICBsZXZlbCA9IExFVkVMUy53YXJuLFxuICAgIG1lc3NhZ2UgPSBcIlwiLFxuICAgIGNhbGxiYWNrID0gbnVsbFxuICB9ID0gb3B0aW9ucztcbiAgY29uc3QgY2FwaXRhbGl6ZUZpcnN0TGV0dGVyID0gc3RyID0+IHtcbiAgICByZXR1cm4gc3RyLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgc3RyLnNsaWNlKDEpO1xuICB9O1xuICBjb25zdCBsb2dNZXNzYWdlID0gKCkgPT4gbG9nKHtcbiAgICB0aXRsZTogYCR7cGtnID8gcGtnICsgXCIgXCIgOiBcIlwifURlcHJlY2F0aW9uIE5vdGljZWAsXG4gICAgbWVzc2FnZTogYFxuICAgICAgJHtzdWJqZWN0ID8gYCR7Y2FwaXRhbGl6ZUZpcnN0TGV0dGVyKHN1YmplY3QpfSBpcyBkZXByZWNhdGVkIGFuZCB3aWxsIGNlYXNlIHRvIHdvcmsgaW4gZnV0dXJlIHJlbGVhc2VzJHtwa2cgPyBcIiBvZiBcIiArIHBrZyA6IFwiXCJ9LmAgOiBcIlwifSR7bWVzc2FnZSA/IFwiXFxuXCIgKyBtZXNzYWdlIDogXCJcIn0ke3RyYW5zaXRpb24gPyBgXFxuWW91IGNhbiBsZWFybiBtb3JlIChpbmNsdWRpbmcgYSBndWlkZSBvbiBjb21tb24gdHJhbnNpdGlvbiBwYXRocykgaGVyZTogJHt0cmFuc2l0aW9ufWAgOiBcIlwifVxuICAgIGAudHJpbSgpLFxuICAgIGxldmVsXG4gIH0pO1xuICBpZiAodHlwZW9mIGNhbGxiYWNrID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICByZXR1cm4gYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgICAgYXdhaXQgbG9nTWVzc2FnZSgpO1xuICAgICAgcmV0dXJuIGF3YWl0IGNhbGxiYWNrKC4uLmFyZ3VtZW50cyk7XG4gICAgfTtcbiAgfVxuICByZXR1cm4gbG9nTWVzc2FnZSgpO1xufTtcblxuZXhwb3J0IHsgTEVWRUxTLCBsb2csIHNldENvbmZpZyB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dXRpbC1sb2dnZXIubW9kdWxlLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/@onflow/util-logger/dist/util-logger.module.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/@onflow/util-rpc/dist/index.module.js":
/*!*************************************************************!*\
  !*** ../node_modules/@onflow/util-rpc/dist/index.module.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   RpcClient: () => (/* binding */ RpcClient),\n/* harmony export */   RpcError: () => (/* binding */ RpcError),\n/* harmony export */   RpcErrorCode: () => (/* binding */ RpcErrorCode)\n/* harmony export */ });\nlet RpcErrorCode = /*#__PURE__*/function (RpcErrorCode) {\n  RpcErrorCode[RpcErrorCode[\"INVALID_REQUEST\"] = -32600] = \"INVALID_REQUEST\";\n  RpcErrorCode[RpcErrorCode[\"METHOD_NOT_FOUND\"] = -32601] = \"METHOD_NOT_FOUND\";\n  RpcErrorCode[RpcErrorCode[\"INVALID_PARAMS\"] = -32602] = \"INVALID_PARAMS\";\n  RpcErrorCode[RpcErrorCode[\"INTERNAL_ERROR\"] = -32603] = \"INTERNAL_ERROR\";\n  RpcErrorCode[RpcErrorCode[\"PARSE_ERROR\"] = -32700] = \"PARSE_ERROR\";\n  return RpcErrorCode;\n}({});\nclass RpcError extends Error {\n  constructor(code, message, data) {\n    super(message);\n    this.code = code;\n    this.message = message;\n    this.data = data;\n  }\n}\n\nvar ReservedRpcMethods = /*#__PURE__*/function (ReservedRpcMethods) {\n  ReservedRpcMethods[\"HELLO\"] = \"rpc_hello\";\n  return ReservedRpcMethods;\n}(ReservedRpcMethods || {});\nclass RpcClient {\n  id = 0;\n  setSend = () => {};\n  _send = (() => new Promise(resolve => {\n    this.setSend = resolve;\n  }))();\n  peerInfo = (() => new Promise((resolve, reject) => {\n    this.resolvePeerInfo = resolve;\n    this.rejectPeerInfo = reject;\n  }))();\n  enabledNotifications = [];\n  requestHandlers = (() => ({}))();\n  subscriptions = (() => ({}))();\n  messageListeners = [];\n  constructor(_ref) {\n    let {\n      notifications\n    } = _ref;\n    this.enabledNotifications = notifications || [];\n    this.on(ReservedRpcMethods.HELLO, info => {\n      this.resolvePeerInfo(info);\n      return this.ownInfo();\n    });\n  }\n  connect(_ref2) {\n    let {\n      send\n    } = _ref2;\n    this.setSend(send);\n    this.requestWithoutConnection(ReservedRpcMethods.HELLO, this.ownInfo()).then(info => {\n      this.resolvePeerInfo(info);\n    }).catch(this.rejectPeerInfo);\n  }\n  ownInfo() {\n    return {\n      requests: Object.keys(this.requestHandlers),\n      notifications: this.enabledNotifications\n    };\n  }\n  async send(msg) {\n    return (await this._send)(msg);\n  }\n  receive(msg) {\n    if (msg?.jsonrpc !== \"2.0\") {\n      return;\n    }\n    if (\"method\" in msg) {\n      if (\"id\" in msg) {\n        this.handleRequest(msg);\n      } else {\n        this.handleNotification(msg);\n      }\n    }\n    this.messageListeners.forEach(listener => listener(msg));\n  }\n  async handleRequest(msg) {\n    const handler = this.requestHandlers[msg.method];\n    if (handler) {\n      try {\n        const result = await handler(msg.params);\n        this.send({\n          jsonrpc: \"2.0\",\n          id: msg.id,\n          result\n        });\n      } catch (error) {\n        if (error instanceof RpcError) {\n          this.send({\n            jsonrpc: \"2.0\",\n            id: msg.id,\n            error: {\n              code: error.code,\n              message: error.message,\n              data: error.data\n            }\n          });\n        } else {\n          this.send({\n            jsonrpc: \"2.0\",\n            id: msg.id,\n            error: {\n              code: RpcErrorCode.INTERNAL_ERROR,\n              message: error?.message\n            }\n          });\n        }\n      }\n    } else {\n      this.send({\n        jsonrpc: \"2.0\",\n        id: msg.id,\n        error: {\n          code: RpcErrorCode.METHOD_NOT_FOUND,\n          message: `Method not found: ${msg.method}`\n        }\n      });\n    }\n  }\n  handleNotification(msg) {\n    if (this.subscriptions[msg.method]) {\n      this.subscriptions[msg.method].forEach(handler => handler(msg.params));\n    }\n  }\n  onMessage(listener) {\n    this.messageListeners.push(listener);\n    return () => {\n      this.messageListeners = this.messageListeners.filter(l => l !== listener);\n    };\n  }\n  async notify(method, params) {\n    await this.onceConnected();\n    this.send({\n      jsonrpc: \"2.0\",\n      method,\n      params\n    });\n  }\n  async request(method, params) {\n    await this.onceConnected();\n    return this.requestWithoutConnection(method, params);\n  }\n  async requestWithoutConnection(method, params) {\n    const id = this.id++;\n    let unsub = () => {};\n    const result = new Promise((resolve, reject) => {\n      unsub = this.onMessage(msg => {\n        if (msg.id === id && (\"result\" in msg || \"error\" in msg)) {\n          if (msg.error) {\n            const rpcError = new RpcError(msg.error.code, msg.error.message, msg.error.data);\n            reject(rpcError);\n          }\n          resolve(msg.result);\n        }\n      });\n    }).finally(unsub);\n    this.send({\n      jsonrpc: \"2.0\",\n      method,\n      params,\n      id\n    });\n    return result;\n  }\n  on(method, handler) {\n    this.requestHandlers[method] = handler;\n  }\n  subscribe(method, handler) {\n    this.subscriptions[method] = this.subscriptions[method] || new Set();\n    this.subscriptions[method].add(handler);\n  }\n  unsubscribe(method, handler) {\n    this.subscriptions[method]?.delete(handler);\n  }\n  async onceConnected() {\n    return this.peerInfo.then(() => {});\n  }\n  async getAvailableRequests() {\n    return this.peerInfo.then(info => info.requests);\n  }\n  async getAvailableNotifications() {\n    return this.peerInfo.then(info => info.notifications);\n  }\n}\n\n\n//# sourceMappingURL=index.module.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzL0BvbmZsb3cvdXRpbC1ycGMvZGlzdC9pbmRleC5tb2R1bGUuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEdBQUc7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLENBQUMseUJBQXlCO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsOEJBQThCO0FBQzlCLDRCQUE0QjtBQUM1QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNULFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1gsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdDQUF3QyxXQUFXO0FBQ25EO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1AsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQ0FBc0M7QUFDdEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFNkM7QUFDN0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mbG93Zml0LWZyb250ZW5kLy4uL25vZGVfbW9kdWxlcy9Ab25mbG93L3V0aWwtcnBjL2Rpc3QvaW5kZXgubW9kdWxlLmpzPzc1MjYiXSwic291cmNlc0NvbnRlbnQiOlsibGV0IFJwY0Vycm9yQ29kZSA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoUnBjRXJyb3JDb2RlKSB7XG4gIFJwY0Vycm9yQ29kZVtScGNFcnJvckNvZGVbXCJJTlZBTElEX1JFUVVFU1RcIl0gPSAtMzI2MDBdID0gXCJJTlZBTElEX1JFUVVFU1RcIjtcbiAgUnBjRXJyb3JDb2RlW1JwY0Vycm9yQ29kZVtcIk1FVEhPRF9OT1RfRk9VTkRcIl0gPSAtMzI2MDFdID0gXCJNRVRIT0RfTk9UX0ZPVU5EXCI7XG4gIFJwY0Vycm9yQ29kZVtScGNFcnJvckNvZGVbXCJJTlZBTElEX1BBUkFNU1wiXSA9IC0zMjYwMl0gPSBcIklOVkFMSURfUEFSQU1TXCI7XG4gIFJwY0Vycm9yQ29kZVtScGNFcnJvckNvZGVbXCJJTlRFUk5BTF9FUlJPUlwiXSA9IC0zMjYwM10gPSBcIklOVEVSTkFMX0VSUk9SXCI7XG4gIFJwY0Vycm9yQ29kZVtScGNFcnJvckNvZGVbXCJQQVJTRV9FUlJPUlwiXSA9IC0zMjcwMF0gPSBcIlBBUlNFX0VSUk9SXCI7XG4gIHJldHVybiBScGNFcnJvckNvZGU7XG59KHt9KTtcbmNsYXNzIFJwY0Vycm9yIGV4dGVuZHMgRXJyb3Ige1xuICBjb25zdHJ1Y3Rvcihjb2RlLCBtZXNzYWdlLCBkYXRhKSB7XG4gICAgc3VwZXIobWVzc2FnZSk7XG4gICAgdGhpcy5jb2RlID0gY29kZTtcbiAgICB0aGlzLm1lc3NhZ2UgPSBtZXNzYWdlO1xuICAgIHRoaXMuZGF0YSA9IGRhdGE7XG4gIH1cbn1cblxudmFyIFJlc2VydmVkUnBjTWV0aG9kcyA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoUmVzZXJ2ZWRScGNNZXRob2RzKSB7XG4gIFJlc2VydmVkUnBjTWV0aG9kc1tcIkhFTExPXCJdID0gXCJycGNfaGVsbG9cIjtcbiAgcmV0dXJuIFJlc2VydmVkUnBjTWV0aG9kcztcbn0oUmVzZXJ2ZWRScGNNZXRob2RzIHx8IHt9KTtcbmNsYXNzIFJwY0NsaWVudCB7XG4gIGlkID0gMDtcbiAgc2V0U2VuZCA9ICgpID0+IHt9O1xuICBfc2VuZCA9ICgoKSA9PiBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHtcbiAgICB0aGlzLnNldFNlbmQgPSByZXNvbHZlO1xuICB9KSkoKTtcbiAgcGVlckluZm8gPSAoKCkgPT4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgIHRoaXMucmVzb2x2ZVBlZXJJbmZvID0gcmVzb2x2ZTtcbiAgICB0aGlzLnJlamVjdFBlZXJJbmZvID0gcmVqZWN0O1xuICB9KSkoKTtcbiAgZW5hYmxlZE5vdGlmaWNhdGlvbnMgPSBbXTtcbiAgcmVxdWVzdEhhbmRsZXJzID0gKCgpID0+ICh7fSkpKCk7XG4gIHN1YnNjcmlwdGlvbnMgPSAoKCkgPT4gKHt9KSkoKTtcbiAgbWVzc2FnZUxpc3RlbmVycyA9IFtdO1xuICBjb25zdHJ1Y3RvcihfcmVmKSB7XG4gICAgbGV0IHtcbiAgICAgIG5vdGlmaWNhdGlvbnNcbiAgICB9ID0gX3JlZjtcbiAgICB0aGlzLmVuYWJsZWROb3RpZmljYXRpb25zID0gbm90aWZpY2F0aW9ucyB8fCBbXTtcbiAgICB0aGlzLm9uKFJlc2VydmVkUnBjTWV0aG9kcy5IRUxMTywgaW5mbyA9PiB7XG4gICAgICB0aGlzLnJlc29sdmVQZWVySW5mbyhpbmZvKTtcbiAgICAgIHJldHVybiB0aGlzLm93bkluZm8oKTtcbiAgICB9KTtcbiAgfVxuICBjb25uZWN0KF9yZWYyKSB7XG4gICAgbGV0IHtcbiAgICAgIHNlbmRcbiAgICB9ID0gX3JlZjI7XG4gICAgdGhpcy5zZXRTZW5kKHNlbmQpO1xuICAgIHRoaXMucmVxdWVzdFdpdGhvdXRDb25uZWN0aW9uKFJlc2VydmVkUnBjTWV0aG9kcy5IRUxMTywgdGhpcy5vd25JbmZvKCkpLnRoZW4oaW5mbyA9PiB7XG4gICAgICB0aGlzLnJlc29sdmVQZWVySW5mbyhpbmZvKTtcbiAgICB9KS5jYXRjaCh0aGlzLnJlamVjdFBlZXJJbmZvKTtcbiAgfVxuICBvd25JbmZvKCkge1xuICAgIHJldHVybiB7XG4gICAgICByZXF1ZXN0czogT2JqZWN0LmtleXModGhpcy5yZXF1ZXN0SGFuZGxlcnMpLFxuICAgICAgbm90aWZpY2F0aW9uczogdGhpcy5lbmFibGVkTm90aWZpY2F0aW9uc1xuICAgIH07XG4gIH1cbiAgYXN5bmMgc2VuZChtc2cpIHtcbiAgICByZXR1cm4gKGF3YWl0IHRoaXMuX3NlbmQpKG1zZyk7XG4gIH1cbiAgcmVjZWl2ZShtc2cpIHtcbiAgICBpZiAobXNnPy5qc29ucnBjICE9PSBcIjIuMFwiKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChcIm1ldGhvZFwiIGluIG1zZykge1xuICAgICAgaWYgKFwiaWRcIiBpbiBtc2cpIHtcbiAgICAgICAgdGhpcy5oYW5kbGVSZXF1ZXN0KG1zZyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmhhbmRsZU5vdGlmaWNhdGlvbihtc2cpO1xuICAgICAgfVxuICAgIH1cbiAgICB0aGlzLm1lc3NhZ2VMaXN0ZW5lcnMuZm9yRWFjaChsaXN0ZW5lciA9PiBsaXN0ZW5lcihtc2cpKTtcbiAgfVxuICBhc3luYyBoYW5kbGVSZXF1ZXN0KG1zZykge1xuICAgIGNvbnN0IGhhbmRsZXIgPSB0aGlzLnJlcXVlc3RIYW5kbGVyc1ttc2cubWV0aG9kXTtcbiAgICBpZiAoaGFuZGxlcikge1xuICAgICAgdHJ5IHtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgaGFuZGxlcihtc2cucGFyYW1zKTtcbiAgICAgICAgdGhpcy5zZW5kKHtcbiAgICAgICAgICBqc29ucnBjOiBcIjIuMFwiLFxuICAgICAgICAgIGlkOiBtc2cuaWQsXG4gICAgICAgICAgcmVzdWx0XG4gICAgICAgIH0pO1xuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgaWYgKGVycm9yIGluc3RhbmNlb2YgUnBjRXJyb3IpIHtcbiAgICAgICAgICB0aGlzLnNlbmQoe1xuICAgICAgICAgICAganNvbnJwYzogXCIyLjBcIixcbiAgICAgICAgICAgIGlkOiBtc2cuaWQsXG4gICAgICAgICAgICBlcnJvcjoge1xuICAgICAgICAgICAgICBjb2RlOiBlcnJvci5jb2RlLFxuICAgICAgICAgICAgICBtZXNzYWdlOiBlcnJvci5tZXNzYWdlLFxuICAgICAgICAgICAgICBkYXRhOiBlcnJvci5kYXRhXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5zZW5kKHtcbiAgICAgICAgICAgIGpzb25ycGM6IFwiMi4wXCIsXG4gICAgICAgICAgICBpZDogbXNnLmlkLFxuICAgICAgICAgICAgZXJyb3I6IHtcbiAgICAgICAgICAgICAgY29kZTogUnBjRXJyb3JDb2RlLklOVEVSTkFMX0VSUk9SLFxuICAgICAgICAgICAgICBtZXNzYWdlOiBlcnJvcj8ubWVzc2FnZVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuc2VuZCh7XG4gICAgICAgIGpzb25ycGM6IFwiMi4wXCIsXG4gICAgICAgIGlkOiBtc2cuaWQsXG4gICAgICAgIGVycm9yOiB7XG4gICAgICAgICAgY29kZTogUnBjRXJyb3JDb2RlLk1FVEhPRF9OT1RfRk9VTkQsXG4gICAgICAgICAgbWVzc2FnZTogYE1ldGhvZCBub3QgZm91bmQ6ICR7bXNnLm1ldGhvZH1gXG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuICBoYW5kbGVOb3RpZmljYXRpb24obXNnKSB7XG4gICAgaWYgKHRoaXMuc3Vic2NyaXB0aW9uc1ttc2cubWV0aG9kXSkge1xuICAgICAgdGhpcy5zdWJzY3JpcHRpb25zW21zZy5tZXRob2RdLmZvckVhY2goaGFuZGxlciA9PiBoYW5kbGVyKG1zZy5wYXJhbXMpKTtcbiAgICB9XG4gIH1cbiAgb25NZXNzYWdlKGxpc3RlbmVyKSB7XG4gICAgdGhpcy5tZXNzYWdlTGlzdGVuZXJzLnB1c2gobGlzdGVuZXIpO1xuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICB0aGlzLm1lc3NhZ2VMaXN0ZW5lcnMgPSB0aGlzLm1lc3NhZ2VMaXN0ZW5lcnMuZmlsdGVyKGwgPT4gbCAhPT0gbGlzdGVuZXIpO1xuICAgIH07XG4gIH1cbiAgYXN5bmMgbm90aWZ5KG1ldGhvZCwgcGFyYW1zKSB7XG4gICAgYXdhaXQgdGhpcy5vbmNlQ29ubmVjdGVkKCk7XG4gICAgdGhpcy5zZW5kKHtcbiAgICAgIGpzb25ycGM6IFwiMi4wXCIsXG4gICAgICBtZXRob2QsXG4gICAgICBwYXJhbXNcbiAgICB9KTtcbiAgfVxuICBhc3luYyByZXF1ZXN0KG1ldGhvZCwgcGFyYW1zKSB7XG4gICAgYXdhaXQgdGhpcy5vbmNlQ29ubmVjdGVkKCk7XG4gICAgcmV0dXJuIHRoaXMucmVxdWVzdFdpdGhvdXRDb25uZWN0aW9uKG1ldGhvZCwgcGFyYW1zKTtcbiAgfVxuICBhc3luYyByZXF1ZXN0V2l0aG91dENvbm5lY3Rpb24obWV0aG9kLCBwYXJhbXMpIHtcbiAgICBjb25zdCBpZCA9IHRoaXMuaWQrKztcbiAgICBsZXQgdW5zdWIgPSAoKSA9PiB7fTtcbiAgICBjb25zdCByZXN1bHQgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICB1bnN1YiA9IHRoaXMub25NZXNzYWdlKG1zZyA9PiB7XG4gICAgICAgIGlmIChtc2cuaWQgPT09IGlkICYmIChcInJlc3VsdFwiIGluIG1zZyB8fCBcImVycm9yXCIgaW4gbXNnKSkge1xuICAgICAgICAgIGlmIChtc2cuZXJyb3IpIHtcbiAgICAgICAgICAgIGNvbnN0IHJwY0Vycm9yID0gbmV3IFJwY0Vycm9yKG1zZy5lcnJvci5jb2RlLCBtc2cuZXJyb3IubWVzc2FnZSwgbXNnLmVycm9yLmRhdGEpO1xuICAgICAgICAgICAgcmVqZWN0KHJwY0Vycm9yKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmVzb2x2ZShtc2cucmVzdWx0KTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSkuZmluYWxseSh1bnN1Yik7XG4gICAgdGhpcy5zZW5kKHtcbiAgICAgIGpzb25ycGM6IFwiMi4wXCIsXG4gICAgICBtZXRob2QsXG4gICAgICBwYXJhbXMsXG4gICAgICBpZFxuICAgIH0pO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbiAgb24obWV0aG9kLCBoYW5kbGVyKSB7XG4gICAgdGhpcy5yZXF1ZXN0SGFuZGxlcnNbbWV0aG9kXSA9IGhhbmRsZXI7XG4gIH1cbiAgc3Vic2NyaWJlKG1ldGhvZCwgaGFuZGxlcikge1xuICAgIHRoaXMuc3Vic2NyaXB0aW9uc1ttZXRob2RdID0gdGhpcy5zdWJzY3JpcHRpb25zW21ldGhvZF0gfHwgbmV3IFNldCgpO1xuICAgIHRoaXMuc3Vic2NyaXB0aW9uc1ttZXRob2RdLmFkZChoYW5kbGVyKTtcbiAgfVxuICB1bnN1YnNjcmliZShtZXRob2QsIGhhbmRsZXIpIHtcbiAgICB0aGlzLnN1YnNjcmlwdGlvbnNbbWV0aG9kXT8uZGVsZXRlKGhhbmRsZXIpO1xuICB9XG4gIGFzeW5jIG9uY2VDb25uZWN0ZWQoKSB7XG4gICAgcmV0dXJuIHRoaXMucGVlckluZm8udGhlbigoKSA9PiB7fSk7XG4gIH1cbiAgYXN5bmMgZ2V0QXZhaWxhYmxlUmVxdWVzdHMoKSB7XG4gICAgcmV0dXJuIHRoaXMucGVlckluZm8udGhlbihpbmZvID0+IGluZm8ucmVxdWVzdHMpO1xuICB9XG4gIGFzeW5jIGdldEF2YWlsYWJsZU5vdGlmaWNhdGlvbnMoKSB7XG4gICAgcmV0dXJuIHRoaXMucGVlckluZm8udGhlbihpbmZvID0+IGluZm8ubm90aWZpY2F0aW9ucyk7XG4gIH1cbn1cblxuZXhwb3J0IHsgUnBjQ2xpZW50LCBScGNFcnJvciwgUnBjRXJyb3JDb2RlIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5tb2R1bGUuanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/@onflow/util-rpc/dist/index.module.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/@onflow/util-semver/dist/index.module.js":
/*!****************************************************************!*\
  !*** ../node_modules/@onflow/util-semver/dist/index.module.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   compare: () => (/* binding */ compare)\n/* harmony export */ });\n/*\ncompareIdentifiers was taken from semver package, which is licensed under ISC\n\nGitHub: https://github.com/npm/node-semver/\nNPM: https://www.npmjs.com/package/semver\nLicense: https://github.com/npm/node-semver/blob/main/LICENSE\n\nThe ISC License\n\nCopyright (c) Isaac Z. Schlueter and Contributors\n\nPermission to use, copy, modify, and/or distribute this software for any\npurpose with or without fee is hereby granted, provided that the above\ncopyright notice and this permission notice appear in all copies.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\nWITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\nMERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\nANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\nWHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\nACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR\nIN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n*/\n\nvar numeric = /^[0-9]+$/;\nvar compareIdentifiers = function compareIdentifiers(a, b) {\n  var anum = numeric.test(a);\n  var bnum = numeric.test(b);\n  if (anum && bnum) {\n    a = +a;\n    b = +b;\n  }\n  return a === b ? 0 : anum && !bnum ? -1 : bnum && !anum ? 1 : a < b ? -1 : 1;\n};\n\n// Official Semver Regex https://semver.org/#is-there-a-suggested-regular-expression-regex-to-check-a-semver-string\nvar VERSION_REGEX = /^(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\\+([0-9a-zA-Z-]+(?:\\.[0-9a-zA-Z-]+)*))?$/;\n\n/**\n * Compares two semver versions\n * @param {string} a - The first version to compare\n * @param {string} b - The second version to compare\n * @returns {number} - Returns 1 if a is greater than b, -1 if a is less than b, and 0 if they are equal\n */\nvar compare = function compare(a, b) {\n  if (typeof a !== \"string\" || typeof b !== \"string\") throw new Error(\"Invalid input\");\n  var vsnA = a.match(VERSION_REGEX);\n  var vsnB = b.match(VERSION_REGEX);\n  if (!vsnA || !vsnB) throw new Error(\"Invalid input\");\n  for (var i = 1; i <= 3; i++) {\n    // If either is greater than the other, return\n    if (parseInt(vsnA[i]) > parseInt(vsnB[i])) return 1;\n    if (parseInt(vsnA[i]) < parseInt(vsnB[i])) return -1;\n  }\n\n  // If equal, compare prerelease\n  if (vsnA[4] && vsnB[4]) {\n    var prereleaseA = (vsnA[4] || \"\").split(\".\");\n    var prereleaseB = (vsnB[4] || \"\").split(\".\");\n    for (var _i = 0; _i < Math.max(prereleaseA.length, prereleaseB.length); _i++) {\n      // If one identifier has more fields than the other & the rest is equal, the one with more fields is greater\n      if (prereleaseA[_i] === undefined) return -1;\n      if (prereleaseB[_i] === undefined) return 1;\n\n      // Compare field identifiers\n      var cmp = compareIdentifiers(prereleaseA[_i], prereleaseB[_i]);\n      if (cmp !== 0) return cmp;\n    }\n  }\n  return 0;\n};\n\n\n//# sourceMappingURL=index.module.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzL0BvbmZsb3cvdXRpbC1zZW12ZXIvZGlzdC9pbmRleC5tb2R1bGUuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQixXQUFXLFFBQVE7QUFDbkIsYUFBYSxRQUFRO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQixRQUFRO0FBQzFCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCLHVEQUF1RDtBQUM1RTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRW1CO0FBQ25CIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZmxvd2ZpdC1mcm9udGVuZC8uLi9ub2RlX21vZHVsZXMvQG9uZmxvdy91dGlsLXNlbXZlci9kaXN0L2luZGV4Lm1vZHVsZS5qcz85Y2NlIl0sInNvdXJjZXNDb250ZW50IjpbIi8qXG5jb21wYXJlSWRlbnRpZmllcnMgd2FzIHRha2VuIGZyb20gc2VtdmVyIHBhY2thZ2UsIHdoaWNoIGlzIGxpY2Vuc2VkIHVuZGVyIElTQ1xuXG5HaXRIdWI6IGh0dHBzOi8vZ2l0aHViLmNvbS9ucG0vbm9kZS1zZW12ZXIvXG5OUE06IGh0dHBzOi8vd3d3Lm5wbWpzLmNvbS9wYWNrYWdlL3NlbXZlclxuTGljZW5zZTogaHR0cHM6Ly9naXRodWIuY29tL25wbS9ub2RlLXNlbXZlci9ibG9iL21haW4vTElDRU5TRVxuXG5UaGUgSVNDIExpY2Vuc2VcblxuQ29weXJpZ2h0IChjKSBJc2FhYyBaLiBTY2hsdWV0ZXIgYW5kIENvbnRyaWJ1dG9yc1xuXG5QZXJtaXNzaW9uIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBhbmQvb3IgZGlzdHJpYnV0ZSB0aGlzIHNvZnR3YXJlIGZvciBhbnlcbnB1cnBvc2Ugd2l0aCBvciB3aXRob3V0IGZlZSBpcyBoZXJlYnkgZ3JhbnRlZCwgcHJvdmlkZWQgdGhhdCB0aGUgYWJvdmVcbmNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2UgYXBwZWFyIGluIGFsbCBjb3BpZXMuXG5cblRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIgQU5EIFRIRSBBVVRIT1IgRElTQ0xBSU1TIEFMTCBXQVJSQU5USUVTXG5XSVRIIFJFR0FSRCBUTyBUSElTIFNPRlRXQVJFIElOQ0xVRElORyBBTEwgSU1QTElFRCBXQVJSQU5USUVTIE9GXG5NRVJDSEFOVEFCSUxJVFkgQU5EIEZJVE5FU1MuIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1IgQkUgTElBQkxFIEZPUlxuQU5ZIFNQRUNJQUwsIERJUkVDVCwgSU5ESVJFQ1QsIE9SIENPTlNFUVVFTlRJQUwgREFNQUdFUyBPUiBBTlkgREFNQUdFU1xuV0hBVFNPRVZFUiBSRVNVTFRJTkcgRlJPTSBMT1NTIE9GIFVTRSwgREFUQSBPUiBQUk9GSVRTLCBXSEVUSEVSIElOIEFOXG5BQ1RJT04gT0YgQ09OVFJBQ1QsIE5FR0xJR0VOQ0UgT1IgT1RIRVIgVE9SVElPVVMgQUNUSU9OLCBBUklTSU5HIE9VVCBPRiBPUlxuSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBVU0UgT1IgUEVSRk9STUFOQ0UgT0YgVEhJUyBTT0ZUV0FSRS5cbiovXG5cbnZhciBudW1lcmljID0gL15bMC05XSskLztcbnZhciBjb21wYXJlSWRlbnRpZmllcnMgPSBmdW5jdGlvbiBjb21wYXJlSWRlbnRpZmllcnMoYSwgYikge1xuICB2YXIgYW51bSA9IG51bWVyaWMudGVzdChhKTtcbiAgdmFyIGJudW0gPSBudW1lcmljLnRlc3QoYik7XG4gIGlmIChhbnVtICYmIGJudW0pIHtcbiAgICBhID0gK2E7XG4gICAgYiA9ICtiO1xuICB9XG4gIHJldHVybiBhID09PSBiID8gMCA6IGFudW0gJiYgIWJudW0gPyAtMSA6IGJudW0gJiYgIWFudW0gPyAxIDogYSA8IGIgPyAtMSA6IDE7XG59O1xuXG4vLyBPZmZpY2lhbCBTZW12ZXIgUmVnZXggaHR0cHM6Ly9zZW12ZXIub3JnLyNpcy10aGVyZS1hLXN1Z2dlc3RlZC1yZWd1bGFyLWV4cHJlc3Npb24tcmVnZXgtdG8tY2hlY2stYS1zZW12ZXItc3RyaW5nXG52YXIgVkVSU0lPTl9SRUdFWCA9IC9eKDB8WzEtOV1cXGQqKVxcLigwfFsxLTldXFxkKilcXC4oMHxbMS05XVxcZCopKD86LSgoPzowfFsxLTldXFxkKnxcXGQqW2EtekEtWi1dWzAtOWEtekEtWi1dKikoPzpcXC4oPzowfFsxLTldXFxkKnxcXGQqW2EtekEtWi1dWzAtOWEtekEtWi1dKikpKikpPyg/OlxcKyhbMC05YS16QS1aLV0rKD86XFwuWzAtOWEtekEtWi1dKykqKSk/JC87XG5cbi8qKlxuICogQ29tcGFyZXMgdHdvIHNlbXZlciB2ZXJzaW9uc1xuICogQHBhcmFtIHtzdHJpbmd9IGEgLSBUaGUgZmlyc3QgdmVyc2lvbiB0byBjb21wYXJlXG4gKiBAcGFyYW0ge3N0cmluZ30gYiAtIFRoZSBzZWNvbmQgdmVyc2lvbiB0byBjb21wYXJlXG4gKiBAcmV0dXJucyB7bnVtYmVyfSAtIFJldHVybnMgMSBpZiBhIGlzIGdyZWF0ZXIgdGhhbiBiLCAtMSBpZiBhIGlzIGxlc3MgdGhhbiBiLCBhbmQgMCBpZiB0aGV5IGFyZSBlcXVhbFxuICovXG52YXIgY29tcGFyZSA9IGZ1bmN0aW9uIGNvbXBhcmUoYSwgYikge1xuICBpZiAodHlwZW9mIGEgIT09IFwic3RyaW5nXCIgfHwgdHlwZW9mIGIgIT09IFwic3RyaW5nXCIpIHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgaW5wdXRcIik7XG4gIHZhciB2c25BID0gYS5tYXRjaChWRVJTSU9OX1JFR0VYKTtcbiAgdmFyIHZzbkIgPSBiLm1hdGNoKFZFUlNJT05fUkVHRVgpO1xuICBpZiAoIXZzbkEgfHwgIXZzbkIpIHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgaW5wdXRcIik7XG4gIGZvciAodmFyIGkgPSAxOyBpIDw9IDM7IGkrKykge1xuICAgIC8vIElmIGVpdGhlciBpcyBncmVhdGVyIHRoYW4gdGhlIG90aGVyLCByZXR1cm5cbiAgICBpZiAocGFyc2VJbnQodnNuQVtpXSkgPiBwYXJzZUludCh2c25CW2ldKSkgcmV0dXJuIDE7XG4gICAgaWYgKHBhcnNlSW50KHZzbkFbaV0pIDwgcGFyc2VJbnQodnNuQltpXSkpIHJldHVybiAtMTtcbiAgfVxuXG4gIC8vIElmIGVxdWFsLCBjb21wYXJlIHByZXJlbGVhc2VcbiAgaWYgKHZzbkFbNF0gJiYgdnNuQls0XSkge1xuICAgIHZhciBwcmVyZWxlYXNlQSA9ICh2c25BWzRdIHx8IFwiXCIpLnNwbGl0KFwiLlwiKTtcbiAgICB2YXIgcHJlcmVsZWFzZUIgPSAodnNuQls0XSB8fCBcIlwiKS5zcGxpdChcIi5cIik7XG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IE1hdGgubWF4KHByZXJlbGVhc2VBLmxlbmd0aCwgcHJlcmVsZWFzZUIubGVuZ3RoKTsgX2krKykge1xuICAgICAgLy8gSWYgb25lIGlkZW50aWZpZXIgaGFzIG1vcmUgZmllbGRzIHRoYW4gdGhlIG90aGVyICYgdGhlIHJlc3QgaXMgZXF1YWwsIHRoZSBvbmUgd2l0aCBtb3JlIGZpZWxkcyBpcyBncmVhdGVyXG4gICAgICBpZiAocHJlcmVsZWFzZUFbX2ldID09PSB1bmRlZmluZWQpIHJldHVybiAtMTtcbiAgICAgIGlmIChwcmVyZWxlYXNlQltfaV0gPT09IHVuZGVmaW5lZCkgcmV0dXJuIDE7XG5cbiAgICAgIC8vIENvbXBhcmUgZmllbGQgaWRlbnRpZmllcnNcbiAgICAgIHZhciBjbXAgPSBjb21wYXJlSWRlbnRpZmllcnMocHJlcmVsZWFzZUFbX2ldLCBwcmVyZWxlYXNlQltfaV0pO1xuICAgICAgaWYgKGNtcCAhPT0gMCkgcmV0dXJuIGNtcDtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIDA7XG59O1xuXG5leHBvcnQgeyBjb21wYXJlIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5tb2R1bGUuanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/@onflow/util-semver/dist/index.module.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/@onflow/util-template/dist/template.module.js":
/*!*********************************************************************!*\
  !*** ../node_modules/@onflow/util-template/dist/template.module.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   interleave: () => (/* binding */ interleave),\n/* harmony export */   template: () => (/* binding */ template)\n/* harmony export */ });\n/* harmony import */ var _onflow_util_logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @onflow/util-logger */ \"(ssr)/../node_modules/@onflow/util-logger/dist/util-logger.module.js\");\n\n\n/**\n * Interleaves two arrays\n * @param a - The first array\n * @param b - The second array\n * @param c - The target array\n * @returns The interleaved array\n */\nfunction interleave() {\n  let a = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  let b = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  let c = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n  if (!a.length && !b.length) return c;\n  if (!a.length) return c;\n  if (!b.length) {\n    c.push(...a);\n    return c;\n  }\n  const [aHead, ...aRest] = a;\n  const [bHead, ...bRest] = b;\n  if (aHead !== undefined) c.push(aHead);\n  if (bHead !== undefined) c.push(bHead);\n  return interleave(aRest, bRest, c);\n}\n\n/**\n * Recursively apply a value to a function\n * @param d - The value to apply\n * @returns A function that takes a function and applies the value to it\n */\nfunction recApply(d) {\n  return function (arg1) {\n    if (typeof arg1 === \"function\") {\n      _onflow_util_logger__WEBPACK_IMPORTED_MODULE_0__.log.deprecate({\n        pkg: \"FCL/SDK\",\n        subject: \"Interopolation of functions into template literals\",\n        transition: \"https://github.com/onflow/flow-js-sdk/blob/master/packages/sdk/TRANSITIONS.md#0001-deprecate-params\"\n      });\n      return recApply(d)(arg1(d));\n    }\n    return String(arg1);\n  };\n}\n\n/**\n * Creates a template function\n * @param head - A string, template string array, or template function\n * @param rest - The rest of the arguments\n * @returns A template function\n */\nfunction template(head) {\n  for (var _len = arguments.length, rest = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    rest[_key - 1] = arguments[_key];\n  }\n  if (typeof head === \"string\") return () => head;\n  if (typeof head === \"function\") return head;\n  return x => interleave([...head], rest.map(recApply(x))).join(\"\").trim();\n}\n\n\n//# sourceMappingURL=template.module.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzL0BvbmZsb3cvdXRpbC10ZW1wbGF0ZS9kaXN0L3RlbXBsYXRlLm1vZHVsZS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBMEM7O0FBRTFDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU0sb0RBQUc7QUFDVDtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlGQUF5RixhQUFhO0FBQ3RHO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFZ0M7QUFDaEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mbG93Zml0LWZyb250ZW5kLy4uL25vZGVfbW9kdWxlcy9Ab25mbG93L3V0aWwtdGVtcGxhdGUvZGlzdC90ZW1wbGF0ZS5tb2R1bGUuanM/MTU1MSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBsb2cgfSBmcm9tICdAb25mbG93L3V0aWwtbG9nZ2VyJztcblxuLyoqXG4gKiBJbnRlcmxlYXZlcyB0d28gYXJyYXlzXG4gKiBAcGFyYW0gYSAtIFRoZSBmaXJzdCBhcnJheVxuICogQHBhcmFtIGIgLSBUaGUgc2Vjb25kIGFycmF5XG4gKiBAcGFyYW0gYyAtIFRoZSB0YXJnZXQgYXJyYXlcbiAqIEByZXR1cm5zIFRoZSBpbnRlcmxlYXZlZCBhcnJheVxuICovXG5mdW5jdGlvbiBpbnRlcmxlYXZlKCkge1xuICBsZXQgYSA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogW107XG4gIGxldCBiID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiBbXTtcbiAgbGV0IGMgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IFtdO1xuICBpZiAoIWEubGVuZ3RoICYmICFiLmxlbmd0aCkgcmV0dXJuIGM7XG4gIGlmICghYS5sZW5ndGgpIHJldHVybiBjO1xuICBpZiAoIWIubGVuZ3RoKSB7XG4gICAgYy5wdXNoKC4uLmEpO1xuICAgIHJldHVybiBjO1xuICB9XG4gIGNvbnN0IFthSGVhZCwgLi4uYVJlc3RdID0gYTtcbiAgY29uc3QgW2JIZWFkLCAuLi5iUmVzdF0gPSBiO1xuICBpZiAoYUhlYWQgIT09IHVuZGVmaW5lZCkgYy5wdXNoKGFIZWFkKTtcbiAgaWYgKGJIZWFkICE9PSB1bmRlZmluZWQpIGMucHVzaChiSGVhZCk7XG4gIHJldHVybiBpbnRlcmxlYXZlKGFSZXN0LCBiUmVzdCwgYyk7XG59XG5cbi8qKlxuICogUmVjdXJzaXZlbHkgYXBwbHkgYSB2YWx1ZSB0byBhIGZ1bmN0aW9uXG4gKiBAcGFyYW0gZCAtIFRoZSB2YWx1ZSB0byBhcHBseVxuICogQHJldHVybnMgQSBmdW5jdGlvbiB0aGF0IHRha2VzIGEgZnVuY3Rpb24gYW5kIGFwcGxpZXMgdGhlIHZhbHVlIHRvIGl0XG4gKi9cbmZ1bmN0aW9uIHJlY0FwcGx5KGQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChhcmcxKSB7XG4gICAgaWYgKHR5cGVvZiBhcmcxID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgIGxvZy5kZXByZWNhdGUoe1xuICAgICAgICBwa2c6IFwiRkNML1NES1wiLFxuICAgICAgICBzdWJqZWN0OiBcIkludGVyb3BvbGF0aW9uIG9mIGZ1bmN0aW9ucyBpbnRvIHRlbXBsYXRlIGxpdGVyYWxzXCIsXG4gICAgICAgIHRyYW5zaXRpb246IFwiaHR0cHM6Ly9naXRodWIuY29tL29uZmxvdy9mbG93LWpzLXNkay9ibG9iL21hc3Rlci9wYWNrYWdlcy9zZGsvVFJBTlNJVElPTlMubWQjMDAwMS1kZXByZWNhdGUtcGFyYW1zXCJcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHJlY0FwcGx5KGQpKGFyZzEoZCkpO1xuICAgIH1cbiAgICByZXR1cm4gU3RyaW5nKGFyZzEpO1xuICB9O1xufVxuXG4vKipcbiAqIENyZWF0ZXMgYSB0ZW1wbGF0ZSBmdW5jdGlvblxuICogQHBhcmFtIGhlYWQgLSBBIHN0cmluZywgdGVtcGxhdGUgc3RyaW5nIGFycmF5LCBvciB0ZW1wbGF0ZSBmdW5jdGlvblxuICogQHBhcmFtIHJlc3QgLSBUaGUgcmVzdCBvZiB0aGUgYXJndW1lbnRzXG4gKiBAcmV0dXJucyBBIHRlbXBsYXRlIGZ1bmN0aW9uXG4gKi9cbmZ1bmN0aW9uIHRlbXBsYXRlKGhlYWQpIHtcbiAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIHJlc3QgPSBuZXcgQXJyYXkoX2xlbiA+IDEgPyBfbGVuIC0gMSA6IDApLCBfa2V5ID0gMTsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgIHJlc3RbX2tleSAtIDFdID0gYXJndW1lbnRzW19rZXldO1xuICB9XG4gIGlmICh0eXBlb2YgaGVhZCA9PT0gXCJzdHJpbmdcIikgcmV0dXJuICgpID0+IGhlYWQ7XG4gIGlmICh0eXBlb2YgaGVhZCA9PT0gXCJmdW5jdGlvblwiKSByZXR1cm4gaGVhZDtcbiAgcmV0dXJuIHggPT4gaW50ZXJsZWF2ZShbLi4uaGVhZF0sIHJlc3QubWFwKHJlY0FwcGx5KHgpKSkuam9pbihcIlwiKS50cmltKCk7XG59XG5cbmV4cG9ydCB7IGludGVybGVhdmUsIHRlbXBsYXRlIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD10ZW1wbGF0ZS5tb2R1bGUuanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/@onflow/util-template/dist/template.module.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/@onflow/util-uid/dist/util-uid.module.js":
/*!****************************************************************!*\
  !*** ../node_modules/@onflow/util-uid/dist/util-uid.module.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   uid: () => (/* binding */ uid)\n/* harmony export */ });\nconst HEX = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";\nconst T = HEX.length;\n\n/**\n * Generates a random unique identifier\n * @returns 32 character alphanumeric string\n */\nfunction uid() {\n  let str = \"\",\n    num = 32;\n  while (num--) str += HEX[Math.random() * T | 0];\n  return str;\n}\n\n\n//# sourceMappingURL=util-uid.module.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzL0BvbmZsb3cvdXRpbC11aWQvZGlzdC91dGlsLXVpZC5tb2R1bGUuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRWU7QUFDZiIsInNvdXJjZXMiOlsid2VicGFjazovL2Zsb3dmaXQtZnJvbnRlbmQvLi4vbm9kZV9tb2R1bGVzL0BvbmZsb3cvdXRpbC11aWQvZGlzdC91dGlsLXVpZC5tb2R1bGUuanM/YTdkNiJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBIRVggPSBcImFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6QUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVowMTIzNDU2Nzg5XCI7XG5jb25zdCBUID0gSEVYLmxlbmd0aDtcblxuLyoqXG4gKiBHZW5lcmF0ZXMgYSByYW5kb20gdW5pcXVlIGlkZW50aWZpZXJcbiAqIEByZXR1cm5zIDMyIGNoYXJhY3RlciBhbHBoYW51bWVyaWMgc3RyaW5nXG4gKi9cbmZ1bmN0aW9uIHVpZCgpIHtcbiAgbGV0IHN0ciA9IFwiXCIsXG4gICAgbnVtID0gMzI7XG4gIHdoaWxlIChudW0tLSkgc3RyICs9IEhFWFtNYXRoLnJhbmRvbSgpICogVCB8IDBdO1xuICByZXR1cm4gc3RyO1xufVxuXG5leHBvcnQgeyB1aWQgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXV0aWwtdWlkLm1vZHVsZS5qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/@onflow/util-uid/dist/util-uid.module.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/@onflow/fcl-wc/dist/index.module.mjs":
/*!************************************************************!*\
  !*** ../node_modules/@onflow/fcl-wc/dist/index.module.mjs ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   FLOW_METHODS: () => (/* binding */ FLOW_METHODS),\n/* harmony export */   SERVICE_PLUGIN_NAME: () => (/* binding */ SERVICE_PLUGIN_NAME),\n/* harmony export */   WC_SERVICE_METHOD: () => (/* binding */ WC_SERVICE_METHOD),\n/* harmony export */   createSessionProposal: () => (/* binding */ createSessionProposal),\n/* harmony export */   getProvider: () => (/* binding */ getProvider),\n/* harmony export */   init: () => (/* binding */ init),\n/* harmony export */   initLazy: () => (/* binding */ initLazy),\n/* harmony export */   request: () => (/* binding */ request)\n/* harmony export */ });\n/* harmony import */ var _onflow_fcl_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @onflow/fcl-core */ \"(ssr)/../node_modules/@onflow/fcl-core/dist/fcl-core.module.js\");\n/* harmony import */ var _onflow_util_invariant__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @onflow/util-invariant */ \"(ssr)/../node_modules/@onflow/util-invariant/dist/util-invariant.module.js\");\n/* harmony import */ var _onflow_util_logger__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @onflow/util-logger */ \"(ssr)/../node_modules/@onflow/util-logger/dist/util-logger.module.js\");\n/* harmony import */ var preact__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! preact */ \"(ssr)/../node_modules/preact/dist/preact.mjs\");\n/* harmony import */ var preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! preact/jsx-runtime */ \"(ssr)/../node_modules/preact/jsx-runtime/dist/jsxRuntime.mjs\");\n/* harmony import */ var _walletconnect_universal_provider__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @walletconnect/universal-provider */ \"(ssr)/../node_modules/@walletconnect/universal-provider/dist/index.es.js\");\n\n\n\n\n\n\n\n\nlet FLOW_METHODS = /*#__PURE__*/function (FLOW_METHODS) {\n  FLOW_METHODS[\"FLOW_AUTHN\"] = \"flow_authn\";\n  FLOW_METHODS[\"FLOW_PRE_AUTHZ\"] = \"flow_pre_authz\";\n  FLOW_METHODS[\"FLOW_AUTHZ\"] = \"flow_authz\";\n  FLOW_METHODS[\"FLOW_USER_SIGN\"] = \"flow_user_sign\";\n  return FLOW_METHODS;\n}({});\nlet REQUEST_TYPES = /*#__PURE__*/function (REQUEST_TYPES) {\n  REQUEST_TYPES[\"SESSION_REQUEST\"] = \"session_proposal\";\n  REQUEST_TYPES[\"SIGNING_REQUEST\"] = \"signing_request\";\n  return REQUEST_TYPES;\n}({});\nconst SERVICE_PLUGIN_NAME = \"fcl-plugin-service-walletconnect\";\nconst WC_SERVICE_METHOD = \"WC/RPC\";\n\nconst PRE_AUTHZ_SERVICE_TYPE = \"pre-authz\";\nfunction isAndroid() {\n  return typeof navigator !== \"undefined\" && /android/i.test(navigator.userAgent);\n}\nfunction isSmallIOS() {\n  return typeof navigator !== \"undefined\" && /iPhone|iPod/.test(navigator.userAgent);\n}\nfunction isLargeIOS() {\n  return typeof navigator !== \"undefined\" && /iPad/.test(navigator.userAgent);\n}\nfunction isIOS() {\n  return isSmallIOS() || isLargeIOS();\n}\nfunction isMobile() {\n  return isAndroid() || isIOS();\n}\nfunction openDeeplink(url) {\n  if (url.startsWith(\"http\")) {\n    // Workaround for https://github.com/rainbow-me/rainbowkit/issues/524.\n    // Using 'window.open' causes issues on iOS in non-Safari browsers and\n    // WebViews where a blank tab is left behind after connecting.\n    // This is especially bad in some WebView scenarios (e.g. following a\n    // link from Twitter) where the user doesn't have any mechanism for\n    // closing the blank tab.\n    // For whatever reason, links with a target of \"_blank\" don't suffer\n    // from this problem, and programmatically clicking a detached link\n    // element with the same attributes also avoids the issue.\n    const link = document.createElement(\"a\");\n    link.href = url;\n    link.target = \"_blank\";\n    link.rel = \"noreferrer noopener\";\n    link.click();\n  } else {\n    window.open(url, \"_blank\");\n  }\n}\nfunction shouldDeepLink(_ref) {\n  let {\n    service,\n    user\n  } = _ref;\n  // Only deeplink on mobile\n  if (!isMobile()) return false;\n\n  // If this is an authn request, the user has already been deeplinked by connectWc\n  if (service.endpoint === FLOW_METHODS.FLOW_AUTHN) return false;\n\n  // If there was a pre-authz WC request, the user has already been deeplinked\n  if (service.endpoint === FLOW_METHODS.FLOW_AUTHZ && user?.services?.find(s => s.method === WC_SERVICE_METHOD && s.type === PRE_AUTHZ_SERVICE_TYPE)) return false;\n  return true;\n}\nfunction preloadImage(url) {\n  if (!url) return;\n  const img = new Image();\n  img.src = url;\n}\n\n// Create a new session proposal with the WalletConnect client\nasync function createSessionProposal(_ref) {\n  let {\n    provider,\n    existingPairing\n  } = _ref;\n  const network = await _onflow_fcl_core__WEBPACK_IMPORTED_MODULE_0__.getChainId();\n  const requiredNamespaces = {\n    flow: {\n      methods: [FLOW_METHODS.FLOW_AUTHN, FLOW_METHODS.FLOW_PRE_AUTHZ, FLOW_METHODS.FLOW_AUTHZ, FLOW_METHODS.FLOW_USER_SIGN],\n      chains: [`flow:${network}`],\n      events: [\"chainChanged\", \"accountsChanged\"]\n    }\n  };\n  let cleanup;\n  const uri = new Promise((resolve, reject) => {\n    const onDisplayUri = uri => {\n      resolve(uri);\n    };\n    provider.on(\"display_uri\", onDisplayUri);\n    cleanup = () => {\n      provider.removeListener(\"display_uri\", onDisplayUri);\n      reject(new Error(\"WalletConnect Session Request aborted\"));\n    };\n  });\n  const sessionPromise = provider.connect({\n    pairingTopic: existingPairing?.topic,\n    namespaces: requiredNamespaces\n  }).finally(() => {\n    cleanup();\n  });\n  return {\n    uri: await uri,\n    approval: () => sessionPromise\n  };\n}\nconst request = async _ref2 => {\n  let {\n    method,\n    body,\n    session,\n    provider,\n    isExternal,\n    abortSignal,\n    disableNotifications\n  } = _ref2;\n  const [chainId, addr, address] = makeSessionData(session);\n  const data = JSON.stringify({\n    ...body,\n    addr,\n    address\n  });\n  const result = await Promise.race([provider.client.request({\n    request: {\n      method,\n      params: [data]\n    },\n    chainId,\n    topic: provider.session?.topic\n  }), new Promise((_, reject) => {\n    if (abortSignal?.aborted) {\n      reject(new Error(\"WalletConnect Request aborted\"));\n    }\n    abortSignal?.addEventListener(\"abort\", () => {\n      reject(new Error(\"WalletConnect Request aborted\"));\n    });\n  })]);\n  if (typeof result !== \"object\" || result == null) return;\n  switch (result.status) {\n    case \"APPROVED\":\n      function addSessionInfo(service) {\n        if (service.method === \"WC/RPC\") {\n          return {\n            ...service,\n            params: {\n              ...service.params,\n              ...(isExternal ? {\n                externalProvider: session.topic\n              } : {}),\n              ...(disableNotifications ? {\n                disableNotifications\n              } : {})\n            }\n          };\n        }\n        return service;\n      }\n      if (method === FLOW_METHODS.FLOW_AUTHN) {\n        const services = (result?.data?.services ?? []).map(addSessionInfo);\n        return {\n          ...(result.data ? result.data : {}),\n          services\n        };\n      }\n      if (method === FLOW_METHODS.FLOW_PRE_AUTHZ) {\n        return {\n          ...result.data,\n          ...(result.data?.proposer ? {\n            proposer: addSessionInfo(result.data.proposer)\n          } : {}),\n          payer: [...result.data?.payer?.map(addSessionInfo)],\n          authorization: [...result.data?.authorization?.map(addSessionInfo)]\n        };\n      }\n      return result.data;\n    case \"DECLINED\":\n      throw new Error(`Declined: ${result.reason || \"No reason supplied\"}`);\n    case \"REDIRECT\":\n      return result.data;\n    default:\n      throw new Error(`Declined: No reason supplied`);\n  }\n};\nfunction makeSessionData(session) {\n  const [namespace, reference, address] = Object.values(session.namespaces).map(namespace => namespace.accounts).flat().filter(account => account.startsWith(\"flow:\"))[0].split(\":\");\n  const chainId = `${namespace}:${reference}`;\n  const addr = address;\n  return [chainId, addr, address];\n}\n\nvar css_248z = \"*,:after,:before{--tw-border-spacing-x:0;--tw-border-spacing-y:0;--tw-translate-x:0;--tw-translate-y:0;--tw-rotate:0;--tw-skew-x:0;--tw-skew-y:0;--tw-scale-x:1;--tw-scale-y:1;--tw-pan-x: ;--tw-pan-y: ;--tw-pinch-zoom: ;--tw-scroll-snap-strictness:proximity;--tw-gradient-from-position: ;--tw-gradient-via-position: ;--tw-gradient-to-position: ;--tw-ordinal: ;--tw-slashed-zero: ;--tw-numeric-figure: ;--tw-numeric-spacing: ;--tw-numeric-fraction: ;--tw-ring-inset: ;--tw-ring-offset-width:0px;--tw-ring-offset-color:#fff;--tw-ring-color:rgba(59,130,246,.5);--tw-ring-offset-shadow:0 0 #0000;--tw-ring-shadow:0 0 #0000;--tw-shadow:0 0 #0000;--tw-shadow-colored:0 0 #0000;--tw-blur: ;--tw-brightness: ;--tw-contrast: ;--tw-grayscale: ;--tw-hue-rotate: ;--tw-invert: ;--tw-saturate: ;--tw-sepia: ;--tw-drop-shadow: ;--tw-backdrop-blur: ;--tw-backdrop-brightness: ;--tw-backdrop-contrast: ;--tw-backdrop-grayscale: ;--tw-backdrop-hue-rotate: ;--tw-backdrop-invert: ;--tw-backdrop-opacity: ;--tw-backdrop-saturate: ;--tw-backdrop-sepia: ;--tw-contain-size: ;--tw-contain-layout: ;--tw-contain-paint: ;--tw-contain-style: }::backdrop{--tw-border-spacing-x:0;--tw-border-spacing-y:0;--tw-translate-x:0;--tw-translate-y:0;--tw-rotate:0;--tw-skew-x:0;--tw-skew-y:0;--tw-scale-x:1;--tw-scale-y:1;--tw-pan-x: ;--tw-pan-y: ;--tw-pinch-zoom: ;--tw-scroll-snap-strictness:proximity;--tw-gradient-from-position: ;--tw-gradient-via-position: ;--tw-gradient-to-position: ;--tw-ordinal: ;--tw-slashed-zero: ;--tw-numeric-figure: ;--tw-numeric-spacing: ;--tw-numeric-fraction: ;--tw-ring-inset: ;--tw-ring-offset-width:0px;--tw-ring-offset-color:#fff;--tw-ring-color:rgba(59,130,246,.5);--tw-ring-offset-shadow:0 0 #0000;--tw-ring-shadow:0 0 #0000;--tw-shadow:0 0 #0000;--tw-shadow-colored:0 0 #0000;--tw-blur: ;--tw-brightness: ;--tw-contrast: ;--tw-grayscale: ;--tw-hue-rotate: ;--tw-invert: ;--tw-saturate: ;--tw-sepia: ;--tw-drop-shadow: ;--tw-backdrop-blur: ;--tw-backdrop-brightness: ;--tw-backdrop-contrast: ;--tw-backdrop-grayscale: ;--tw-backdrop-hue-rotate: ;--tw-backdrop-invert: ;--tw-backdrop-opacity: ;--tw-backdrop-saturate: ;--tw-backdrop-sepia: ;--tw-contain-size: ;--tw-contain-layout: ;--tw-contain-paint: ;--tw-contain-style: }/*! tailwindcss v3.4.14 | MIT License | https://tailwindcss.com*/*,:after,:before{border:0 solid #e5e7eb;box-sizing:border-box}:after,:before{--tw-content:\\\"\\\"}:host,html{-webkit-text-size-adjust:100%;font-feature-settings:normal;-webkit-tap-highlight-color:transparent;font-family:ui-sans-serif,system-ui,sans-serif,Apple Color Emoji,Segoe UI Emoji,Segoe UI Symbol,Noto Color Emoji;font-variation-settings:normal;line-height:1.5;-moz-tab-size:4;tab-size:4}body{line-height:inherit;margin:0}hr{border-top-width:1px;color:inherit;height:0}abbr:where([title]){-webkit-text-decoration:underline dotted;text-decoration:underline dotted}h1,h2,h3,h4,h5,h6{font-size:inherit;font-weight:inherit}a{color:inherit;text-decoration:inherit}b,strong{font-weight:bolder}code,kbd,pre,samp{font-feature-settings:normal;font-family:ui-monospace,SFMono-Regular,Menlo,Monaco,Consolas,Liberation Mono,Courier New,monospace;font-size:1em;font-variation-settings:normal}small{font-size:80%}sub,sup{font-size:75%;line-height:0;position:relative;vertical-align:baseline}sub{bottom:-.25em}sup{top:-.5em}table{border-collapse:collapse;border-color:inherit;text-indent:0}button,input,optgroup,select,textarea{font-feature-settings:inherit;color:inherit;font-family:inherit;font-size:100%;font-variation-settings:inherit;font-weight:inherit;letter-spacing:inherit;line-height:inherit;margin:0;padding:0}button,select{text-transform:none}button,input:where([type=button]),input:where([type=reset]),input:where([type=submit]){-webkit-appearance:button;background-color:transparent;background-image:none}:-moz-focusring{outline:auto}:-moz-ui-invalid{box-shadow:none}progress{vertical-align:baseline}::-webkit-inner-spin-button,::-webkit-outer-spin-button{height:auto}[type=search]{-webkit-appearance:textfield;outline-offset:-2px}::-webkit-search-decoration{-webkit-appearance:none}::-webkit-file-upload-button{-webkit-appearance:button;font:inherit}summary{display:list-item}blockquote,dd,dl,figure,h1,h2,h3,h4,h5,h6,hr,p,pre{margin:0}fieldset{margin:0}fieldset,legend{padding:0}menu,ol,ul{list-style:none;margin:0;padding:0}dialog{padding:0}textarea{resize:vertical}input::placeholder,textarea::placeholder{color:#9ca3af;opacity:1}[role=button],button{cursor:pointer}:disabled{cursor:default}audio,canvas,embed,iframe,img,object,svg,video{display:block;vertical-align:middle}img,video{height:auto;max-width:100%}[hidden]:where(:not([hidden=until-found])){display:none}.container{width:100%}@media (min-width:640px){.container{max-width:640px}}@media (min-width:768px){.container{max-width:768px}}@media (min-width:1024px){.container{max-width:1024px}}@media (min-width:1280px){.container{max-width:1280px}}@media (min-width:1536px){.container{max-width:1536px}}.sr-only{clip:rect(0,0,0,0);border-width:0;height:1px;margin:-1px;overflow:hidden;padding:0;position:absolute;white-space:nowrap;width:1px}.fixed{position:fixed}.bottom-3{bottom:.75rem}.left-3{left:.75rem}.right-3{right:.75rem}.z-\\\\[2147483647\\\\]{z-index:2147483647}.mx-auto{margin-left:auto;margin-right:auto}.ml-2{margin-left:.5rem}.ml-3{margin-left:.75rem}.mt-1{margin-top:.25rem}.flex{display:flex}.inline-flex{display:inline-flex}.h-10{height:2.5rem}.h-5{height:1.25rem}.w-10{width:2.5rem}.w-5{width:1.25rem}.max-w-sm{max-width:24rem}.grow{flex-grow:1}@keyframes slideUp{0%{transform:translateY(100%)}to{transform:translateY(0)}}.animate-slideUp{animation:slideUp .2s ease-out forwards}.self-start{align-self:flex-start}.self-center{align-self:center}.overflow-hidden{overflow:hidden}.rounded-full{border-radius:9999px}.rounded-lg{border-radius:.5rem}.rounded-md{border-radius:.375rem}.border{border-width:1px}.border-gray-200{--tw-border-opacity:1;border-color:rgb(229 231 235/var(--tw-border-opacity))}.border-transparent{border-color:transparent}.bg-transparent{background-color:transparent}.bg-white{--tw-bg-opacity:1;background-color:rgb(255 255 255/var(--tw-bg-opacity))}.p-0{padding:0}.p-2{padding:.5rem}.p-4{padding:1rem}.text-sm{font-size:.875rem;line-height:1.25rem}.font-medium{font-weight:500}.text-gray-400{--tw-text-opacity:1;color:rgb(156 163 175/var(--tw-text-opacity))}.text-gray-500{--tw-text-opacity:1;color:rgb(107 114 128/var(--tw-text-opacity))}.text-gray-900{--tw-text-opacity:1;color:rgb(17 24 39/var(--tw-text-opacity))}.shadow-lg{--tw-shadow:0 10px 15px -3px rgba(0,0,0,.1),0 4px 6px -4px rgba(0,0,0,.1);--tw-shadow-colored:0 10px 15px -3px var(--tw-shadow-color),0 4px 6px -4px var(--tw-shadow-color);box-shadow:var(--tw-ring-offset-shadow,0 0 #0000),var(--tw-ring-shadow,0 0 #0000),var(--tw-shadow)}.filter{filter:var(--tw-blur) var(--tw-brightness) var(--tw-contrast) var(--tw-grayscale) var(--tw-hue-rotate) var(--tw-invert) var(--tw-saturate) var(--tw-sepia) var(--tw-drop-shadow)}.hover\\\\:text-gray-500:hover{--tw-text-opacity:1;color:rgb(107 114 128/var(--tw-text-opacity))}.focus\\\\:border-transparent:focus{border-color:transparent}.focus\\\\:ring-0:focus{--tw-ring-offset-shadow:var(--tw-ring-inset) 0 0 0 var(--tw-ring-offset-width) var(--tw-ring-offset-color);--tw-ring-shadow:var(--tw-ring-inset) 0 0 0 calc(var(--tw-ring-offset-width)) var(--tw-ring-color);box-shadow:var(--tw-ring-offset-shadow),var(--tw-ring-shadow),var(--tw-shadow,0 0 #0000)}.dark\\\\:border-gray-600:is(.dark *){--tw-border-opacity:1;border-color:rgb(75 85 99/var(--tw-border-opacity))}.dark\\\\:bg-gray-700:is(.dark *){--tw-bg-opacity:1;background-color:rgb(55 65 81/var(--tw-bg-opacity))}.dark\\\\:text-gray-100:is(.dark *){--tw-text-opacity:1;color:rgb(243 244 246/var(--tw-text-opacity))}.dark\\\\:text-gray-200:is(.dark *){--tw-text-opacity:1;color:rgb(229 231 235/var(--tw-text-opacity))}.dark\\\\:text-gray-300:is(.dark *){--tw-text-opacity:1;color:rgb(209 213 219/var(--tw-text-opacity))}.dark\\\\:hover\\\\:text-gray-300:hover:is(.dark *){--tw-text-opacity:1;color:rgb(209 213 219/var(--tw-text-opacity))}@media (min-width:768px){.md\\\\:bottom-4{bottom:1rem}.md\\\\:left-auto{left:auto}.md\\\\:right-4{right:1rem}.md\\\\:self-start{align-self:flex-start}}\";\n\nfunction Notification(_ref) {\n  let {\n    title,\n    message,\n    icon,\n    onClick,\n    onDismiss,\n    animate\n  } = _ref;\n  return (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n    className: `fixed bottom-3 left-3 right-3 mx-auto z-[2147483647] flex max-w-sm\n        overflow-hidden rounded-lg border border-gray-200 bg-white p-4 shadow-lg\n        md:bottom-4 md:left-auto md:right-4 dark:bg-gray-700 dark:border-gray-600\n        ${animate ? \"animate-slideUp\" : \"\"}`,\n    role: \"alert\",\n    onClick: e => {\n      if (onClick) {\n        e.stopPropagation();\n        onClick?.();\n      }\n    },\n    children: [icon && (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"img\", {\n      className: \"h-10 w-10 self-center rounded-md md:self-start\",\n      src: icon,\n      alt: title\n    }), (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n      className: \"ml-3 grow\",\n      children: [(0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"p\", {\n        className: \"text-sm font-medium text-gray-900 dark:text-gray-100\",\n        children: title\n      }), (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"p\", {\n        className: \"mt-1 text-sm text-gray-500 dark:text-gray-300\",\n        children: message\n      })]\n    }), (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"button\", {\n      className: `ml-2 inline-flex rounded-full text-gray-400 hover:text-gray-500 focus:ring-0\n          dark:text-gray-200 dark:hover:text-gray-300 ${isMobile() ? \"self-center p-2\" : \"self-start p-0 bg-transparent border-transparent focus:border-transparent\"}`,\n      onClick: e => {\n        e.stopPropagation();\n        onDismiss?.();\n      },\n      children: [(0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"span\", {\n        className: \"sr-only\",\n        children: \"Close\"\n      }), (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"svg\", {\n        className: \"h-5 w-5\",\n        xmlns: \"http://www.w3.org/2000/svg\",\n        viewBox: \"0 0 20 20\",\n        fill: \"currentColor\",\n        \"aria-hidden\": \"true\",\n        children: (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"path\", {\n          fillRule: \"evenodd\",\n          d: \"M14.354 5.646a.5.5 0 00-.708 0L10 9.293 5.354 4.646a.5.5 0 00-.708.708L9.293 10l-4.647 4.646a.5.5 0 00.708.708L10 10.707l4.646 4.647a.5.5 0 00.708-.708L10.707 10l4.647-4.646a.5.5 0 000-.708z\"\n        })\n      })]\n    })]\n  });\n}\n\nlet renderRoot = null;\nlet id = 0;\nlet dismissTimeout = null;\nfunction createRenderRoot() {\n  const shadowHost = document.createElement(\"div\");\n  const shadowRoot = shadowHost.attachShadow({\n    mode: \"open\"\n  });\n  const container = document.createElement(\"div\");\n  shadowRoot.appendChild(container);\n  document.body.appendChild(shadowHost);\n  const style = document.createElement(\"style\");\n  style.textContent = css_248z;\n  shadowRoot.appendChild(style);\n\n  // Subscribe to root dark mode changes to inherit the theme\n  const mediaQuery = window.matchMedia(\"(prefers-color-scheme: dark)\");\n  const listener = () => {\n    container.classList.toggle(\"dark\", mediaQuery.matches);\n  };\n  mediaQuery.addEventListener(\"change\", listener);\n  listener();\n  return container;\n}\n\n/**\n * Show a notification to the user.  Only one notification can be shown at a time and will replace any existing notification.\n */\nfunction showNotification(_ref) {\n  let {\n    title,\n    message,\n    icon,\n    onClick,\n    onDismiss,\n    debounceDelay = 0\n  } = _ref;\n  if (!renderRoot) {\n    renderRoot = createRenderRoot();\n  }\n\n  // Don't animate if we are replacing an existing notification\n  const animate = !dismissTimeout;\n  if (dismissTimeout) {\n    clearTimeout(dismissTimeout);\n    dismissTimeout = null;\n  }\n  (0,preact__WEBPACK_IMPORTED_MODULE_3__.render)((0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(Notification, {\n    title: title,\n    message: message,\n    icon: icon,\n    onClick: onClick,\n    onDismiss: () => {\n      onDismiss?.();\n      dismissUi();\n    },\n    animate: animate\n  }, id++), renderRoot);\n  function dismissUi() {\n    if (renderRoot) {\n      (0,preact__WEBPACK_IMPORTED_MODULE_3__.render)(null, renderRoot);\n    }\n  }\n  return {\n    dismiss: () => {\n      // We need to delay the dismiss to debounce any subsequent notifications\n      // This is important when there is both a FCL/WC authz and pre-authz service\n      dismissTimeout = setTimeout(() => {\n        dismissTimeout = null;\n        dismissUi();\n      }, debounceDelay);\n    }\n  };\n}\n\nvar img = \"data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 384 512'%3e%3c!--!Font Awesome Free 6.7.1 by %40fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free Copyright 2024 Fonticons%2c Inc.--%3e%3cpath d='M16 64C16 28.7 44.7 0 80 0L304 0c35.3 0 64 28.7 64 64l0 384c0 35.3-28.7 64-64 64L80 512c-35.3 0-64-28.7-64-64L16 64zM224 448a32 32 0 1 0 -64 0 32 32 0 1 0 64 0zM304 64L80 64l0 320 224 0 0-320z'/%3e%3c/svg%3e\";\n\nfunction createStore(initialState) {\n  const subscribers = new Set();\n  let state = initialState;\n  const subscribe = subscriber => {\n    subscribers.add(subscriber);\n    return () => {\n      subscribers.delete(subscriber);\n    };\n  };\n  const setState = newState => {\n    state = newState;\n    subscribers.forEach(subscriber => subscriber(state));\n  };\n  const getState = () => state;\n  return {\n    subscribe,\n    setState,\n    getState\n  };\n}\n\nlet providerStore = createStore({});\nconst makeServicePlugin = function (provider) {\n  let config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n    projectId: \"\",\n    includeBaseWC: false,\n    wallets: [],\n    wcRequestHook: null,\n    pairingModalOverride: null,\n    disableNotifications: false\n  };\n  return {\n    name: SERVICE_PLUGIN_NAME,\n    f_type: \"ServicePlugin\",\n    type: \"discovery-service\",\n    serviceStrategy: {\n      method: WC_SERVICE_METHOD,\n      exec: makeExec(provider, config, Promise.all(/*! import() */[__webpack_require__.e(\"vendor-chunks/@walletconnect\"), __webpack_require__.e(\"vendor-chunks/valtio\"), __webpack_require__.e(\"vendor-chunks/proxy-compare\")]).then(__webpack_require__.bind(__webpack_require__, /*! @walletconnect/modal */ \"(ssr)/../node_modules/@walletconnect/modal/dist/index.js\")).then(m => m.WalletConnectModal))\n    },\n    services: []\n  };\n};\nconst makeExec = (signerPromise, config, WalletConnectModal) => {\n  return async _ref => {\n    let {\n      service,\n      body,\n      opts,\n      abortSignal,\n      user\n    } = _ref;\n    // Preload provider image\n    preloadImage(service.provider?.icon);\n    const {\n      wcRequestHook,\n      pairingModalOverride,\n      disableNotifications: _appDisabledNotifications\n    } = config;\n    const appDisabledNotifications = service.params?.disableNotifications ?? _appDisabledNotifications;\n    const resolvedProvider = await resolveProvider({\n      provider: signerPromise,\n      externalProviderOrTopic: service.params?.externalProvider\n    });\n    (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_1__.invariant)(!!resolvedProvider, \"WalletConnect is not initialized\");\n    const {\n      provider: provider,\n      isExternal\n    } = resolvedProvider;\n    let session = provider.session ?? null,\n      pairing;\n    const method = service.endpoint;\n    const appLink = validateAppLink(service);\n\n    // If the user is already connected to this session, use it\n    if (!!session?.topic && session?.topic === service.params?.externalProvider && method === FLOW_METHODS.FLOW_AUTHN) {\n      return user;\n    }\n    if (session == null) {\n      session = await new Promise((resolve, reject) => {\n        function onClose() {\n          reject(`Declined: Externally Halted`);\n        }\n        connectWc(WalletConnectModal)({\n          service,\n          onClose,\n          appLink,\n          provider,\n          method,\n          pairing,\n          wcRequestHook,\n          pairingModalOverride,\n          abortSignal\n        }).then(resolve, reject);\n      });\n    }\n    if (wcRequestHook && wcRequestHook instanceof Function) {\n      wcRequestHook({\n        type: REQUEST_TYPES.SIGNING_REQUEST,\n        method,\n        service,\n        session: session ?? null,\n        pairing: null,\n        uri: null\n      });\n    }\n\n    // Deeplink to the wallet app if necessary\n    if (shouldDeepLink({\n      service,\n      user\n    })) {\n      openDeeplink(appLink);\n    }\n\n    // Show notification to the user if not disabled by app developer or wallet\n    const walletDisabledNotifications = session?.sessionProperties?.[\"fclWc.disableNotificationsOnMobile\"] === \"true\";\n    const notification = !appDisabledNotifications && !walletDisabledNotifications ? showWcRequestNotification({\n      user,\n      service\n    }) : null;\n\n    // Make request to the WalletConnect client and return the result\n    return await request({\n      method,\n      body,\n      session,\n      provider,\n      abortSignal,\n      isExternal,\n      disableNotifications: service.params?.disableNotifications\n    }).finally(() => notification?.dismiss());\n    function validateAppLink(_ref2) {\n      let {\n        uid\n      } = _ref2;\n      if (!(uid && /^(ftp|http|https):\\/\\/[^ \"]+$/.test(uid))) {\n        (0,_onflow_util_logger__WEBPACK_IMPORTED_MODULE_2__.log)({\n          title: \"WalletConnect Service Warning\",\n          message: `service.uid should be a valid universal link url. Found: ${uid}`,\n          level: _onflow_util_logger__WEBPACK_IMPORTED_MODULE_2__.LEVELS.warn\n        });\n      }\n      return uid;\n    }\n  };\n};\n\n// Connect to WalletConnect directly from the browser via deep link or WalletConnectModal\nfunction connectWc(WalletConnectModal) {\n  return async _ref3 => {\n    let {\n      service,\n      onClose,\n      appLink,\n      provider,\n      method,\n      pairing,\n      wcRequestHook,\n      pairingModalOverride,\n      abortSignal\n    } = _ref3;\n    const projectId = provider.providerOpts.projectId;\n    (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_1__.invariant)(!!projectId, \"Cannot establish connection, WalletConnect projectId is undefined\");\n    let _uri = null,\n      walletConnectModal = null;\n    try {\n      const {\n        uri,\n        approval\n      } = await createSessionProposal({\n        provider,\n        existingPairing: pairing\n      });\n      if (wcRequestHook && wcRequestHook instanceof Function) {\n        wcRequestHook({\n          type: REQUEST_TYPES.SESSION_REQUEST,\n          method,\n          service,\n          session: null,\n          pairing: pairing ?? null,\n          uri: uri ?? null\n        });\n      }\n      if (isMobile()) {\n        const queryString = new URLSearchParams({\n          uri: uri\n        }).toString();\n        let url = pairing == null ? appLink + \"?\" + queryString : appLink;\n        openDeeplink(url);\n      } else if (!pairing) {\n        if (!pairingModalOverride) {\n          walletConnectModal = new (await WalletConnectModal)({\n            projectId\n          });\n\n          // Open WalletConnectModal\n          walletConnectModal.openModal({\n            uri,\n            onClose\n          });\n\n          // Subscribe to modal state changes\n          const unsubscribeModal = walletConnectModal.subscribeModal(state => {\n            if (state.open === false) {\n              onClose?.();\n              unsubscribeModal();\n            }\n          });\n        } else {\n          pairingModalOverride(uri, onClose);\n        }\n      }\n      const session = await Promise.race([approval(), new Promise((_, reject) => {\n        if (abortSignal?.aborted) {\n          reject(new Error(\"Session request aborted\"));\n        }\n        abortSignal?.addEventListener(\"abort\", () => {\n          reject(new Error(\"Session request aborted\"));\n        });\n      })]);\n      if (session == null) {\n        throw new Error(\"Session request failed\");\n      }\n      return session;\n    } catch (error) {\n      if (error instanceof Error) {\n        (0,_onflow_util_logger__WEBPACK_IMPORTED_MODULE_2__.log)({\n          title: `${error.name} Error establishing WalletConnect session`,\n          message: `\n          ${error.message}\n          uri: ${_uri}\n        `,\n          level: _onflow_util_logger__WEBPACK_IMPORTED_MODULE_2__.LEVELS.error\n        });\n      }\n      onClose();\n      throw error;\n    } finally {\n      walletConnectModal?.closeModal();\n    }\n  };\n}\n\n/**\n * Show a notification for a WalletConnect request.\n * @param service - The service that is requesting the user's attention.\n * @param user - The user that is being requested to sign a transaction.\n * @returns A close function to dismiss the notification.\n */\nfunction showWcRequestNotification(_ref4) {\n  let {\n    service,\n    user\n  } = _ref4;\n  const authnService = user?.services?.find(s => s.type === \"authn\");\n  const walletProvider = authnService?.provider || service.provider;\n  return showNotification({\n    title: walletProvider?.name || \"Mobile Wallet\",\n    message: isMobile() ? \"Tap to view request in app\" : \"Pending request on your mobile device\",\n    icon: walletProvider?.icon || img,\n    onClick: isMobile() && service.uid ? () => openDeeplink(service.uid) : undefined,\n    debounceDelay: service.type === \"pre-authz\" ? 500 : 0\n  });\n}\nasync function resolveProvider(_ref5) {\n  let {\n    provider,\n    externalProviderOrTopic\n  } = _ref5;\n  if (!externalProviderOrTopic) {\n    const resolved = await provider;\n    return resolved ? {\n      provider: resolved,\n      isExternal: false\n    } : null;\n  }\n\n  // If it's a UniversalProvider instance, use it directly and store it.\n  if (typeof externalProviderOrTopic !== \"string\") {\n    const topic = externalProviderOrTopic.session?.topic;\n    if (!topic) {\n      throw new Error(\"Cannot resolve provider: UniversalProvider is not initialized\");\n    }\n    providerStore.setState({\n      [topic]: externalProviderOrTopic\n    });\n    return {\n      provider: externalProviderOrTopic,\n      isExternal: true\n    };\n  }\n  const externalTopic = externalProviderOrTopic;\n  if (externalTopic) {\n    // Check if an external provider was passed in the options.\n    let storedProvider = providerStore.getState()[externalTopic];\n    if (!storedProvider) {\n      // No provider from opts and nothing in store yet—wait for it.\n      let unsubStore;\n      let timeout;\n      storedProvider = await new Promise((resolve, reject) => {\n        unsubStore = providerStore.subscribe(() => {\n          const provider = providerStore.getState()[externalTopic];\n          if (provider) {\n            resolve(provider);\n          }\n        });\n\n        // If the provider is not defined after 5 seconds, reject the promise.\n        timeout = setTimeout(() => {\n          reject(new Error(`Provider for external topic ${externalTopic} not found after 5 seconds`));\n        }, 5000);\n      }).finally(() => {\n        clearTimeout(timeout);\n        unsubStore();\n      });\n    }\n    return {\n      provider: storedProvider,\n      isExternal: true\n    };\n  }\n  const resolved = await provider;\n  return resolved ? {\n    provider: resolved,\n    isExternal: false\n  } : null;\n}\n\nconst DEFAULT_RELAY_URL = \"wss://relay.walletconnect.com\";\nconst DEFAULT_LOGGER = \"debug\";\nlet providerPromise = Promise.resolve(null);\nconst initClient = async _ref => {\n  let {\n    projectId,\n    metadata\n  } = _ref;\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_1__.invariant)(projectId != null, \"FCL Wallet Connect Error: WalletConnect projectId is required\");\n  try {\n    return _walletconnect_universal_provider__WEBPACK_IMPORTED_MODULE_5__.UniversalProvider.init({\n      logger: DEFAULT_LOGGER,\n      relayUrl: DEFAULT_RELAY_URL,\n      projectId: projectId,\n      metadata: metadata\n    });\n  } catch (error) {\n    if (error instanceof Error) {\n      (0,_onflow_util_logger__WEBPACK_IMPORTED_MODULE_2__.log)({\n        title: `${error.name} fcl-wc Init Client`,\n        message: error.message,\n        level: _onflow_util_logger__WEBPACK_IMPORTED_MODULE_2__.LEVELS.error\n      });\n    }\n    throw error;\n  }\n};\nconst initLazy = config => {\n  const {\n    FclWcServicePlugin,\n    providerPromise\n  } = initHelper(config);\n  _onflow_fcl_core__WEBPACK_IMPORTED_MODULE_0__.discovery.authn.update();\n  return {\n    FclWcServicePlugin,\n    providerPromise\n  };\n};\nconst init = async config => {\n  const {\n    FclWcServicePlugin,\n    providerPromise\n  } = initLazy(config);\n  const client = await providerPromise;\n  _onflow_fcl_core__WEBPACK_IMPORTED_MODULE_0__.discovery.authn.update();\n  return {\n    FclWcServicePlugin,\n    client\n  };\n};\nconst initHelper = config => {\n  if (typeof window === \"undefined\") {\n    throw new Error(\"FCL Wallet Connect Plugin can only be initialized in the browser\");\n  }\n\n  // Lazy load the SignClient\n  //  - Initialize the client if it doesn't exist\n  //  - If it does exist, return existing client\n  //  - If existing client fails to initialize, reinitialize\n  providerPromise = providerPromise.catch(() => null).then(_client => {\n    if (_client) {\n      return _client;\n    } else {\n      return initClient({\n        projectId: config.projectId,\n        metadata: config.metadata\n      });\n    }\n  }).catch(e => {\n    (0,_onflow_util_logger__WEBPACK_IMPORTED_MODULE_2__.log)({\n      title: `WalletConnect Client Initialization Error`,\n      message: e.message ? e.message : e,\n      level: _onflow_util_logger__WEBPACK_IMPORTED_MODULE_2__.LEVELS.error\n    });\n    throw e;\n  });\n  const FclWcServicePlugin = makeServicePlugin(providerPromise, config);\n  return {\n    FclWcServicePlugin,\n    providerPromise\n  };\n};\n\n// Returns the SignClient instance used by this plugin if it has been initialized\nasync function getProvider() {\n  return providerPromise.then(provider => {\n    if (!provider) {\n      throw new Error(\"WalletConnect client not initialized\");\n    }\n    return provider;\n  });\n}\n\n\n//# sourceMappingURL=index.module.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/@onflow/fcl-wc/dist/index.module.mjs\n");

/***/ })

};
;